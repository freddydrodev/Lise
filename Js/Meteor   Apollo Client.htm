<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">

    <!-- Basic -->
    <title>Meteor | Apollo Client</title>
    <meta name="description" content="Specifics about using Apollo in your Meteor application.">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="shortcut icon" type="image/png" href="https://www.apollographql.com/docs/react/recipes/images/favicon.png" sizes="16x16 32x32 64x64">

    <!-- Social -->
    <meta property="og:type" content="article">
    <meta property="og:url" content="https://www.apollographql.com/docs/react">
    <meta property="og:title" content="Meteor | Apollo Client">
    <meta property="og:description" content="Specifics about using Apollo in your Meteor application.">
    <meta property="og:image" content="">
    <meta name="twitter:card" content="summary_image_large">
    <meta name="twitter:site" content="@apollographql">
    <meta name="twitter:title" content="Meteor | Apollo Client">
    <meta name="twitter:description" content="Specifics about using Apollo in your Meteor application.">
    <meta name="twitter:image" content="">

    <!-- Misc -->
    <meta name="google-site-verification" content="">
    <link href="Meteor%20%20%20Apollo%20Client_files/css.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" href="Meteor%20%20%20Apollo%20Client_files/style.css">
  <style type="text/css">.font-x1 {
  font-size: 56px;
  line-height: 1;
}
.gradient-light-bottom-blue {
  background-image: linear-gradient(-178deg, #FFFFFF 0%, #FFFFFF 85%, #EFF2F6 100%);
}
nav {
  padding-left: 1.25rem;
  padding-right: 1.25rem;
  padding-top: 1.25rem;
  padding-bottom: 1.25rem;
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
}
@media screen and (min-width: 1000px) {
  nav {
    max-width: 1000px;
    margin-left: auto;
    margin-right: auto;
  }
}
@media screen and (min-width: 600px) {
  nav {
    padding-left: 1.875rem;
    padding-right: 1.875rem;
  }
}
@media screen and (min-width: 600px) {
  nav {
    padding-top: 1.875rem;
    padding-bottom: 1.875rem;
  }
}
nav .nav-logo {
  width: 100px;
  display: inline-block;
  margin-top: 7px;
}
nav .nav-logo svg {
  width: 100%;
}
nav .nav-logo svg path {
  fill: #444;
}
nav .nav-menu {
  flex: 2;
  text-align: right;
}
nav .nav-item,
nav .sub-menu {
  display: inline-block;
  vertical-align: top;
}
nav .nav-item {
  padding-top: 10px;
  padding-bottom: 10px;
}
nav .nav-menu > * + * {
  margin-left: 40px;
}
nav .sub-menu {
  position: relative;
  padding: 0;
}
nav .sub-menu .popup {
  position: absolute;
  top: 100%;
  right: -20px;
  z-index: 1000;
}
nav .sub-menu .menu-content {
  margin-top: 5px;
}
nav .sub-menu .menu-content .nav-item {
  display: block;
  text-align: right;
  white-space: nowrap;
  padding-left: 20px;
  padding-right: 20px;
}
nav .sub-menu .menu-content .nav-item:hover {
  background-color: rgba(102, 102, 102, 0.15);
}
nav .sub-menu .popup {
  -webkit-transition: all 350ms ease-in-out;
  -moz-transition: all 350ms ease-in-out;
  -o-transition: all 350ms ease-in-out;
  transition: all 350ms ease-in-out;
  pointer-events: none;
  opacity: 0;
  padding: 5px;
  margin: -5px;
  -webkit-transform: translate3d(0, -5px, 0);
  -moz-transform: translate3d(0, -5px, 0);
  -o-transform: translate3d(0, -5px, 0);
  -ms-transform: translate3d(0, -5px, 0);
  transform: translate3d(0, -5px, 0);
}
nav .sub-menu:hover .popup {
  opacity: 1;
  -webkit-transition: all 80ms ease-in-out;
  -moz-transition: all 80ms ease-in-out;
  -o-transition: all 80ms ease-in-out;
  transition: all 80ms ease-in-out;
  pointer-events: all;
  -webkit-transform: translate3d(0, 0, 0);
  -moz-transform: translate3d(0, 0, 0);
  -o-transform: translate3d(0, 0, 0);
  -ms-transform: translate3d(0, 0, 0);
  transform: translate3d(0, 0, 0);
}
nav .sub-menu .menu-content {
  background-color: #f8f8f8;
  -webkit-box-shadow: 0px 2px 4px rgba(51, 51, 51, 0.3);
  -moz-box-shadow: 0px 2px 4px rgba(51, 51, 51, 0.3);
  box-shadow: 0px 2px 4px rgba(51, 51, 51, 0.3);
}
.mobile-only {
  display: none;
}
@media (max-width: 600px) {
  .mobile-only {
    display: block;
  }
  nav {
    position: static;
    margin-top: -50px;
    top: 0;
    left: 0;
    right: 0;
    flex-direction: column;
    text-align: left;
    align-items: stretch;
    padding-left: 0;
    padding-right: 0;
  }
  nav .nav-header {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    width: 100%;
    align-items: center;
  }
  nav .nav-header .menu-button {
    margin-right: 20px;
  }
  nav .nav-logo {
    margin-left: 20px;
    margin-right: 20px;
    margin-bottom: 10px;
  }
  nav .nav-menu {
    padding-bottom: 10px;
  }
  nav .nav-menu > * {
    display: block;
    text-align: left;
    padding-left: 20px;
    padding-right: 20px;
  }
  nav .nav-menu > * + * {
    margin-left: 0;
  }
  nav .nav-menu .nav-item.main {
    color: #ffffff !important;
  }
  nav .nav-menu .sub-menu {
    padding-left: 0;
  }
  nav .nav-menu .sub-menu.open {
    background: #1a1c22;
  }
  nav .nav-menu .sub-menu.open .popup {
    padding: 0;
    display: block;
    position: relative;
    /* Rectangle 13: */
    background-image: linear-gradient(179deg, #2C2F39 2%, #363944 14%, #32353D 100%);
  }
  nav .nav-menu .sub-menu.open .popup .menu-content {
    background: transparent;
    box-shadow: none;
  }
  nav .nav-menu .sub-menu.open .popup .menu-content .nav-item {
    text-align: left;
    padding-left: 40px;
    font-weight: normal;
    color: white;
  }
  nav .nav-menu .sub-menu .nav-item.main {
    margin-left: 20px;
  }
  nav .nav-menu .sub-menu .popup {
    display: none;
    margin: 0;
    margin-left: -20px;
  }
  nav .nav-menu {
    display: none;
  }
  nav.menu-open .nav-menu {
    display: block;
  }
  nav.dark .nav-menu {
    /* Rectangle 3: */
    background-image: linear-gradient(-180deg, #000000 5%, #1E1E1E 100%);
  }
  nav.dark .menu-button path {
    fill: #fff;
  }
}
nav a {
  font-weight: 600;
}
nav.dark a {
  color: #FFB9DE;
}
nav.dark a:hover {
  color: #fff;
  text-shadow: 0px 0px 3px rgba(255, 255, 255, 0.2);
}
nav.dark .nav-logo svg path {
  fill: #fff;
}
nav.dark .menu-content {
  background-color: transparent;
  background-image: linear-gradient(180deg, #D15E95 0%, #C45D50 100%);
  box-shadow: 0 3px 6px 0 rgba(30, 30, 30, 0.6);
}
nav.dark .menu-content .nav-item {
  color: #fff;
}
nav.dark .menu-content .nav-item:hover {
  background-color: rgba(134, 44, 59, 0.57);
}
</style><script type="text/javascript" async="" src="Meteor%20%20%20Apollo%20Client_files/7be339b1c3691172cfd6b755e16547d7ce71c8bb.js"></script><script type="text/javascript" async="" src="Meteor%20%20%20Apollo%20Client_files/munchkin.js"></script><script type="text/javascript" async="" src="Meteor%20%20%20Apollo%20Client_files/fbevents.js"></script><script type="text/javascript" async="" src="Meteor%20%20%20Apollo%20Client_files/analytics_002.js"></script><script type="text/javascript" async="" src="Meteor%20%20%20Apollo%20Client_files/fs.js"></script><script type="text/javascript" async="" src="Meteor%20%20%20Apollo%20Client_files/munchkin_002.js"></script><script type="text/javascript" async="" src="Meteor%20%20%20Apollo%20Client_files/munchkin.js"></script><script async="" src="Meteor%20%20%20Apollo%20Client_files/modules-42f67cf53159a27738e0b44947cafb8b33c7df5679779d3e878a6.js"></script><style type="text/css">#c63ed61a9e25a750f50ca230266851ca235d3d66b-container{margin:0;padding:0;border:none;overflow:hidden;position:absolute}body.logged-in.admin-bar #pull-down.hb-top-right,body.logged-in.admin-bar #pull-down.hb-top-left,body.logged-in.admin-bar #pull-down.hb-bar-top,body.logged-in.admin-bar #c63ed61a9e25a750f50ca230266851ca235d3d66b-container.HB-Slider.hb-top-right,body.logged-in.admin-bar #c63ed61a9e25a750f50ca230266851ca235d3d66b-container.HB-Slider.hb-top-left,body.logged-in.admin-bar #c63ed61a9e25a750f50ca230266851ca235d3d66b-container.HB-Bar.hb-bar-top{z-index:99998 !important;top:32px !important}.hellobar#pull-down.hb-animated{animation-duration:1s;-o-animation-duration:1s;-ms-animation-duration:1s;-moz-animation-duration:1s;-webkit-animation-duration:1s;animation-fill-mode:forwards;-o-animation-fill-mode:forwards;-ms-animation-fill-mode:forwards;-moz-animation-fill-mode:forwards;-webkit-animation-fill-mode:forwards}.hellobar#pull-down{top:-1px;right:10px;padding:3px;z-index:10000002;overflow:hidden;position:absolute;border-radius:0 0 5px 5px;transform:translateY(-40px);-o-transform:translateY(-40px);-ms-transform:translateY(-40px);-moz-transform:translateY(-40px);-webkit-transform:translateY(-40px)}.hellobar#pull-down .hellobar-arrow{cursor:pointer;display:flex;height:11px;opacity:0.3;width:11px;filter:flipv;transform:scaleY(-1);-o-transform:scaleY(-1);-ms-transform:scaleY(-1);-moz-transform:scaleY(-1);-webkit-transform:scaleY(-1)}.hellobar#pull-down .hellobar-arrow:hover{opacity:0.6}.hellobar#pull-down .hellobar-arrow svg{fill:white}.hellobar#pull-down.inverted .hellobar-arrow svg{fill:#3C3E3F}#c63ed61a9e25a750f50ca230266851ca235d3d66b-container.hb-animated{animation-duration:0.25s;-o-animation-duration:0.25s;-ms-animation-duration:0.25s;-moz-animation-duration:0.25s;-webkit-animation-duration:0.25s;animation-fill-mode:forwards;-o-animation-fill-mode:forwards;-ms-animation-fill-mode:forwards;-moz-animation-fill-mode:forwards;-webkit-animation-fill-mode:forwards}@keyframes hb-bounceInDown{0%,60%,75%,90%,100%{transition-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1);-o-transition-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1);-ms-transition-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1);-moz-transition-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1);-webkit-transition-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1)}0%{transform:translate3d(0, -3000px, 0);-o-transform:translate3d(0, -3000px, 0);-ms-transform:translate3d(0, -3000px, 0);-moz-transform:translate3d(0, -3000px, 0);-webkit-transform:translate3d(0, -3000px, 0)}60%{transform:translate3d(0, 0px, 0);-o-transform:translate3d(0, 0px, 0);-ms-transform:translate3d(0, 0px, 0);-moz-transform:translate3d(0, 0px, 0);-webkit-transform:translate3d(0, 0px, 0)}75%{transform:translate3d(0, -40px, 0);-o-transform:translate3d(0, -40px, 0);-ms-transform:translate3d(0, -40px, 0);-moz-transform:translate3d(0, -40px, 0);-webkit-transform:translate3d(0, -40px, 0)}90%{transform:translate3d(0, 0px, 0);-o-transform:translate3d(0, 0px, 0);-ms-transform:translate3d(0, 0px, 0);-moz-transform:translate3d(0, 0px, 0);-webkit-transform:translate3d(0, 0px, 0)}100%{transform:none;-o-transform:none;-ms-transform:none;-moz-transform:none;-webkit-transform:none}}@-moz-keyframes hb-bounceInDown{0%,60%,75%,90%,100%{-moz-transition-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1)}0%{-moz-transform:translate3d(0, -3000px, 0)}60%{-moz-transform:translate3d(0, 0px, 0)}75%{-moz-transform:translate3d(0, -40px, 0)}90%{-moz-transform:translate3d(0, 0px, 0)}100%{-moz-transform:none}}@-webkit-keyframes hb-bounceInDown{0%,60%,75%,90%,100%{-webkit-transition-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1)}0%{-webkit-transform:translate3d(0, -3000px, 0)}60%{-webkit-transform:translate3d(0, 0px, 0)}75%{-webkit-transform:translate3d(0, -40px, 0)}90%{-webkit-transform:translate3d(0, 0px, 0)}100%{-webkit-transform:none}}@keyframes hb-bounceInUp{0%,60%,75%,90%,100%{transition-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1);-o-transition-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1);-ms-transition-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1);-moz-transition-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1);-webkit-transition-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1)}0%{transform:translate3d(0, 3000px, 0);-o-transform:translate3d(0, 3000px, 0);-ms-transform:translate3d(0, 3000px, 0);-moz-transform:translate3d(0, 3000px, 0);-webkit-transform:translate3d(0, 3000px, 0)}60%{transform:translate3d(0, 0, 0);-o-transform:translate3d(0, 0, 0);-ms-transform:translate3d(0, 0, 0);-moz-transform:translate3d(0, 0, 0);-webkit-transform:translate3d(0, 0, 0)}75%{transform:translate3d(0, 40px, 0);-o-transform:translate3d(0, 40px, 0);-ms-transform:translate3d(0, 40px, 0);-moz-transform:translate3d(0, 40px, 0);-webkit-transform:translate3d(0, 40px, 0)}90%{transform:translate3d(0, 0px, 0);-o-transform:translate3d(0, 0px, 0);-ms-transform:translate3d(0, 0px, 0);-moz-transform:translate3d(0, 0px, 0);-webkit-transform:translate3d(0, 0px, 0)}100%{transform:none;-o-transform:none;-ms-transform:none;-moz-transform:none;-webkit-transform:none}}@-moz-keyframes hb-bounceInUp{0%,60%,75%,90%,100%{-moz-transition-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1)}0%{-moz-transform:translate3d(0, 3000px, 0)}60%{-moz-transform:translate3d(0, 0, 0)}75%{-moz-transform:translate3d(0, 40px, 0)}90%{-moz-transform:translate3d(0, 0, 0)}100%{-moz-transform:none}}@-webkit-keyframes hb-bounceInUp{0%,60%,75%,90%,100%{-webkit-transition-timing-function:cubic-bezier(0.215, 0.61, 0.355, 1)}0%{-webkit-transform:translate3d(0, 3000px, 0)}60%{-webkit-transform:translate3d(0, 0px, 0)}75%{-webkit-transform:translate3d(0, 40px, 0)}90%{-webkit-transform:translate3d(0, 0px, 0)}100%{-webkit-transform:none}}@keyframes hb-bounceOutUp{0%,100%{transition-timing-function:ease-in;-o-transition-timing-function:ease-in;-ms-transition-timing-function:ease-in;-moz-transition-timing-function:ease-in;-webkit-transition-timing-function:ease-in}0%{transform:none;-o-transform:none;-ms-transform:none;-moz-transform:none;-webkit-transform:none}100%{transform:translate3d(0, -500px, 0);-o-transform:translate3d(0, -500px, 0);-ms-transform:translate3d(0, -500px, 0);-moz-transform:translate3d(0, -500px, 0);-webkit-transform:translate3d(0, -500px, 0)}}@-moz-keyframes hb-bounceOutUp{0%,100%{-moz-transition-timing-function:ease-in}0%{-moz-transform:none}100%{-moz-transform:translate3d(0, -500px, 0)}}@-webkit-keyframes hb-bounceOutUp{0%,100%{-webkit-transition-timing-function:ease-in}0%{-webkit-transform:none}100%{-webkit-transform:translate3d(0, -500px, 0)}}@keyframes hb-bounceOutDown{0%,100%{transition-timing-function:ease-in;-o-transition-timing-function:ease-in;-ms-transition-timing-function:ease-in;-moz-transition-timing-function:ease-in;-webkit-transition-timing-function:ease-in}0%{transform:none;-o-transform:none;-ms-transform:none;-moz-transform:none;-webkit-transform:none}100%{transform:translate3d(0, 500px, 0);-o-transform:translate3d(0, 500px, 0);-ms-transform:translate3d(0, 500px, 0);-moz-transform:translate3d(0, 500px, 0);-webkit-transform:translate3d(0, 500px, 0)}}@-moz-keyframes hb-bounceOutDown{0%,100%{-moz-transition-timing-function:ease-in}0%{-moz-transform:none}100%{-moz-transform:translate3d(0, 500px, 0)}}@-webkit-keyframes hb-bounceOutDown{0%,100%{-webkit-transition-timing-function:ease-in}0%{-webkit-transform:none}100%{-webkit-transform:translate3d(0, 500px, 0)}}@keyframes hb-bounceInLeft{0%,75%,100%{transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255);-o-transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255);-ms-transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255);-moz-transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255);-webkit-transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255)}0%{transform:translate3d(200%, 0, 0);-o-transform:translate3d(200%, 0, 0);-ms-transform:translate3d(200%, 0, 0);-moz-transform:translate3d(200%, 0, 0);-webkit-transform:translate3d(200%, 0, 0)}75%{transform:translate3d(-10%, 0, 0);-o-transform:translate3d(-10%, 0, 0);-ms-transform:translate3d(-10%, 0, 0);-moz-transform:translate3d(-10%, 0, 0);-webkit-transform:translate3d(-10%, 0, 0)}100%{transform:none;-o-transform:none;-ms-transform:none;-moz-transform:none;-webkit-transform:none}}@-moz-keyframes hb-bounceInLeft{0%,75%,100%{-moz-transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255)}0%{-moz-transform:translate3d(200%, 0, 0)}75%{-moz-transform:translate3d(-10%, 0, 0)}100%{-moz-transform:none}}@-webkit-keyframes hb-bounceInLeft{0%,75%,100%{-webkit-transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255)}0%{-webkit-transform:translate3d(200%, 0, 0)}75%{-webkit-transform:translate3d(-10%, 0, 0)}100%{-webkit-transform:none}}@keyframes hb-bounceOutRight{0%,25%,100%{transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255);-o-transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255);-ms-transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255);-moz-transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255);-webkit-transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255)}0%{transform:none;-o-transform:none;-ms-transform:none;-moz-transform:none;-webkit-transform:none}25%{transform:translate3d(-10%, 0, 0);-o-transform:translate3d(-10%, 0, 0);-ms-transform:translate3d(-10%, 0, 0);-moz-transform:translate3d(-10%, 0, 0);-webkit-transform:translate3d(-10%, 0, 0)}100%{transform:translate3d(200%, 0, 0);-o-transform:translate3d(200%, 0, 0);-ms-transform:translate3d(200%, 0, 0);-moz-transform:translate3d(200%, 0, 0);-webkit-transform:translate3d(200%, 0, 0)}}@-moz-keyframes hb-bounceOutRight{0%,25%,100%{-moz-transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255)}0%{-moz-transform:none}25%{-moz-transform:translate3d(-10%, 0, 0)}100%{-moz-transform:translate3d(200%, 0, 0)}}@-webkit-keyframes hb-bounceOutRight{0%,25%,100%{-webkit-transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255)}0%{-webkit-transform:none}25%{-webkit-transform:translate3d(-10%, 0, 0)}100%{-webkit-transform:translate3d(200%, 0, 0)}}@keyframes hb-bounceInRight{0%,75%,100%{transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255);-o-transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255);-ms-transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255);-moz-transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255);-webkit-transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255)}0%{transform:translate3d(-200%, 0, 0);-o-transform:translate3d(-200%, 0, 0);-ms-transform:translate3d(-200%, 0, 0);-moz-transform:translate3d(-200%, 0, 0);-webkit-transform:translate3d(-200%, 0, 0)}75%{transform:translate3d(10%, 0, 0);-o-transform:translate3d(10%, 0, 0);-ms-transform:translate3d(10%, 0, 0);-moz-transform:translate3d(10%, 0, 0);-webkit-transform:translate3d(10%, 0, 0)}100%{transform:none;-o-transform:none;-ms-transform:none;-moz-transform:none;-webkit-transform:none}}@-moz-keyframes hb-bounceInRight{0%,75%,100%{-moz-transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255)}0%{-moz-transform:translate3d(-200%, 0, 0)}75%{-moz-transform:translate3d(10%, 0, 0)}100%{-moz-transform:none}}@-webkit-keyframes hb-bounceInRight{0%,75%,100%{-webkit-transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255)}0%{-webkit-transform:translate3d(-200%, 0, 0)}75%{-webkit-transform:translate3d(10%, 0, 0)}100%{-webkit-transform:none}}@keyframes hb-bounceOutLeft{0%,25%,100%{transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255);-o-transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255);-ms-transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255);-moz-transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255);-webkit-transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255)}0%{transform:none;-o-transform:none;-ms-transform:none;-moz-transform:none;-webkit-transform:none}25%{transform:translate3d(10%, 0, 0);-o-transform:translate3d(10%, 0, 0);-ms-transform:translate3d(10%, 0, 0);-moz-transform:translate3d(10%, 0, 0);-webkit-transform:translate3d(10%, 0, 0)}100%{transform:translate3d(-200%, 0, 0);-o-transform:translate3d(-200%, 0, 0);-ms-transform:translate3d(-200%, 0, 0);-moz-transform:translate3d(-200%, 0, 0);-webkit-transform:translate3d(-200%, 0, 0)}}@-moz-keyframes hb-bounceOutLeft{0%,25%,100%{-moz-transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255)}0%{-moz-transform:none}25%{-moz-transform:translate3d(10%, 0, 0)}100%{-moz-transform:translate3d(-200%, 0, 0)}}@-webkit-keyframes hb-bounceOutLeft{0%,25%,100%{-webkit-transition-timing-function:cubic-bezier(0.65, -0.25, 0.325, 1.255)}0%{-webkit-transform:none}25%{-webkit-transform:translate3d(10%, 0, 0)}100%{-webkit-transform:translate3d(-200%, 0, 0)}}@keyframes hb-fadeIn{0%,100%{transition-timing-function:ease-in;-o-transition-timing-function:ease-in;-ms-transition-timing-function:ease-in;-moz-transition-timing-function:ease-in;-webkit-transition-timing-function:ease-in}0%{opacity:0}100%{opacity:1}}@-moz-keyframes hb-fadeIn{0%,100%{-moz-transition-timing-function:ease-in}0%{opacity:0}100%{opacity:1}}@-webkit-keyframes hb-fadeIn{0%,100%{-webkit-transition-timing-function:ease-in}0%{opacity:0}100%{opacity:1}}@keyframes hb-fadeOut{0%,100%{transition-timing-function:ease-in;-o-transition-timing-function:ease-in;-ms-transition-timing-function:ease-in;-moz-transition-timing-function:ease-in;-webkit-transition-timing-function:ease-in}0%{opacity:1}100%{opacity:0}}@-moz-keyframes hb-fadeOut{0%,100%{-moz-transition-timing-function:ease-in}0%{opacity:1}100%{opacity:0}}@-webkit-keyframes hb-fadeOut{0%,100%{-webkit-transition-timing-function:ease-in}0%{opacity:1}100%{opacity:0}}@keyframes hb-fadeInDown{0%,100%{transition-timing-function:ease-in;-o-transition-timing-function:ease-in;-ms-transition-timing-function:ease-in;-moz-transition-timing-function:ease-in;-webkit-transition-timing-function:ease-in}0%{opacity:0;height:110%;margin-top:-5%}100%{opacity:1;height:100%;margin-top:0}}@-moz-keyframes hb-fadeInDown{0%,100%{-moz-transition-timing-function:ease-in}0%{opacity:0;height:110%;margin-top:-5%}100%{opacity:1;height:100%;margin-top:0}}@-webkit-keyframes hb-fadeInDown{0%,100%{-webkit-transition-timing-function:ease-in}0%{opacity:0;height:110%;margin-top:-5%}100%{opacity:1;height:100%;margin-top:0}}@keyframes hb-fadeOutUp{0%,100%{transition-timing-function:ease-in;-o-transition-timing-function:ease-in;-ms-transition-timing-function:ease-in;-moz-transition-timing-function:ease-in;-webkit-transition-timing-function:ease-in}0%{opacity:1;height:100%;margin-top:0}100%{opacity:0;height:110%;margin-top:-5%}}@-moz-keyframes hb-fadeOutUp{0%,100%{-moz-transition-timing-function:ease-in}0%{opacity:1;height:100%;margin-top:0}100%{opacity:0;height:110%;margin-top:-5%}}@-webkit-keyframes hb-fadeOutUp{0%,100%{-webkit-transition-timing-function:ease-in}0%{opacity:1;height:100%;margin-top:0}100%{opacity:0;height:110%;margin-top:-5%}}

#c63ed61a9e25a750f50ca230266851ca235d3d66b-container.HB-Slider{width:400px;position:fixed;_position:absolute;_top:expression(eval(document.body.scrollTop));z-index:10000000}#c63ed61a9e25a750f50ca230266851ca235d3d66b-container.HB-Slider.hb-top-left,#c63ed61a9e25a750f50ca230266851ca235d3d66b-container.HB-Slider.hb-bottom-left{left:0}#c63ed61a9e25a750f50ca230266851ca235d3d66b-container.HB-Slider.hb-top-right,#c63ed61a9e25a750f50ca230266851ca235d3d66b-container.HB-Slider.hb-bottom-right{right:0}#c63ed61a9e25a750f50ca230266851ca235d3d66b-container.HB-Slider.hb-top-left,#c63ed61a9e25a750f50ca230266851ca235d3d66b-container.HB-Slider.hb-top-right{top:0}#c63ed61a9e25a750f50ca230266851ca235d3d66b-container.HB-Slider.hb-bottom-left,#c63ed61a9e25a750f50ca230266851ca235d3d66b-container.HB-Slider.hb-bottom-right{bottom:0}.hellobar#pull-down.hb-top-right,.hellobar#pull-down.hb-bottom-right{left:auto;right:0;position:fixed;border-radius:5px 0 0 5px;transform:translateX(20px);-o-transform:translateX(20px);-ms-transform:translateX(20px);-moz-transform:translateX(20px);-webkit-transform:translateX(20px)}.hellobar#pull-down.hb-top-right{top:60px;bottom:auto}.hellobar#pull-down.hb-bottom-right{top:auto;bottom:60px}.hellobar#pull-down.hb-top-right .hellobar-arrow,.hellobar#pull-down.hb-bottom-right .hellobar-arrow{transform:rotate(-90deg);-webkit-transform:rotate(-90deg)}.hellobar#pull-down.hb-top-left,.hellobar#pull-down.hb-bottom-left{left:0;right:auto;position:fixed;border-radius:0 5px 5px 0;transform:translateX(-20px);-o-transform:translateX(-20px);-ms-transform:translateX(-20px);-moz-transform:translateX(-20px);-webkit-transform:translateX(-20px)}.hellobar#pull-down.hb-top-left{top:60px;bottom:auto}.hellobar#pull-down.hb-bottom-left{top:auto;bottom:60px}.hellobar#pull-down.hb-top-left .hellobar-arrow,.hellobar#pull-down.hb-bottom-left .hellobar-arrow{transform:rotate(90deg);-webkit-transform:rotate(90deg)}#c63ed61a9e25a750f50ca230266851ca235d3d66b-container.HB-Slider.hb-animated,.hellobar#pull-down.hb-animated{animation-duration:0.5s;-o-animation-duration:0.5s;-ms-animation-duration:0.5s;-moz-animation-duration:0.5s;-webkit-animation-duration:0.5s}#c63ed61a9e25a750f50ca230266851ca235d3d66b-container.HB-Slider.hb-top-right.hb-animated,#c63ed61a9e25a750f50ca230266851ca235d3d66b-container.HB-Slider.hb-bottom-right.hb-animated{transform:translate3d(200%, 0, 0);-o-transform:translate3d(200%, 0, 0);-ms-transform:translate3d(200%, 0, 0);-moz-transform:translate3d(200%, 0, 0);-webkit-transform:translate3d(200%, 0, 0)}#c63ed61a9e25a750f50ca230266851ca235d3d66b-container.HB-Slider.hb-top-right.hb-animateIn,#c63ed61a9e25a750f50ca230266851ca235d3d66b-container.HB-Slider.hb-bottom-right.hb-animateIn,.hellobar#pull-down.hb-top-right.hb-animateIn,.hellobar#pull-down.hb-bottom-right.hb-animateIn{animation-name:hb-bounceInLeft;-o-animation-name:hb-bounceInLeft;-ms-animation-name:hb-bounceInLeft;-moz-animation-name:hb-bounceInLeft;-webkit-animation-name:hb-bounceInLeft}#c63ed61a9e25a750f50ca230266851ca235d3d66b-container.HB-Slider.hb-top-right.hb-animateOut,#c63ed61a9e25a750f50ca230266851ca235d3d66b-container.HB-Slider.hb-bottom-right.hb-animateOut,.hellobar#pull-down.hb-top-right.hb-animateOut,.hellobar#pull-down.hb-bottom-right.hb-animateOut{animation-name:hb-bounceOutRight;-o-animation-name:hb-bounceOutRight;-ms-animation-name:hb-bounceOutRight;-moz-animation-name:hb-bounceOutRight;-webkit-animation-name:hb-bounceOutRight}#c63ed61a9e25a750f50ca230266851ca235d3d66b-container.HB-Slider.hb-top-left.hb-animated,#c63ed61a9e25a750f50ca230266851ca235d3d66b-container.HB-Slider.hb-bottom-left.hb-animated{transform:translate3d(-200%, 0, 0);-o-transform:translate3d(-200%, 0, 0);-ms-transform:translate3d(-200%, 0, 0);-moz-transform:translate3d(-200%, 0, 0);-webkit-transform:translate3d(-200%, 0, 0)}#c63ed61a9e25a750f50ca230266851ca235d3d66b-container.HB-Slider.hb-top-left.hb-animateIn,#c63ed61a9e25a750f50ca230266851ca235d3d66b-container.HB-Slider.hb-bottom-left.hb-animateIn,.hellobar#pull-down.hb-top-left.hb-animateIn,.hellobar#pull-down.hb-bottom-left.hb-animateIn{animation-name:hb-bounceInRight;-o-animation-name:hb-bounceInRight;-ms-animation-name:hb-bounceInRight;-moz-animation-name:hb-bounceInRight;-webkit-animation-name:hb-bounceInRight}#c63ed61a9e25a750f50ca230266851ca235d3d66b-container.HB-Slider.hb-top-left.hb-animateOut,#c63ed61a9e25a750f50ca230266851ca235d3d66b-container.HB-Slider.hb-bottom-left.hb-animateOut,.hellobar#pull-down.hb-top-left.hb-animateOut,.hellobar#pull-down.hb-bottom-left.hb-animateOut{animation-name:hb-bounceOutLeft;-o-animation-name:hb-bounceOutLeft;-ms-animation-name:hb-bounceOutLeft;-moz-animation-name:hb-bounceOutLeft;-webkit-animation-name:hb-bounceOutLeft}

</style></head>
  <body class="">
    

  <div class="nav sunset">
    <div class="nav-group left">
      <div class="nav-item mobile-button show-mobile">
        <span class="js-sidebar-toggle ">
          <span class="icon-menu"></span>
        </span>
      </div>
      <div class="nav-item">
        
          <a class="logo-wrapper" href="https://www.apollographql.com/" title="Apollo Developers">
            <img src="Meteor%20%20%20Apollo%20Client_files/logo-apollo-space-left.svg" alt="Apollo" class="logo">
            <img src="Meteor%20%20%20Apollo%20Client_files/logo-apollo-subbrands-developers-space.svg" class="logo-subbrand" alt="Developers">
          </a>
      </div>
    </div>

    <div class="nav-group right">
      <div id="nav-container" class="show-desktop">
  <nav id="nav" class="light">
    <div class="nav-header">
      <a class="nav-logo" href="https://www.apollographql.com/"><svg viewBox="0,0,816,240">
<path class="apollo" d="M169.68,161.48h-22l-25.27-71.7L108.22,129h21.84l6,17.07H102.89l-5.74,15.43h-22l35.1-91.1h24.31Zm392.25,0V144.41H523.41v-74H503.88v91.1Zm112.57,0V144.41H636v-74H616.44v91.1ZM395.71,86.71A29.29,29.29,0,1,0,425,116a29.32,29.32,0,0,0-29.29-29.29m0-17.83A47.12,47.12,0,1,1,348.6,116a47.12,47.12,0,0,1,47.12-47.12ZM764.28,86.71A29.29,29.29,0,1,0,793.57,116a29.32,29.32,0,0,0-29.29-29.29m0-17.83A47.12,47.12,0,1,1,717.16,116a47.12,47.12,0,0,1,47.12-47.12Zm-466,31.38c0,16.19-13.12,29.87-29.32,29.87H245.9v31.35H226.5V70.38H269C285.17,70.38,298.29,84.06,298.29,100.25Zm-17.83,0c0-6.33-5.15-12-11.49-12H245.9V112.3H269C275.31,112.3,280.47,106.59,280.47,100.25Zm-70.71,88.87a5,5,0,0,0-4.09,2.12s-4.37,5-6.73,7.35a108.71,108.71,0,1,1-8.49-161.28A12.25,12.25,0,1,0,197.3,30a118.67,118.67,0,1,0,16,167.71,5,5,0,0,0-3.55-8.56Z" transform="translate(-3.46 -3.12)"></path>
</svg>
</a>
      <a id="nav-root-menu-button" class="menu-button mobile-only"><svg version="1.1" width="24" height="24" viewBox="0 0 24 24">
<path d="M3 6h18v2.016h-18v-2.016zM3 12.984v-1.969h18v1.969h-18zM3 18v-2.016h18v2.016h-18z"></path>
</svg>
  </a>
    </div>

    <div class="nav-menu undefined">
      <a class="nav-item main home" href="https://www.apollographql.com/">
    <span>Home</span>
  </a><div class="sub-menu" id="client">
            <a class="nav-item main client" href="https://www.apollographql.com/client">
    <span>Client</span>
  </a>
            <div class="popup">
              <div class="menu-content">
                
                    <a class="nav-item" href="https://www.apollographql.com/client/">
                      <span>Features</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/react/">
                      <span>React + React Native</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/angular/">
                      <span>Angular</span>
                    </a>
                  
                    <a class="nav-item" href="https://github.com/akryum/vue-apollo" target="_blank">
                      <span>Vue.js</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/link/">
                      <span>Apollo Link</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/ios/">
                      <span>Native iOS</span>
                    </a>
                  
                    <a class="nav-item" href="https://github.com/apollographql/apollo-android" target="_blank">
                      <span>Native Android</span>
                    </a>
                  
              </div>
            </div>
          </div><div class="sub-menu" id="engine">
            <a class="nav-item main engine" href="https://www.apollographql.com/engine">
    <span>Engine</span>
  </a>
            <div class="popup">
              <div class="menu-content">
                
                    <a class="nav-item" href="https://www.apollographql.com/engine/">
                      <span>Features</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/engine/">
                      <span>Docs</span>
                    </a>
                  
              </div>
            </div>
          </div><div class="sub-menu" id="servers">
            <a class="nav-item main servers" href="https://www.apollographql.com/servers">
    <span>Servers</span>
  </a>
            <div class="popup">
              <div class="menu-content">
                
                    <a class="nav-item" href="https://www.apollographql.com/servers/">
                      <span>Features</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/apollo-server/">
                      <span>Apollo Server</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/graphql-tools/">
                      <span>graphql-tools</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/graphql-tools/schema-stitching.html">
                      <span>Schema Stitching</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/graphql-subscriptions/">
                      <span>GraphQL Subscriptions</span>
                    </a>
                  
                    <a class="nav-item" href="https://github.com/apollographql/apollo-tracing" target="_blank">
                      <span>Apollo Tracing</span>
                    </a>
                  
                    <a class="nav-item" href="https://github.com/apollographql/apollo-cache-control" target="_blank">
                      <span>Apollo Cache Control</span>
                    </a>
                  
              </div>
            </div>
          </div><div class="sub-menu" id="docs">
            <a class="nav-item main docs" href="https://www.apollographql.com/docs/">
    <span>Docs</span>
  </a>
            <div class="popup">
              <div class="menu-content">
                
                    <a class="nav-item" href="https://www.apollographql.com/docs/">
                      <span>Index</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/react/">
                      <span>React + React Native</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/angular/">
                      <span>Angular</span>
                    </a>
                  
                    <a class="nav-item" href="https://github.com/akryum/vue-apollo" target="_blank">
                      <span>Vue.js</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/link/">
                      <span>Apollo Link</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/ios/">
                      <span>Native iOS</span>
                    </a>
                  
                    <a class="nav-item" href="https://github.com/apollographql/apollo-android" target="_blank">
                      <span>Native Android</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/engine/">
                      <span>Apollo Engine</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/apollo-server/">
                      <span>Apollo Server</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/graphql-tools/">
                      <span>graphql-tools</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/graphql-tools/schema-stitching.html">
                      <span>Schema Stitching</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/graphql-subscriptions/">
                      <span>GraphQL Subscriptions</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/community/">
                      <span>Contribute</span>
                    </a>
                  
              </div>
            </div>
          </div><a class="nav-item main support" href="https://www.apollographql.com/support/">
    <span>Support</span>
  </a><div class="sub-menu" id="community">
            <a class="nav-item main community" href="https://www.apollographql.com/docs/community/">
    <span>Community</span>
  </a>
            <div class="popup">
              <div class="menu-content">
                
                    <a class="nav-item" href="https://www.apollographql.com/docs/community/">
                      <span>Get Involved</span>
                    </a>
                  
                    <a class="nav-item" href="https://dev-blog.apollodata.com/" target="_blank">
                      <span>Blog</span>
                    </a>
                  
                    <a class="nav-item" href="#slack">
                      <span>Slack</span>
                    </a>
                  
                    <a class="nav-item" href="https://twitter.com/apollographql" target="_blank">
                      <span>Twitter</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.youtube.com/c/ApolloGraphQL" target="_blank">
                      <span>YouTube</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/community/">
                      <span>Contribute</span>
                    </a>
                  
                    <a class="nav-item" href="https://summit.graphql.com/" target="_blank">
                      <span>GraphQL Summit</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.graphql.com/" target="_blank">
                      <span>Explore GraphQL</span>
                    </a>
                  
              </div>
            </div>
          </div>
    </div>
  </nav>

</div>
      <script src="Meteor%20%20%20Apollo%20Client_files/1186436864708126.js" async=""></script><script async="" src="Meteor%20%20%20Apollo%20Client_files/fbevents.js"></script><script type="text/javascript" async="" src="Meteor%20%20%20Apollo%20Client_files/sjsa6a1fxr"></script><script async="" src="Meteor%20%20%20Apollo%20Client_files/uwt.js"></script><script type="text/javascript" async="" src="Meteor%20%20%20Apollo%20Client_files/heap-87222794.js"></script><script type="text/javascript" async="" src="Meteor%20%20%20Apollo%20Client_files/analytics_002.js"></script><script type="text/javascript" async="" src="Meteor%20%20%20Apollo%20Client_files/analytics.js"></script><script async="" src="Meteor%20%20%20Apollo%20Client_files/gtm.js"></script><script async="" src="Meteor%20%20%20Apollo%20Client_files/meteorjs.txt"></script><script src="Meteor%20%20%20Apollo%20Client_files/index.js"></script>
      <script>ApolloNav.initNav({ theme: 'light' }, 'nav-container')</script>
    </div>
  </div>

  <div class="sidebar charcoal">
  <div class="panel">
    <div id="sidebar-panel-nav">
  <nav id="mobile-nav" class="light">
    <div class="nav-header">
      <a class="nav-logo" href="https://www.apollographql.com/"><svg viewBox="0,0,816,240">
<path class="apollo" d="M169.68,161.48h-22l-25.27-71.7L108.22,129h21.84l6,17.07H102.89l-5.74,15.43h-22l35.1-91.1h24.31Zm392.25,0V144.41H523.41v-74H503.88v91.1Zm112.57,0V144.41H636v-74H616.44v91.1ZM395.71,86.71A29.29,29.29,0,1,0,425,116a29.32,29.32,0,0,0-29.29-29.29m0-17.83A47.12,47.12,0,1,1,348.6,116a47.12,47.12,0,0,1,47.12-47.12ZM764.28,86.71A29.29,29.29,0,1,0,793.57,116a29.32,29.32,0,0,0-29.29-29.29m0-17.83A47.12,47.12,0,1,1,717.16,116a47.12,47.12,0,0,1,47.12-47.12Zm-466,31.38c0,16.19-13.12,29.87-29.32,29.87H245.9v31.35H226.5V70.38H269C285.17,70.38,298.29,84.06,298.29,100.25Zm-17.83,0c0-6.33-5.15-12-11.49-12H245.9V112.3H269C275.31,112.3,280.47,106.59,280.47,100.25Zm-70.71,88.87a5,5,0,0,0-4.09,2.12s-4.37,5-6.73,7.35a108.71,108.71,0,1,1-8.49-161.28A12.25,12.25,0,1,0,197.3,30a118.67,118.67,0,1,0,16,167.71,5,5,0,0,0-3.55-8.56Z" transform="translate(-3.46 -3.12)"></path>
</svg>
</a>
      <a id="nav-root-menu-button" class="menu-button mobile-only"><svg version="1.1" width="24" height="24" viewBox="0 0 24 24">
<path d="M3 6h18v2.016h-18v-2.016zM3 12.984v-1.969h18v1.969h-18zM3 18v-2.016h18v2.016h-18z"></path>
</svg>
  </a>
    </div>

    <div class="nav-menu undefined">
      <a class="nav-item main home" href="https://www.apollographql.com/">
    <span>Home</span>
  </a><div class="sub-menu" id="client">
            <a class="nav-item main client" href="https://www.apollographql.com/client">
    <span>Client</span>
  </a>
            <div class="popup">
              <div class="menu-content">
                
                    <a class="nav-item" href="https://www.apollographql.com/client/">
                      <span>Features</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/react/">
                      <span>React + React Native</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/angular/">
                      <span>Angular</span>
                    </a>
                  
                    <a class="nav-item" href="https://github.com/akryum/vue-apollo" target="_blank">
                      <span>Vue.js</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/link/">
                      <span>Apollo Link</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/ios/">
                      <span>Native iOS</span>
                    </a>
                  
                    <a class="nav-item" href="https://github.com/apollographql/apollo-android" target="_blank">
                      <span>Native Android</span>
                    </a>
                  
              </div>
            </div>
          </div><div class="sub-menu" id="engine">
            <a class="nav-item main engine" href="https://www.apollographql.com/engine">
    <span>Engine</span>
  </a>
            <div class="popup">
              <div class="menu-content">
                
                    <a class="nav-item" href="https://www.apollographql.com/engine/">
                      <span>Features</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/engine/">
                      <span>Docs</span>
                    </a>
                  
              </div>
            </div>
          </div><div class="sub-menu" id="servers">
            <a class="nav-item main servers" href="https://www.apollographql.com/servers">
    <span>Servers</span>
  </a>
            <div class="popup">
              <div class="menu-content">
                
                    <a class="nav-item" href="https://www.apollographql.com/servers/">
                      <span>Features</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/apollo-server/">
                      <span>Apollo Server</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/graphql-tools/">
                      <span>graphql-tools</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/graphql-tools/schema-stitching.html">
                      <span>Schema Stitching</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/graphql-subscriptions/">
                      <span>GraphQL Subscriptions</span>
                    </a>
                  
                    <a class="nav-item" href="https://github.com/apollographql/apollo-tracing" target="_blank">
                      <span>Apollo Tracing</span>
                    </a>
                  
                    <a class="nav-item" href="https://github.com/apollographql/apollo-cache-control" target="_blank">
                      <span>Apollo Cache Control</span>
                    </a>
                  
              </div>
            </div>
          </div><div class="sub-menu" id="docs">
            <a class="nav-item main docs" href="https://www.apollographql.com/docs/">
    <span>Docs</span>
  </a>
            <div class="popup">
              <div class="menu-content">
                
                    <a class="nav-item" href="https://www.apollographql.com/docs/">
                      <span>Index</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/react/">
                      <span>React + React Native</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/angular/">
                      <span>Angular</span>
                    </a>
                  
                    <a class="nav-item" href="https://github.com/akryum/vue-apollo" target="_blank">
                      <span>Vue.js</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/link/">
                      <span>Apollo Link</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/ios/">
                      <span>Native iOS</span>
                    </a>
                  
                    <a class="nav-item" href="https://github.com/apollographql/apollo-android" target="_blank">
                      <span>Native Android</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/engine/">
                      <span>Apollo Engine</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/apollo-server/">
                      <span>Apollo Server</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/graphql-tools/">
                      <span>graphql-tools</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/graphql-tools/schema-stitching.html">
                      <span>Schema Stitching</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/graphql-subscriptions/">
                      <span>GraphQL Subscriptions</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/community/">
                      <span>Contribute</span>
                    </a>
                  
              </div>
            </div>
          </div><a class="nav-item main support" href="https://www.apollographql.com/support/">
    <span>Support</span>
  </a><div class="sub-menu" id="community">
            <a class="nav-item main community" href="https://www.apollographql.com/docs/community/">
    <span>Community</span>
  </a>
            <div class="popup">
              <div class="menu-content">
                
                    <a class="nav-item" href="https://www.apollographql.com/docs/community/">
                      <span>Get Involved</span>
                    </a>
                  
                    <a class="nav-item" href="https://dev-blog.apollodata.com/" target="_blank">
                      <span>Blog</span>
                    </a>
                  
                    <a class="nav-item" href="#slack">
                      <span>Slack</span>
                    </a>
                  
                    <a class="nav-item" href="https://twitter.com/apollographql" target="_blank">
                      <span>Twitter</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.youtube.com/c/ApolloGraphQL" target="_blank">
                      <span>YouTube</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.apollographql.com/docs/community/">
                      <span>Contribute</span>
                    </a>
                  
                    <a class="nav-item" href="https://summit.graphql.com/" target="_blank">
                      <span>GraphQL Summit</span>
                    </a>
                  
                    <a class="nav-item" href="https://www.graphql.com/" target="_blank">
                      <span>Explore GraphQL</span>
                    </a>
                  
              </div>
            </div>
          </div>
    </div>
  </nav>

</div>
    <script>ApolloNav.initNav({ theme: 'light', id: 'mobile-nav' }, 'sidebar-panel-nav')</script>
  </div>

  <div class="sidebar-content">
    <div class="topcap">
      <span class="title-sidebar">Apollo Client</span>
      
    </div>

    

    <ul class="toc">
      
        <li>
          
          <ul class="list-toc">
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/index.html" class="sidebar-link ">
                  <span>Introduction</span>
                </a>
              </li>
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/basics/integrations.html" class="sidebar-link ">
                  <span>View Integrations</span>
                </a>
              </li>
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/2.0-migration.html" class="sidebar-link ">
                  <span>Migrating from 1.0</span>
                </a>
              </li>
            
          </ul>
        </li>
      
        <li>
          
            <div class="heading-toc">Basics</div>
          
          <ul class="list-toc">
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/basics/setup.html" class="sidebar-link ">
                  <span>Setup and options</span>
                </a>
              </li>
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/basics/queries.html" class="sidebar-link ">
                  <span>Queries</span>
                </a>
              </li>
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/basics/mutations.html" class="sidebar-link ">
                  <span>Mutations</span>
                </a>
              </li>
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/basics/network-layer.html" class="sidebar-link ">
                  <span>Network layer (Apollo Link)</span>
                </a>
              </li>
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/basics/caching.html" class="sidebar-link ">
                  <span>Apollo Cache</span>
                </a>
              </li>
            
          </ul>
        </li>
      
        <li>
          
            <div class="heading-toc">Features</div>
          
          <ul class="list-toc">
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/features/error-handling.html" class="sidebar-link ">
                  <span>Error Handling</span>
                </a>
              </li>
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/features/caching.html" class="sidebar-link ">
                  <span>Direct Cache Access</span>
                </a>
              </li>
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/features/optimistic-ui.html" class="sidebar-link ">
                  <span>Optimistic UI</span>
                </a>
              </li>
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/features/cache-updates.html" class="sidebar-link ">
                  <span>Updating the Store</span>
                </a>
              </li>
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/features/fragments.html" class="sidebar-link ">
                  <span>Using Fragments</span>
                </a>
              </li>
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/features/developer-tooling.html" class="sidebar-link ">
                  <span>Developer tools</span>
                </a>
              </li>
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/features/subscriptions.html" class="sidebar-link ">
                  <span>Subscriptions</span>
                </a>
              </li>
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/features/react-native.html" class="sidebar-link ">
                  <span>Integrating with React Native</span>
                </a>
              </li>
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/features/static-typing.html" class="sidebar-link ">
                  <span>Using TypeScript and Flow</span>
                </a>
              </li>
            
          </ul>
        </li>
      
        <li>
          
            <div class="heading-toc">Recipes</div>
          
          <ul class="list-toc">
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/recipes/simple-example.html" class="sidebar-link ">
                  <span>Small Example: Snack</span>
                </a>
              </li>
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/recipes/query-splitting.html" class="sidebar-link ">
                  <span>Query Splitting</span>
                </a>
              </li>
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/recipes/pagination.html" class="sidebar-link ">
                  <span>Pagination</span>
                </a>
              </li>
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/recipes/authentication.html" class="sidebar-link ">
                  <span>Authentication</span>
                </a>
              </li>
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/recipes/prefetching.html" class="sidebar-link ">
                  <span>Prefetching data</span>
                </a>
              </li>
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/recipes/server-side-rendering.html" class="sidebar-link ">
                  <span>Server Side Rendering</span>
                </a>
              </li>
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/recipes/fragment-matching.html" class="sidebar-link ">
                  <span>Fragment matcher</span>
                </a>
              </li>
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/recipes/babel.html" class="sidebar-link ">
                  <span>Precompilation with babel</span>
                </a>
              </li>
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/recipes/webpack.html" class="sidebar-link ">
                  <span>Webpack loader</span>
                </a>
              </li>
            
              
              <li class="item-toc  current">
                <a href="" class="sidebar-link  current">
                  <span>Meteor</span>
                </a>
              <ul class="sub-menu"><li><a href="#Usage" data-scroll="" class="H2"><span>Usage</span></a><ul class="sub-menu"><li><a href="#Examples" data-scroll="" class="H3"><span>Examples</span></a></li><li><a href="#Client" data-scroll="" class="H3"><span>Client</span></a></li><li><a href="#Server" data-scroll="" class="H3"><span>Server</span></a></li><li><a href="#Query-batching" data-scroll="" class="H3"><span>Query batching</span></a></li><li><a href="#Deployment" data-scroll="" class="H3"><span>Deployment</span></a></li><li><a href="#Typings" data-scroll="" class="H3"><span>Typings</span></a></li></ul></li><li><a href="#API" data-scroll="" class="H2"><span>API</span></a><ul class="sub-menu"><li><a href="#meteorClientConfig" data-scroll="" class="H3"><span>meteorClientConfig</span></a></li><li><a href="#createMeteorNetworkInterface" data-scroll="" class="H3"><span>createMeteorNetworkInterface</span></a></li><li><a href="#createApolloServer" data-scroll="" class="H3"><span>createApolloServer</span></a></li></ul></li><li><a href="#Accounts" data-scroll="" class="H2"><span>Accounts</span></a><ul class="sub-menu"></ul></li><li><a href="#SSR" data-scroll="" class="H2 active"><span>SSR</span></a><ul class="sub-menu"></ul></li><li><a href="#Apollo-Engine" data-scroll="" class="H2"><span>Apollo Engine</span></a><ul class="sub-menu"></ul></li><li><a href="#Importing-graphql-files" data-scroll="" class="H2"><span>Importing .graphql files</span></a><ul class="sub-menu"></ul></li><li><a href="#Blaze" data-scroll="" class="H2"><span>Blaze</span></a><ul class="sub-menu"></ul></li><li><a href="#Subscriptions" data-scroll="" class="H2"><span>Subscriptions</span></a><ul class="sub-menu"><li><a href="#Client-1" data-scroll="" class="H3"><span>Client</span></a></li><li><a href="#Server-1" data-scroll="" class="H3"><span>Server</span></a></li></ul></li></ul></li>
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/recipes/recompose.html" class="sidebar-link ">
                  <span>Recompose patterns</span>
                </a>
              </li>
            
          </ul>
        </li>
      
        <li>
          
            <div class="heading-toc">Reference</div>
          
          <ul class="list-toc">
            
              
              <li class="item-toc ">
                <a href="https://www.apollographql.com/docs/react/reference/index.html" class="sidebar-link ">
                  <span>API Reference (apollo-client)</span>
                </a>
              </li>
            
          </ul>
        </li>
      
    </ul>
  </div>
</div>

    <div class="content">

      <div class="header-content">
        <div class="header-wrapper">
          <div class="title-wrapper">
            <h1 class="title-page">
              Meteor
            </h1>
            
              <div class="subtitle-page">
                Specifics about using Apollo in your Meteor application.
              </div>
              
          </div>

          <div class="page-actions">
            <div class="actions-group">
              <a class="btn tertiary small round lowercase" href="https://github.com/apollographql/apollo-client/tree/master/docs/source/recipes/meteor.md" target="_blank">
                <span class="icon-github"></span>
                <span>Edit on GitHub</span>
              </a>
              
                  
                    <a class="btn tertiary small round lowercase" href="https://www.apollodata.com/#slack">
                      <img src="Meteor%20%20%20Apollo%20Client_files/slack.png" style="width: 12px; margin: 0 3px -2px -3px;">
                      <span>Discuss on Slack</span>
                    </a>
                    
            </div>
          </div>
        </div>
      </div>

      <div class="content-wrapper">
        <div class="document-formatting">
          <p><strong>Note: These docs are for using Meteor with the 1.0 
version of Apollo Client. The 2.0 upgrade is still in progress and these
 docs will be updated when it is ready</strong></p>
<p>The Apollo client and server tools are published on npm, which makes 
them available to all JavaScript applications, including those written 
with <a href="https://www.meteor.com/" target="_blank" rel="noopener">Meteor</a> 1.3 and above. When using Meteor with Apollo, you can use those npm packages directly, or you can use the <a href="https://github.com/apollostack/meteor-integration/" target="_blank" rel="noopener"><code>apollo</code> Atmosphere package</a>, which simplifies things for you.</p>
<p>To install <code>apollo</code>, run these commands:</p>
<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">meteor add apollo</span><br><span class="line">meteor npm install --save apollo-client graphql-server-express express graphql graphql-tools body-parser</span><br></pre></td></tr></tbody></table></figure>
<h2><div id="Usage" class="anchor-offset"></div><a class="anchor" href="#Usage" aria-hidden="true" data-scroll=""><span class="icon-link"></span></a><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><h3><div id="Examples" class="anchor-offset"></div><a class="anchor" href="#Examples" aria-hidden="true" data-scroll=""><span class="icon-link"></span></a><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p>You can see this package in action in the <a href="https://github.com/apollostack/meteor-starter-kit" target="_blank" rel="noopener">Apollo Meteor starter kit</a>. </p>
<h3><div id="Client" class="anchor-offset"></div><a class="anchor" href="#Client" aria-hidden="true" data-scroll=""><span class="icon-link"></span></a><a href="#Client" class="headerlink" title="Client"></a>Client</h3><p>Connect to the Apollo server with <a href="#meteorClientConfig"><code>meteorClientConfig</code></a>:</p>
<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ApolloClient <span class="keyword">from</span> <span class="string">'apollo-client'</span>;</span><br><span class="line"><span class="keyword">import</span> { meteorClientConfig } <span class="keyword">from</span> <span class="string">'meteor/apollo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> ApolloClient(meteorClientConfig());</span><br></pre></td></tr></tbody></table></figure>
<h3><div id="Server" class="anchor-offset"></div><a class="anchor" href="#Server" aria-hidden="true" data-scroll=""><span class="icon-link"></span></a><a href="#Server" class="headerlink" title="Server"></a>Server</h3><p>Create the following files:</p>
<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/imports/api/schema.js         <span class="comment"># a JavaScript file with the schema</span></span><br><span class="line">/imports/api/resolvers.js      <span class="comment"># a JavaScript file with the Apollo resolvers</span></span><br></pre></td></tr></tbody></table></figure>
<p>Define a simple <a href="http://dev.apollodata.com/tools/graphql-tools/generate-schema.html" target="_blank" rel="noopener">schema</a> under <code>schema.js</code>.</p>
<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> typeDefs = <span class="string">`</span></span><br><span class="line"><span class="string">type Query {</span></span><br><span class="line"><span class="string">  say: String</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>Define your first <a href="http://dev.apollodata.com/tools/graphql-tools/resolvers.html" target="_blank" rel="noopener">resolver</a> under <code>resolvers.js</code>.</p>
<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> resolvers = {</span><br><span class="line">  Query: {</span><br><span class="line">    say(root, args, context) {</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'hello world'</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Set up the Apollo server with <a href="#createApolloServer"><code>createApolloServer</code></a>:</p>
<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { createApolloServer } <span class="keyword">from</span> <span class="string">'meteor/apollo'</span>;</span><br><span class="line"><span class="keyword">import</span> { makeExecutableSchema, addMockFunctionsToSchema } <span class="keyword">from</span> <span class="string">'graphql-tools'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> { typeDefs } <span class="keyword">from</span> <span class="string">'/imports/api/schema'</span>;</span><br><span class="line"><span class="keyword">import</span> { resolvers } <span class="keyword">from</span> <span class="string">'/imports/api/resolvers'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> schema = makeExecutableSchema({</span><br><span class="line">  typeDefs,</span><br><span class="line">  resolvers,</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">createApolloServer({</span><br><span class="line">  schema,</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>
<p>The <a href="https://github.com/graphql/graphiql" target="_blank" rel="noopener">GraphiQL</a> url by default is <a href="http://localhost:3000/graphiql" target="_blank" rel="noopener">http://localhost:3000/graphiql</a>. You can now test your first query:</p>
<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  say</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Inside your resolvers, if the user is logged in, their id will be <code>context.userId</code> and their user doc will be <code>context.user</code>:</p>
<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> resolvers = {</span><br><span class="line">  Query: {</span><br><span class="line">    user(root, args, context) {</span><br><span class="line">      <span class="comment">// Only return the current user, for security</span></span><br><span class="line">      <span class="keyword">if</span> (context.userId === args.id) {</span><br><span class="line">        <span class="keyword">return</span> context.user;</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">  User: ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3><div id="Query-batching" class="anchor-offset"></div><a class="anchor" href="#Query-batching" aria-hidden="true" data-scroll=""><span class="icon-link"></span></a><a href="#Query-batching" class="headerlink" title="Query batching"></a>Query batching</h3><p><code>meteor/apollo</code> gives you a <code>BatchedNetworkInterface</code> by default thanks to <code>createMeteorNetworkInterface</code>. This interface is meant to reduce significantly the number of requests sent to the server.</p>
<p>In order to get the most out of it, you can attach a <code>dataloader</code> to every request to batch loading your queries (and cache them!).</p>
<p>Here are some great resources to help you integrating query batching in your Meteor application:</p>
<ul>
<li>About batched network interface:<ul>
<li><a href="http://dev.apollodata.com/tools/graphql-tools/connectors.html#DataLoader-and-caching" target="_blank" rel="noopener">Apollo Client documentation</a>, the official documentation explaining how it works and how to set it up.</li>
<li><a href="https://dev-blog.apollodata.com/query-batching-in-apollo-63acfd859862" target="_blank" rel="noopener">Query batching in Apollo</a>, an article from the Apollo blog with more in depth explanation.</li>
</ul>
</li>
<li>About Dataloader:<ul>
<li>Apollo’s <a href="http://dev.apollodata.com/tools/graphql-tools/connectors.html#DataLoader-and-caching" target="_blank" rel="noopener">Graphql server documentation</a>, get to know how to setup <code>dataloader</code> in your server-side implementation.</li>
<li><a href="https://github.com/facebook/dataloader" target="_blank" rel="noopener">Dataloader repository</a>, a detailed explanation of batching &amp; caching processes, plus a bonus of a 30-minute source code walkthrough video.</li>
</ul>
</li>
</ul>
<h3><div id="Deployment" class="anchor-offset"></div><a class="anchor" href="#Deployment" aria-hidden="true" data-scroll=""><span class="icon-link"></span></a><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><p>It is <em>strongly</em> recommended to explictly specify the <code>ROOT_URL</code>
 environment variable of your deployment. The configuration of the 
Apollo client and GraphQL server provided by this package depends on a 
configured <code>ROOT_URL</code>. Read more about that in the <a href="https://guide.meteor.com/deployment.html#custom-deployment" target="_blank" rel="noopener">Meteor Guide</a>.</p>
<h3><div id="Typings" class="anchor-offset"></div><a class="anchor" href="#Typings" aria-hidden="true" data-scroll=""><span class="icon-link"></span></a><a href="#Typings" class="headerlink" title="Typings"></a>Typings</h3><p>Your Meteor apps may rely on static typings with TypeScript. If so, it is recommended to use the <a href="https://github.com/KeithGillette/Apollo-GraphQL-Meteor-Integration-Typings" target="_blank" rel="noopener">ambient TypeScript definition for this Atmosphere package</a>.</p>
<h2><div id="API" class="anchor-offset"></div><a class="anchor" href="#API" aria-hidden="true" data-scroll=""><span class="icon-link"></span></a><a href="#API" class="headerlink" title="API"></a>API</h2><h3><div id="meteorClientConfig" class="anchor-offset"></div><a class="anchor" href="#meteorClientConfig" aria-hidden="true" data-scroll=""><span class="icon-link"></span></a><a href="#meteorClientConfig" class="headerlink" title="meteorClientConfig"></a>meteorClientConfig</h3><p><code>meteorClientConfig(customClientConfig = {})</code></p>
<p>The <code>customClientConfig</code> is an optional object that can have any <a href="http://dev.apollodata.com/core/apollo-client-api.html#ApolloClient.constructor" target="_blank" rel="noopener">Apollo Client options</a>.</p>
<p>Defining a <code>customClientConfig</code> object extends or replaces fields of the default configuration provided by the package. </p>
<p>The default configuration of the client is:</p>
<ul>
<li><code>networkInterface</code>: <code>createMeteorNetworkInterface()</code>, a pre-configured network interface. See below for more information.</li>
<li><code>ssrMode</code>: <code>Meteor.isServer</code>, enable server-side rendering mode by default if used server-side.</li>
</ul>
<p>The store is normalized by default with <code>__typename</code> + <code>_id</code> identifiers. See <a href="http://dev.apollodata.com/core/how-it-works.html#normalize" target="_blank" rel="noopener">store normalization</a> section for more information.</p>
<h3><div id="createMeteorNetworkInterface" class="anchor-offset"></div><a class="anchor" href="#createMeteorNetworkInterface" aria-hidden="true" data-scroll=""><span class="icon-link"></span></a><a href="#createMeteorNetworkInterface" class="headerlink" title="createMeteorNetworkInterface"></a>createMeteorNetworkInterface</h3><p><code>createMeteorNetworkInterface(customNetworkInterface = {})</code></p>
<p><code>customNetworkInterface</code> is an optional object that replaces fields of the default configuration:</p>
<ul>
<li><code>uri</code>: <code>Meteor.absoluteUrl('graphql')</code>, points to the default GraphQL server endpoint, such as <a href="http://locahost:3000/graphql" target="_blank" rel="noopener">http://locahost:3000/graphql</a> or <a href="https://www.my-app.com/graphql" target="_blank" rel="noopener">https://www.my-app.com/graphql</a>.</li>
<li><code>opts</code>: <code>{}</code>, additional <a href="https://github.github.io/fetch#options" target="_blank" rel="noopener"><code>FetchOptions</code></a> passed to the <a href="http://dev.apollodata.com/core/network.html#createNetworkInterface" target="_blank" rel="noopener"><code>NetworkInterface</code></a>.</li>
<li><code>useMeteorAccounts</code>: <code>true</code>, enable the Meteor User Accounts middleware to identify the user with every request thanks to her login token.</li>
<li><code>batchingInterface</code>: <code>true</code>, use a <a href="http://dev.apollodata.com/core/network.html#query-batching" target="_blank" rel="noopener"><code>BatchedNetworkInterface</code></a> by default instead of <a href="http://dev.apollodata.com/core/network.html#network-interfaces" target="_blank" rel="noopener"><code>NetworkInterface</code></a>.</li>
<li><code>batchInterval</code>: <code>10</code>, if the <code>batchingInterface</code> field is <code>true</code>,
 this field defines the batch interval to determine how long the network
 interface batches up queries before sending them to the server.</li>
</ul>
<p>Additionally, if the <code>useMeteorAccounts</code> is set to <code>true</code>, you can add to your <code>customNetworkInterface</code> a <code>loginToken</code> field while doing <a href="http://dev.apollodata.com/core/meteor.html#SSR" target="_blank" rel="noopener">server-side rendering</a> to handle the current user.</p>
<p><code>createMeteorNetworkInterface</code> example:</p>
<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ApolloClient <span class="keyword">from</span> <span class="string">'apollo-client'</span></span><br><span class="line"><span class="keyword">import</span> { createMeteorNetworkInterface, meteorClientConfig } <span class="keyword">from</span> <span class="string">'meteor/apollo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> networkInterface = createMeteorNetworkInterface({</span><br><span class="line">  <span class="comment">// use a batched network interface instead of a classic network interface</span></span><br><span class="line">  batchingInterface: <span class="literal">true</span>, </span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> ApolloClient(meteorClientConfig({ networkInterface }));</span><br></pre></td></tr></tbody></table></figure>
<h3><div id="createApolloServer" class="anchor-offset"></div><a class="anchor" href="#createApolloServer" aria-hidden="true" data-scroll=""><span class="icon-link"></span></a><a href="#createApolloServer" class="headerlink" title="createApolloServer"></a>createApolloServer</h3><p><code>createApolloServer(customOptions = {}, customConfig = {})</code></p>
<p><code>createApolloServer</code> is used to create and configure an Express GraphQL server.</p>
<p><code>customOptions</code> is an object that can have any <a href="http://dev.apollodata.com/tools/graphql-server/setup.html#graphqlOptions" target="_blank" rel="noopener">GraphQL Server <code>options</code></a>, used to enhance the GraphQL server run thanks to <a href="http://dev.apollodata.com/tools/graphql-server/setup.html#graphqlExpress" target="_blank" rel="noopener"><code>graphqlExpress</code></a>. Defining a <code>customOptions</code> object extends or replaces fields of the default configuration provided by the package:</p>
<ul>
<li><code>context</code>: <code>{}</code> is an object or a function returning an object that extends the context object being passed down to the resolvers.</li>
<li><code>formatError</code>: a function used to format errors before returning them to clients.</li>
<li><code>debug</code>: <code>Meteor.isDevelopment</code>, additional debug logging if execution errors occur in dev mode.</li>
</ul>
<p><em>This is the object that should have a <code>schema</code> entry created by <a href="http://dev.apollodata.com/core/meteor.html#Server" target="_blank" rel="noopener"><code>makeExecutableSchema</code></a>.</em></p>
<p><code>customConfig</code> is an optional object that can be used to replace the configuration of how the Express server itself runs: </p>
<ul>
<li><code>path</code>: <a href="http://expressjs.com/en/api.html#app.use" target="_blank" rel="noopener">path</a> of the GraphQL server. This is the endpoint where the queries &amp; mutations are sent. Default: <code>/graphql</code>.</li>
<li><code>configServer</code>: a function that is given to the express server for further configuration. You can for instance enable CORS with <code>createApolloServer({}, {configServer: expressServer =&gt; expressServer.use(cors())})</code></li>
<li><code>graphiql</code>: whether to enable <a href="https://github.com/graphql/graphiql" target="_blank" rel="noopener">GraphiQL</a>. Default: <code>true</code> in development and <code>false</code> in production.</li>
<li><code>graphiqlPath</code>: path for GraphiQL. Default: <code>/graphiql</code> (note the <em>i</em>).</li>
<li><code>graphiqlOptions</code>: <a href="http://dev.apollodata.com/tools/apollo-server/graphiql.html#graphiqlOptions" target="_blank" rel="noopener">GraphiQL options</a> Default: attempts to use <code>Meteor.loginToken</code> from localStorage to log you in.</li>
</ul>
<p>It will use the same port as your Meteor server. Don’t put a route or
 static asset at the same path as the GraphQL route or the GraphiQL 
route if in use (again, defaults are <code>/graphql</code> and <code>/graphiql</code> respectively).</p>
<h2><div id="Accounts" class="anchor-offset"></div><a class="anchor" href="#Accounts" aria-hidden="true" data-scroll=""><span class="icon-link"></span></a><a href="#Accounts" class="headerlink" title="Accounts"></a>Accounts</h2><p>You may still use the authentication based on DDP (Meteor’s default data layer) and <code>apollo</code> will send the current user’s login token to the GraphQL server with each request. </p>
<p>If you want to use only GraphQL in your app you can use <a href="https://github.com/nicolaslopezj/meteor-apollo-accounts" target="_blank" rel="noopener">nicolaslopezj:apollo-accounts</a>.
 This package uses the Meteor Accounts methods in GraphQL, it’s 
compatible with the accounts you have saved in your database and you may
 use <code>nicolaslopezj:apollo-accounts</code> and Meteor’s DDP accounts at the same time.</p>
<p>If you are relying on the current user in your queries, you’ll want to <a href="http://dev.apollodata.com/react/auth.html#login-logout" target="_blank" rel="noopener">clear the store when the current user state changes</a>. To do so, use <code>client.resetStore()</code> in the <code>Meteor.logout</code> callback:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The `client` variable refers to your `ApolloClient` instance.</span></span><br><span class="line"><span class="comment">// It would be imported in your template,</span></span><br><span class="line"><span class="comment">// or passed via props thanks to `withApollo` in React for example.</span></span><br><span class="line"></span><br><span class="line">Meteor.logout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> client.resetStore(); <span class="comment">// make all active queries re-run when the log-out process completed</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>
<h2><div id="SSR" class="anchor-offset"></div><a class="anchor" href="#SSR" aria-hidden="true" data-scroll=""><span class="icon-link"></span></a><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h2><p>There are two additional configurations that you need to keep in mind when using <a href="http://dev.apollodata.com/react/server-side-rendering.html" target="_blank" rel="noopener">React Server Side Rendering</a> with Meteor.</p>
<ol>
<li>Use <code>isomorphic-fetch</code> to polyfill <code>fetch</code> server-side (used by Apollo Client’s network interface).</li>
<li>Connect your express server to Meteor’s existing server with <a href="https://docs.meteor.com/packages/webapp.html" target="_blank" rel="noopener">WebApp.connectHandlers.use</a></li>
<li>Do not end the connection with <code>res.send()</code> and <code>res.end()</code> use <code>req.dynamicBody</code> and <code>req.dynamicHead</code> instead and call <code>next()</code>. <a href="https://github.com/meteor/meteor/pull/3860" target="_blank" rel="noopener">more info</a></li>
</ol>
<p>The idea is that you need to let Meteor to finally render the html you can just provide it extra <code>body</code> and or <code>head</code>
 for the html and Meteor will append it, otherwise CSS/JS and or other 
merged html content that Meteor serve by default (including your 
application main .js file) will be missing.</p>
<p>Here is a full working example:<br></p><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">meteor <span class="keyword">add</span><span class="bash"> apollo webapp</span></span><br><span class="line"><span class="bash">meteor npm install --save react react-dom apollo-client redux react-apollo react-router react-helmet express isomorphic-fetch</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { Meteor } <span class="keyword">from</span> <span class="string">'meteor/meteor'</span>;</span><br><span class="line"><span class="keyword">import</span> { WebApp } <span class="keyword">from</span> <span class="string">'meteor/webapp'</span>;</span><br><span class="line"><span class="keyword">import</span> { meteorClientConfig, createMeteorNetworkInterface } <span class="keyword">from</span> <span class="string">'meteor/apollo'</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom/server'</span>;</span><br><span class="line"><span class="keyword">import</span> ApolloClient <span class="keyword">from</span> <span class="string">'apollo-client'</span>;</span><br><span class="line"><span class="keyword">import</span> { createStore, combineReducers, applyMiddleware, compose } <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> { ApolloProvider, renderToStringWithData } <span class="keyword">from</span> <span class="string">'react-apollo'</span>;</span><br><span class="line"><span class="keyword">import</span> { match, RouterContext } <span class="keyword">from</span> <span class="string">'react-router'</span>;</span><br><span class="line"><span class="keyword">import</span> Express <span class="keyword">from</span> <span class="string">'express'</span>;</span><br><span class="line"><span class="comment">// #1 import isomorphic-fetch so the network interface can be created</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'isomorphic-fetch'</span>;</span><br><span class="line"><span class="keyword">import</span> Helmet <span class="keyword">from</span> <span class="string">'react-helmet'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">'../both/routes'</span>;</span><br><span class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">'../../ui/reducers'</span>;</span><br><span class="line"><span class="keyword">import</span> Body <span class="keyword">from</span> <span class="string">'../both/routes/body'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1# do not use new</span></span><br><span class="line"><span class="keyword">const</span> app = Express(); <span class="comment">// eslint-disable-line new-cap</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> {</span><br><span class="line">  match({ routes, <span class="attr">location</span>: req.originalUrl }, (error, redirectLocation, renderProps) =&gt; {</span><br><span class="line">    <span class="keyword">if</span> (redirectLocation) {</span><br><span class="line">      res.redirect(redirectLocation.pathname + redirectLocation.search);</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (error) {</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">'ROUTER ERROR:'</span>, error); <span class="comment">// eslint-disable-line no-console</span></span><br><span class="line">      res.status(<span class="number">500</span>);</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (renderProps) {</span><br><span class="line">      <span class="comment">// use createMeteorNetworkInterface to get a preconfigured network interface</span></span><br><span class="line">      <span class="comment">// #1 network interface can be used server-side thanks to polyfilled `fetch`</span></span><br><span class="line">      <span class="keyword">const</span> networkInterface = createMeteorNetworkInterface({</span><br><span class="line">        opts: {</span><br><span class="line">          credentials: <span class="string">'same-origin'</span>,</span><br><span class="line">          headers: req.headers,</span><br><span class="line">        },</span><br><span class="line">        <span class="comment">// possible current user login token stored in the cookies thanks to </span></span><br><span class="line">        <span class="comment">// a third-party package like meteorhacks:fast-render</span></span><br><span class="line">        loginToken: req.cookies[<span class="string">'meteor-login-token'</span>],</span><br><span class="line">      });</span><br><span class="line"></span><br><span class="line">      <span class="comment">// use meteorClientConfig to get a preconfigured Apollo Client options object</span></span><br><span class="line">      <span class="keyword">const</span> client = <span class="keyword">new</span> ApolloClient(meteorClientConfig({ networkInterface }));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> store = createStore(</span><br><span class="line">        combineReducers({</span><br><span class="line">          ...rootReducer,</span><br><span class="line">          apollo: client.reducer(),</span><br><span class="line">        }),</span><br><span class="line">        {}, <span class="comment">// initial state</span></span><br><span class="line">        compose(</span><br><span class="line">          applyMiddleware(client.middleware()),</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> component = (</span><br><span class="line">        &lt;ApolloProvider store={store} client={client}&gt;</span><br><span class="line">          &lt;RouterContext {...renderProps} /&gt;</span><br><span class="line">        &lt;<span class="regexp">/ApolloProvider&gt;</span></span><br><span class="line"><span class="regexp">      );</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      renderToStringWithData(component).then((content) =&gt; {</span></span><br><span class="line"><span class="regexp">        const initialState = client.store.getState()[client.reduxRootKey].data;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ the body content we want to append</span></span><br><span class="line"><span class="regexp">        const body = &lt;Body content={content} state={initialState} /</span>&gt;;</span><br><span class="line">        <span class="comment">// #3 `req.dynamicBody` will hold that body and meteor will take care of</span></span><br><span class="line">        <span class="comment">// actually appending it to the end result</span></span><br><span class="line">        req.dynamicBody = ReactDOM.renderToStaticMarkup(body);</span><br><span class="line">        <span class="keyword">const</span> head = Helmet.rewind();</span><br><span class="line">        <span class="comment">// #3 `req.dynamicHead` in this case we use `react-helmet` to add seo tags</span></span><br><span class="line">        req.dynamicHead = <span class="string">`  <span class="subst">${head.title.toString()}</span></span></span><br><span class="line"><span class="string">  <span class="subst">${head.meta.toString()}</span></span></span><br><span class="line"><span class="string">  <span class="subst">${head.link.toString()}</span></span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line">        <span class="comment">// #3 Important we do not want to return this, we just let meteor handle it</span></span><br><span class="line">        next();</span><br><span class="line">      });</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'not found'</span>); <span class="comment">// eslint-disable-line no-console</span></span><br><span class="line">    }</span><br><span class="line">  });</span><br><span class="line">});</span><br><span class="line"><span class="comment">// #2 connect your express server with meteor's</span></span><br><span class="line">WebApp.connectHandlers.use(Meteor.bindEnvironment(app));</span><br></pre></td></tr></tbody></table></figure>
<h2><div id="Apollo-Engine" class="anchor-offset"></div><a class="anchor" href="#Apollo-Engine" aria-hidden="true" data-scroll=""><span class="icon-link"></span></a><a href="#Apollo-Engine" class="headerlink" title="Apollo Engine"></a>Apollo Engine</h2><p>Here’s a minimal example of <a href="https://www.apollographql.com/engine/">Apollo Engine</a> integration:</p>
<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { createApolloServer } <span class="keyword">from</span> <span class="string">'meteor/apollo'</span>;</span><br><span class="line"><span class="keyword">import</span> { Engine } <span class="keyword">from</span> <span class="string">'apollo-engine'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> executableSchema <span class="keyword">from</span> <span class="string">'schema.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize Apollo Engine</span></span><br><span class="line"><span class="keyword">const</span> engine = <span class="keyword">new</span> Engine({</span><br><span class="line">  engineConfig: {</span><br><span class="line">    apiKey: <span class="string">'your_apollo_engine_api_key'</span>,</span><br><span class="line">    logging: {</span><br><span class="line">      level: <span class="string">'DEBUG'</span>, <span class="comment">// DEBUG, INFO, WARN or ERROR</span></span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">  graphqlPort: PORT,</span><br><span class="line">  endpoint: <span class="string">'/graphql'</span>,</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">createApolloServer(<span class="function"><span class="params">req</span> =&gt;</span> ({</span><br><span class="line">  schema: executableSchema,</span><br><span class="line">  context: {},</span><br><span class="line">  tracing: <span class="literal">true</span>,</span><br><span class="line">  cacheControl: <span class="literal">true</span>,</span><br><span class="line">}), {</span><br><span class="line">  configServer: <span class="function">(<span class="params">graphQLServer</span>) =&gt;</span> {</span><br><span class="line">    app.use(engine.expressMiddleware());</span><br><span class="line">    <span class="comment">// Any other config server stuff</span></span><br><span class="line">  },</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>
<h2><div id="Importing-graphql-files" class="anchor-offset"></div><a class="anchor" href="#Importing-graphql-files" aria-hidden="true" data-scroll=""><span class="icon-link"></span></a><a href="#Importing-graphql-files" class="headerlink" title="Importing .graphql files"></a>Importing <code>.graphql</code> files</h2><p>An easy way to work with GraphQL is by importing <code>.graphql</code> files directly using the <code>import</code> syntax.</p>
<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meteor add swydo:graphql</span><br></pre></td></tr></tbody></table></figure>
<p>Instead of the <code>/imports/api/schema.js</code> file, create a <code>/imports/api/schema.graphql</code> file with the same content as before:</p>
<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type Query {</span><br><span class="line">  say: String</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>One of the benefits you’ll get right away is good highlighting by GitHub and your IDE!</p>
<p>Now we can import the schema:</p>
<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> typeDefs <span class="keyword">from</span> <span class="string">'/imports/api/schema.graphql'</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>Use <code>typeDefs</code> as before in the above examples. You can <a href="https://github.com/apollographql/graphql-tools/pull/300" target="_blank" rel="noopener">pass it directly to <code>makeExecutableSchema</code></a> like before.</p>
<p>The import syntax will also work for any other <code>.graphql</code> 
file besides your main schema. So you’ll be able to import query, 
mutation and subscription files without needing to manually parse them 
with the <a href="https://github.com/apollographql/graphql-tag" target="_blank" rel="noopener">graphql-tag</a>.</p>
<p>For more benefits, see the <a href="https://github.com/Swydo/meteor-graphql/blob/master/README.md#benefits" target="_blank" rel="noopener">GrahpQL build plugin README</a>.</p>
<h2><div id="Blaze" class="anchor-offset"></div><a class="anchor" href="#Blaze" aria-hidden="true" data-scroll=""><span class="icon-link"></span></a><a href="#Blaze" class="headerlink" title="Blaze"></a>Blaze</h2><p>If you are looking to integrate Apollo with <a href="http://blazejs.org/" target="_blank" rel="noopener">Blaze</a>, you can use the <a href="https://github.com/Swydo/blaze-apollo" target="_blank" rel="noopener">swydo:blaze-apollo</a> package:</p>
<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { setup } <span class="keyword">from</span> <span class="string">'meteor/swydo:blaze-apollo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> ApolloClient(meteorClientConfig());</span><br><span class="line"></span><br><span class="line">setup({ client });</span><br></pre></td></tr></tbody></table></figure>
<p>This gives you reactive GraphQL queries in your templates!</p>
<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Template.hello.helpers({</span><br><span class="line">  hello() {</span><br><span class="line">    <span class="keyword">return</span> Template.instance().gqlQuery({</span><br><span class="line">      query: HELLO_QUERY</span><br><span class="line">    }).get();</span><br><span class="line">  }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>
<h2><div id="Subscriptions" class="anchor-offset"></div><a class="anchor" href="#Subscriptions" aria-hidden="true" data-scroll=""><span class="icon-link"></span></a><a href="#Subscriptions" class="headerlink" title="Subscriptions"></a>Subscriptions</h2><p>You
 can also use GraphQL subscriptions with your Meteor app if you need to.
 The following code gives an example of a complete configuration that 
enables all the features of subscriptions in addition to base GraphQL.</p>
<h3><div id="Client-1" class="anchor-offset"></div><a class="anchor" href="#Client-1" aria-hidden="true" data-scroll=""><span class="icon-link"></span></a><a href="#Client-1" class="headerlink" title="Client"></a>Client</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { ApolloClient } <span class="keyword">from</span> <span class="string">'apollo-client'</span>;</span><br><span class="line"><span class="keyword">import</span> { SubscriptionClient, addGraphQLSubscriptions } <span class="keyword">from</span> <span class="string">'subscriptions-transport-ws'</span>;</span><br><span class="line"><span class="keyword">import</span> { getMeteorLoginToken, createMeteorNetworkInterface } <span class="keyword">from</span> <span class="string">'meteor/apollo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// "basic" Meteor network interface</span></span><br><span class="line"><span class="keyword">const</span> networkInterface = createMeteorNetworkInterface();</span><br><span class="line"></span><br><span class="line"><span class="comment">// create a websocket uri based on your app absolute url (ROOT_URL), ex: ws://localhost:3000</span></span><br><span class="line"><span class="keyword">const</span> websocketUri = Meteor.absoluteUrl(<span class="string">'subscriptions'</span>).replace(<span class="regexp">/^http/</span>, <span class="string">'ws'</span>);</span><br><span class="line">   </span><br><span class="line"><span class="comment">// create a websocket client</span></span><br><span class="line"><span class="keyword">const</span> wsClient = <span class="keyword">new</span> SubscriptionClient(websocketUri, {</span><br><span class="line">  reconnect: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// pass some extra information to the subscription, like the current user:</span></span><br><span class="line">  connectionParams: {</span><br><span class="line">    <span class="comment">// getMeteorLoginToken = get the Meteor current user login token from local storage</span></span><br><span class="line">    meteorLoginToken: getMeteorLoginToken(),</span><br><span class="line">  },</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// enhance the interface with graphql subscriptions</span></span><br><span class="line"><span class="keyword">const</span> networkInterfaceWithSubscriptions = addGraphQLSubscriptions(networkInterface, wsClient);</span><br><span class="line"></span><br><span class="line"><span class="comment">// enjoy graphql subscriptions with Apollo Client</span></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> ApolloClient({ <span class="attr">networkInterface</span>: networkInterfaceWithSubscriptions });</span><br></pre></td></tr></tbody></table></figure>
<h3><div id="Server-1" class="anchor-offset"></div><a class="anchor" href="#Server-1" aria-hidden="true" data-scroll=""><span class="icon-link"></span></a><a href="#Server-1" class="headerlink" title="Server"></a>Server</h3><p>The same <code>context</code> is used for both the resolvers and the GraphQL subscriptions. This also means that <a href="http://dev.apollodata.com/tools/graphql-subscriptions/authentication.html" target="_blank" rel="noopener">authentication in the websocket transport</a> is configured out-of-the-box.</p>
<p>Note that <code>PubSub</code> from <code>graphql-subscriptions</code> is not suitable for production. You should wire your <code>SubscriptionManager</code> with <a href="https://github.com/davidyaha/graphql-redis-subscriptions" target="_blank" rel="noopener">Redis subscriptions</a> or <a href="https://github.com/davidyaha/graphql-mqtt-subscriptions" target="_blank" rel="noopener">MQTT subscriptions</a> in case you want to use them in production apps.</p>
<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { SubscriptionManager } <span class="keyword">from</span> <span class="string">'graphql-subscriptions'</span>;</span><br><span class="line"><span class="keyword">import</span> { SubscriptionServer } <span class="keyword">from</span> <span class="string">'subscriptions-transport-ws'</span>;</span><br><span class="line"><span class="keyword">import</span> { createApolloServer, addCurrentUserToContext } <span class="keyword">from</span> <span class="string">'meteor/apollo'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// your executable schema</span></span><br><span class="line"><span class="keyword">const</span> schema = ...</span><br><span class="line"></span><br><span class="line"><span class="comment">// any additional context you use for your resolvers, if any</span></span><br><span class="line"><span class="keyword">const</span> context = {};</span><br><span class="line"> </span><br><span class="line"><span class="comment">// the pubsub mechanism of your choice, for instance:</span></span><br><span class="line"><span class="comment">// - PubSub from graphql-subscriptions (not recommended for production)</span></span><br><span class="line"><span class="comment">// - RedisPubSub from graphql-redis-subscriptions</span></span><br><span class="line"><span class="comment">// - MQTTPubSub from graphql-mqtt-subscriptions</span></span><br><span class="line"><span class="keyword">const</span> pubsub = <span class="keyword">new</span> PubSub();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// subscriptions path which fits witht the one you connect to on the client</span></span><br><span class="line"><span class="keyword">const</span> subscriptionsPath = <span class="string">'/subscriptions'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// start a graphql server with Express handling a possible Meteor current user</span></span><br><span class="line">createApolloServer({ </span><br><span class="line">  schema,</span><br><span class="line">  context </span><br><span class="line">});</span><br><span class="line"> </span><br><span class="line"><span class="comment">// create the subscription manager thanks to the schema &amp; the pubsub mechanism</span></span><br><span class="line"><span class="keyword">const</span> subscriptionManager = <span class="keyword">new</span> SubscriptionManager({</span><br><span class="line">  schema,</span><br><span class="line">  pubsub,</span><br><span class="line">});</span><br><span class="line"> </span><br><span class="line"><span class="comment">// start up a subscription server</span></span><br><span class="line"><span class="keyword">new</span> SubscriptionServer(</span><br><span class="line">  {</span><br><span class="line">    subscriptionManager,</span><br><span class="line">    <span class="comment">// on connect subscription lifecycle event</span></span><br><span class="line">    onConnect: <span class="keyword">async</span> (connectionParams, webSocket) =&gt; {</span><br><span class="line">      <span class="comment">// if a meteor login token is passed to the connection params from the client, </span></span><br><span class="line">      <span class="comment">// add the current user to the subscription context</span></span><br><span class="line">      <span class="keyword">const</span> subscriptionContext = connectionParams.meteorLoginToken</span><br><span class="line">        ? <span class="keyword">await</span> addCurrentUserToContext(context, connectionParams.meteorLoginToken)</span><br><span class="line">        : context;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> subscriptionContext;</span><br><span class="line">    },</span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="comment">// bind the subscription server to Meteor WebApp</span></span><br><span class="line">    server: WebApp.httpServer,</span><br><span class="line">    path: subscriptionsPath,</span><br><span class="line">  }</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure>

        </div>
      </div>

      <div class="pagination">
        <div class="content-wrapper">
          
            
              <a class="link primary prev" href="https://www.apollographql.com/docs/react/recipes/webpack.html">
                <span class="icon-arrow-left-alt"></span>
                <span class="subtitle-pagination">Previous</span>
                Webpack loader
              </a>
              
                
                  <a class="link primary next" href="https://www.apollographql.com/docs/react/recipes/recompose.html">
                    <span class="subtitle-pagination">Next</span>
                    Recompose patterns
                      <span class="icon-arrow-right-alt"></span>
                  </a>
                  
        </div>
      </div>

      <div class="github">
        <a class="link tertiary " href="https://github.com/apollographql/apollo-client/tree/master/docs/source/recipes/meteor.md" target="_blank">
          <span class="icon-github"></span>Edit on GitHub</a>
      </div>

      
    </div>
    <script src="Meteor%20%20%20Apollo%20Client_files/smooth-scroll.js"></script>
    <script src="Meteor%20%20%20Apollo%20Client_files/main.js"></script>
    <script type="text/javascript" src="Meteor%20%20%20Apollo%20Client_files/docsearch.js"></script>
    <script type="text/javascript" src="Meteor%20%20%20Apollo%20Client_files/fastclick.js"></script>

    <script>
      // nectar ninja
      (function(){
        var handle = '@meteorjs';
        var a = document.createElement('script');
        var m = document.getElementsByTagName('script')[0];
        a.async = 1;
        a.src = 'https://nectar.ninja/api/v1/' + handle.slice(1);
        m.parentNode.insertBefore(a, m);
      })();

     

      
        (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
        new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
        j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
        'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
        })(window,document,'script','dataLayer','GTM-PNFDVBB');
      

      
        // Segment Tracking
        !function(){var analytics=window.analytics=window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error("Segment snippet included twice.");else{analytics.invoked=!0;analytics.methods=["trackSubmit","trackClick","trackLink","trackForm","pageview","identify","reset","group","track","ready","alias","page","once","off","on"];analytics.factory=function(t){return function(){var e=Array.prototype.slice.call(arguments);e.unshift(t);analytics.push(e);return analytics}};for(var t=0;t<analytics.methods.length;t++){var e=analytics.methods[t];analytics[e]=analytics.factory(e)}analytics.load=function(t){var e=document.createElement("script");e.type="text/javascript";e.async=!0;e.src=("https:"===document.location.protocol?"https://":"http://")+"cdn.segment.com/analytics.js/v1/"+t+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(e,n)};analytics.SNIPPET_VERSION="3.1.0";
        analytics.load("wgrIo8Bul0Ujl8USETG3DB6hONdy4kTg");
        analytics.page()
        }}();
      

      // search box
      

      
    </script>
  

<script type="text/javascript" id="">function createCookie(c,d,a){if(a){var b=new Data;b.setTime(b.getTime()+864E5*a);a="; expires\x3d"+b.toGTMString()}else a="";document.cookie=c+"\x3d"+d+a+"; path\x3d/"}createCookie("LandingPage","\/docs\/react\/recipes\/meteor");</script><script type="text/javascript" id="">window.heap=window.heap||[];
heap.load=function(e,d){window.heap.appid=e;window.heap.config=d=d||{};var a=d.forceSSL||"https:"===document.location.protocol,b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=(a?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a);b=function(a){return function(){heap.push([a].concat(Array.prototype.slice.call(arguments,0)))}};a="addEventProperties addUserProperties clearEventProperties identify removeEventProperty setEventProperties track unsetEventProperty".split(" ");for(var c=
0;c<a.length;c++)heap[a[c]]=b(a[c])};heap.load("87222794");</script>
<script type="text/javascript" id="">!function(d,e,f,a,b,c){d.twq||(a=d.twq=function(){a.exe?a.exe.apply(a,arguments):a.queue.push(arguments)},a.version="1.1",a.queue=[],b=e.createElement(f),b.async=!0,b.src="//static.ads-twitter.com/uwt.js",c=e.getElementsByTagName(f)[0],c.parentNode.insertBefore(b,c))}(window,document,"script");twq("init","nurhg");twq("track","PageView");</script>
<script type="text/javascript" id="">(function(){var b=document.createElement("script");b.type="text/javascript";b.async=!0;var a=document.location.href,c=document.title;a="?title\x3d"+encodeURIComponent(c)+"\x26url\x3d"+encodeURIComponent(a);b.src="https://go.toutapp.com/site/sjsa6a1fxr"+a;a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a)})();</script>
<script type="text/javascript" id="">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version="2.0",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,"script","https://connect.facebook.net/en_US/fbevents.js");fbq("init","1186436864708126");fbq("set","agent","tmgoogletagmanager","1186436864708126");fbq("track","ViewContent");</script>
<script type="text/javascript" id="">(function(){function b(){!1===c&&(c=!0,Munchkin.init("627-RVJ-941"))}var c=!1,a=document.createElement("script");a.type="text/javascript";a.async=!0;a.src="//munchkin.marketo.net/munchkin.js";a.onreadystatechange=function(){"complete"!=this.readyState&&"loaded"!=this.readyState||b()};a.onload=b;document.getElementsByTagName("head")[0].appendChild(a)})();</script><script type="text/javascript" id="" src="Meteor%20%20%20Apollo%20Client_files/9266591528.js"></script><script type="text/javascript" id="">!function(){var a=window.analytics=window.analytics||[];if(!a.initialize)if(a.invoked)window.console&&console.error&&console.error("Segment snippet included twice.");else{a.invoked=!0;a.methods="trackSubmit trackClick trackLink trackForm pageview identify reset group track ready alias debug page once off on".split(" ");a.factory=function(e){return function(){var b=Array.prototype.slice.call(arguments);b.unshift(e);a.push(b);return a}};for(var c=0;c<a.methods.length;c++){var d=a.methods[c];a[d]=a.factory(d)}a.load=
function(a){var b=document.createElement("script");b.type="text/javascript";b.async=!0;b.src=("https:"===document.location.protocol?"https://":"http://")+"cdn.segment.com/analytics.js/v1/"+a+"/analytics.min.js";a=document.getElementsByTagName("script")[0];a.parentNode.insertBefore(b,a)};a.SNIPPET_VERSION="4.0.0";a.load("fgHGHDDCb5bkQ7upmKeHp3zrxWbF0SWL");a.page()}}();</script><iframe src="Meteor%20%20%20Apollo%20Client_files/a9266591528.htm" aria-hidden="true" tabindex="-1" style="display: none;" width="0" hidden="" height="0"></iframe>
<script src="Meteor%20%20%20Apollo%20Client_files/adsct" type="text/javascript"></script></body></html>