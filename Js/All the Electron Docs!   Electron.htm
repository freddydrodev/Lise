<!DOCTYPE html>
<html lang="en-US"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta content="#2f3241" name="theme-color">
    
    <meta property="og:type" content="website">
  
      <title>All the Electron Docs! | Electron</title>
      <meta property="og:title" content="All the Electron Docs! | Electron">
      <meta name="twitter:title" value="All the Electron Docs! | Electron">
    
  
      <meta property="og:description" content="All of Electron's guides and API documentation on a single, searchable page.">
      <meta name="twitter:description" value="All of Electron's guides and API documentation on a single, searchable page.">
  
      <meta name="twitter:card" content="summary">
  
    <!-- consumed by scripts/get-localized-strings -->
    <meta name="localized.clipboard.copy" content="Copy">
    <meta name="localized.clipboard.copy_to_clipboard" content="Copy to Clipboard">
    <meta name="localized.clipboard.copied" content="Copied">
  
    <meta name="twitter:site" content="@ElectronJS">
    <link rel="shortcut icon" href="https://electronjs.org/images/favicon.ico">
    <link rel="alternate" type="application/rss+xml" title="Electron Blog" href="https://electronjs.org/blog.xml">
    <link rel="stylesheet" href="All%20the%20Electron%20Docs!%20%20%20Electron_files/index.css">
  
    <script async="" src="All%20the%20Electron%20Docs!%20%20%20Electron_files/analytics.js"></script><script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  
      ga('create', 'UA-3769691-57', 'auto');
      ga('send', 'pageview');
    </script>
  </head>
  <body>
    <header class="site-header">
      <div class="container">
    
        <a class="site-header-logo no-underline-hover" href="https://electronjs.org/">
          <svg class="site-header-icon" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
              <g stroke="none" fill="none" fill-rule="evenodd">
                  <path class="svg-stroke" d="M11.7014354,7.72646259 C7.91761319,7.04380371 4.81334929,7.69369948 3.61536899,9.74908711 C2.72656361,11.27402 3.03878853,13.3122813 4.27551338,15.4489979 M6.32642733,18.1886712 C7.89193828,19.8928217 9.9666792,21.548102 12.4120986,22.9466461 C18.2414315,26.2804624 24.2930499,27.0779063 27.1669222,25.1368228 M29.8456419,24.0565148 C29.8456419,23.1971812 29.1423799,22.5005537 28.2748621,22.5005537 C27.4073444,22.5005537 26.7040823,23.1971812 26.7040823,24.0565148 C26.7040823,24.9158484 27.4073444,25.612476 28.2748621,25.612476 C29.1423799,25.612476 29.8456419,24.9158484 29.8456419,24.0565148 L29.8456419,24.0565148 Z"></path>
                  <path class="svg-stroke" d="M26.1017264,17.699802 C28.5790274,14.8008665 29.5563892,11.8210699 28.3609038,9.7699627 C27.4866535,8.27000212 25.5971843,7.51855661 23.1692624,7.48727915 M19.6970573,7.86083838 C17.4054295,8.34719767 14.8948834,9.30454988 12.424266,10.7175048 C6.42288792,14.1497143 2.65401611,19.1281832 3.16552768,22.580522 M3.68501877,25.612476 C4.5525365,25.612476 5.25579857,24.9158484 5.25579857,24.0565148 C5.25579857,23.1971812 4.5525365,22.5005537 3.68501877,22.5005537 C2.81750104,22.5005537 2.11423897,23.1971812 2.11423897,24.0565148 C2.11423897,24.9158484 2.81750104,25.612476 3.68501877,25.612476 L3.68501877,25.612476 L3.68501877,25.612476 Z"></path>
                  <path class="svg-stroke" d="M10.1856596,25.0699995 C11.480995,28.6529192 13.5999849,30.9876144 15.99422,30.9876144 C17.7292778,30.9876144 19.3197869,29.7615184 20.5570359,27.7228112 M22.0509221,24.3364015 C22.7373456,22.1635452 23.1341282,19.5948285 23.1341282,16.8425133 C23.1341282,10.0879866 20.7444131,4.43922457 17.5485944,3.03357113 M15.99422,4.25337326 C16.8617378,4.25337326 17.5649998,3.55674574 17.5649998,2.69741214 C17.5649998,1.83807854 16.8617378,1.14145101 15.99422,1.14145101 C15.1267023,1.14145101 14.4234402,1.83807854 14.4234402,2.69741214 C14.4234402,3.55674574 15.1267023,4.25337326 15.99422,4.25337326 Z"></path>
                  <path class="svg-fill" d="M16.2975137,18.2334955 C15.5219407,18.3994908 14.7578457,17.9112502 14.5899415,17.142994 C14.4226932,16.3747378 14.9152558,15.6178512 15.6908287,15.451531 C16.4664016,15.2855357 17.2304967,15.7737763 17.3984009,16.5420325 C17.5659771,17.3102887 17.0730866,18.0671753 16.2975137,18.2334955 Z"></path>
              </g>
          </svg>
          <svg class="vertical-middle" width="156px" height="18px" viewBox="0 0 156 18" xmlns="http://www.w3.org/2000/svg">
            <title>Electron</title>
            <path stroke="none" fill="currentColor" fill-rule="evenodd" d="M0.93602403,17.0884387 L11.4962951,17.0884387 C11.9763075,17.0884387 12.3603173,16.7044288 12.3603173,16.2244165 C12.3603173,15.7444042 11.9763075,15.3603943 11.4962951,15.3603943 L1.89604868,15.3603943 L1.89604868,9.48024338 L10.2962643,9.48024338 C10.7762767,9.48024338 11.1602865,9.09623352 11.1602865,8.6162212 C11.1602865,8.16020949 10.7762767,7.75219902 10.2962643,7.75219902 L1.89604868,7.75219902 L1.89604868,2.01605176 L11.3762921,2.01605176 C11.8563044,2.01605176 12.2403142,1.6320419 12.2403142,1.15202958 C12.2403142,0.672017252 11.8563044,0.288007394 11.3762921,0.288007394 L0.93602403,0.288007394 C0.432011091,0.288007394 0,0.720018485 0,1.24803204 L0,16.1284141 C0,16.6564276 0.432011091,17.0884387 0.93602403,17.0884387 L0.93602403,17.0884387 Z M19.0804898,16.1284141 C19.0804898,16.6564276 19.5125009,17.0884387 20.0165139,17.0884387 L29.6887622,17.0884387 C30.1687745,17.0884387 30.5527844,16.7044288 30.5527844,16.2244165 C30.5527844,15.7444042 30.1687745,15.3363937 29.6887622,15.3363937 L20.9765385,15.3363937 L20.9765385,1.12802896 C20.9765385,0.600015404 20.5445274,0.168004313 20.0165139,0.168004313 C19.5125009,0.168004313 19.0804898,0.600015404 19.0804898,1.12802896 L19.0804898,16.1284141 Z M37.8729723,17.0884387 L48.4332434,17.0884387 C48.9132557,17.0884387 49.2972656,16.7044288 49.2972656,16.2244165 C49.2972656,15.7444042 48.9132557,15.3603943 48.4332434,15.3603943 L38.8329969,15.3603943 L38.8329969,9.48024338 L47.2332126,9.48024338 C47.7132249,9.48024338 48.0972348,9.09623352 48.0972348,8.6162212 C48.0972348,8.16020949 47.7132249,7.75219902 47.2332126,7.75219902 L38.8329969,7.75219902 L38.8329969,2.01605176 L48.3132403,2.01605176 C48.7932526,2.01605176 49.1772625,1.6320419 49.1772625,1.15202958 C49.1772625,0.672017252 48.7932526,0.288007394 48.3132403,0.288007394 L37.8729723,0.288007394 C37.3689593,0.288007394 36.9369483,0.720018485 36.9369483,1.24803204 L36.9369483,16.1284141 C36.9369483,16.6564276 37.3689593,17.0884387 37.8729723,17.0884387 L37.8729723,17.0884387 Z M63.6976353,17.3764461 C66.4577061,17.3764461 68.2817529,16.4164214 69.9377955,14.9043826 C70.1057998,14.7603789 70.2498035,14.5203728 70.2498035,14.2323654 C70.2498035,13.7523531 69.8177924,13.320342 69.3377801,13.320342 C69.0977739,13.320342 68.8817684,13.440345 68.7377647,13.5843487 C67.2977277,14.9043826 65.8336901,15.6244011 63.7456365,15.6244011 C60.0495416,15.6244011 57.2414695,12.5763229 57.2414695,8.68822305 L57.2414695,8.64022181 C57.2414695,4.77612261 60.025541,1.75204498 63.7456365,1.75204498 C65.8096895,1.75204498 67.2737271,2.5200647 68.5697603,3.67209427 C68.713764,3.76809674 68.9297696,3.88809982 69.1937764,3.88809982 C69.6977893,3.88809982 70.153801,3.45608873 70.153801,2.95207579 C70.153801,2.61606716 69.9617961,2.35206038 69.7697911,2.18405607 C68.2097511,0.888022798 66.4817067,0 63.7696371,0 C58.8255102,0 55.273419,3.93610105 55.273419,8.68822305 L55.273419,8.73622428 C55.273419,13.5603481 58.8495108,17.3764461 63.6976353,17.3764461 L63.6976353,17.3764461 Z M81.1700838,16.2484171 C81.1700838,16.7764307 81.6020949,17.2084418 82.1301085,17.2084418 C82.658122,17.2084418 83.0901331,16.7764307 83.0901331,16.2484171 L83.0901331,2.04005237 L87.9622582,2.04005237 C88.4422705,2.04005237 88.850281,1.65604251 88.850281,1.17603019 C88.850281,0.696017868 88.4422705,0.288007394 87.9622582,0.288007394 L76.2979587,0.288007394 C75.8179464,0.288007394 75.4099359,0.696017868 75.4099359,1.17603019 C75.4099359,1.65604251 75.8179464,2.04005237 76.2979587,2.04005237 L81.1700838,2.04005237 L81.1700838,16.2484171 Z M95.2824461,16.2484171 C95.2824461,16.7764307 95.7144572,17.2084418 96.2184701,17.2084418 C96.7464837,17.2084418 97.1784948,16.7764307 97.1784948,16.2484171 L97.1784948,10.5602711 L102.002619,10.5602711 L106.73074,16.7044288 C106.946746,16.9924362 107.234753,17.2084418 107.618763,17.2084418 C108.098775,17.2084418 108.578787,16.7764307 108.578787,16.2724177 C108.578787,16.008411 108.458784,15.7924054 108.266779,15.5763999 L104.090672,10.2002619 C106.706739,9.69624892 108.578787,8.08820764 108.578787,5.32813679 L108.578787,5.28013555 C108.578787,3.96010166 108.098775,2.78407147 107.282754,1.96805052 C106.226727,0.912023414 104.570685,0.288007394 102.506632,0.288007394 L96.2184701,0.288007394 C95.7144572,0.288007394 95.2824461,0.720018485 95.2824461,1.24803204 L95.2824461,16.2484171 Z M97.1784948,8.85622736 L97.1784948,2.04005237 L102.362628,2.04005237 C105.074698,2.04005237 106.658738,3.28808441 106.658738,5.3521374 L106.658738,5.40013863 C106.658738,7.56019409 104.858692,8.85622736 102.338627,8.85622736 L97.1784948,8.85622736 Z M123.435169,17.3764461 C128.5473,17.3764461 132.027389,13.320342 132.027389,8.68822305 L132.027389,8.64022181 C132.027389,4.0081029 128.595301,0 123.48317,0 C118.371039,0 114.89095,4.05610413 114.89095,8.68822305 L114.89095,8.73622428 C114.89095,13.3683432 118.323038,17.3764461 123.435169,17.3764461 L123.435169,17.3764461 Z M123.48317,15.6244011 C119.643072,15.6244011 116.859,12.504321 116.859,8.68822305 L116.859,8.64022181 C116.859,4.82412385 119.59507,1.75204498 123.435169,1.75204498 C127.275267,1.75204498 130.059339,4.87212508 130.059339,8.68822305 L130.059339,8.73622428 C130.059339,12.5523222 127.323269,15.6244011 123.48317,15.6244011 L123.48317,15.6244011 Z M139.035569,16.2724177 C139.035569,16.7764307 139.44358,17.2084418 139.947593,17.2084418 C140.475606,17.2084418 140.883617,16.7764307 140.883617,16.2724177 L140.883617,3.2640838 L151.299884,16.5844258 C151.587892,16.9204344 151.875899,17.1604405 152.283909,17.1604405 L152.379912,17.1604405 C152.883925,17.1604405 153.243934,16.7764307 153.243934,16.2724177 L153.243934,1.10402834 C153.243934,0.600015404 152.835924,0.168004313 152.331911,0.168004313 C151.803897,0.168004313 151.395887,0.600015404 151.395887,1.10402834 L151.395887,13.7763537 L141.195625,0.768019717 C140.931618,0.432011091 140.667611,0.216005545 140.2356,0.216005545 L139.971593,0.216005545 C139.46758,0.216005545 139.035569,0.648016636 139.035569,1.15202958 L139.035569,16.2724177 Z"></path>
          </svg>
        </a>
    
        <nav class="site-header-nav">
          <a class="site-header-nav-item" href="https://electronjs.org/search">Search</a>
          <a class="site-header-nav-item" href="https://electronjs.org/apps">Apps</a>
          <a class="site-header-nav-item active" href="https://electronjs.org/docs">Docs</a>
          <a class="site-header-nav-item" href="https://electronjs.org/blog">Blog</a>
          <a class="site-header-nav-item" href="https://electronjs.org/community">Community</a>
          <!-- <a class="site-header-nav-item" href="/userland">Userland</a> -->
          <a class="site-header-nav-item" href="https://electronjs.org/releases">Releases</a>
          <a class="site-header-nav-item" href="https://electronjs.org/contact">Contact</a>
          <a class="site-header-nav-item octicon" href="https://github.com/electron" title="Github Organization"><span class="mega-octicon octicon-mark-github vertical-middle"></span></a>
          <a class="site-header-nav-item bordered" href="https://electronjs.org/languages">English</a>
        </nav>
      </div>
    </header>
    
<div class="subtron text-left">
  <div class="container-narrow">
    <h1>
      <span class="mr-3 mr-lg-4">Electron Documentation</span>
      <!-- <span class="docs-version">1.8.2</span> -->
    </h1>      
  </div>
  
  <div class="container-narrow mt-2">

    <h4 class="docs-breadcrumbs">
      <a href="https://electronjs.org/docs">Docs</a> /
        All
          </h4>
  </div>
</div>

<section class="page-section docs strong-headers">
  <div class="container-narrow">
      <h1 id="about-electron"><a href="#about-electron">About Electron</a><a class="header-link" href="#about-electron" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p><a href="https://electronjs.org/">Electron</a> is an open source 
library developed by GitHub for building cross-platform desktop 
applications with HTML, CSS, and JavaScript. Electron accomplishes this 
by combining <a href="https://www.chromium.org/Home">Chromium</a> and <a href="https://nodejs.org/">Node.js</a> into a single runtime and apps can be packaged for Mac, Windows, and Linux.</p>
<p>Electron began in 2013 as the framework on which <a href="https://atom.io/">Atom</a>, GitHub's hackable text editor, would be built. The two were open sourced in the Spring of 2014.</p>
<p>It has since become a popular tool used by open source developers, startups, and established companies. <a href="https://electronjs.org/apps">See who is building on Electron</a>.</p>
<p>Read on to learn more about the contributors and releases of Electron or get started building with Electron in the <a href="https://electronjs.org/docs/tutorial/quick-start">Quick Start Guide</a>.</p>
<h2 id="core-team-and-contributors"><a href="#core-team-and-contributors">Core Team and Contributors</a><a class="header-link" href="#core-team-and-contributors" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Electron is maintained by a team at GitHub as well as a group of <a href="https://github.com/electron/electron/graphs/contributors">active contributors</a>
 from the community. Some of the contributors are individuals and some 
work at larger companies who are developing on Electron. We're happy to 
add frequent contributors to the project as maintainers. Read more about
 <a href="https://github.com/electron/electron/blob/master/CONTRIBUTING.md">contributing to Electron</a>.</p>
<h2 id="releases"><a href="#releases">Releases</a><a class="header-link" href="#releases" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p><a href="https://github.com/electron/electron/releases">Electron releases</a> frequently. We release when there are significant bug fixes, new APIs or are updating versions of Chromium or Node.js.</p>
<h3 id="updating-dependencies"><a href="#updating-dependencies">Updating Dependencies</a><a class="header-link" href="#updating-dependencies" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Electron's version of Chromium is usually updated within one or two 
weeks after a new stable Chromium version is released, depending on the 
effort involved in the upgrade.</p>
<p>When a new version of Node.js is released, Electron usually waits 
about a month before upgrading in order to bring in a more stable 
version.</p>
<p>In Electron, Node.js and Chromium share a single V8 instance—usually the version that Chromium is using. Most of the time this <em>just works</em> but sometimes it means patching Node.js.</p>
<h3 id="versioning"><a href="#versioning">Versioning</a><a class="header-link" href="#versioning" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>As of version 2.0 Electron <a href="https://semver.org/">follows <code>semver</code></a>.
For most applications, and using any recent version of npm,
running <code>$ npm install electron</code> will do the right thing.</p>
<p>The version update process is detailed explicitly in our <a href="https://electronjs.org/docs/tutorial/electron-versioning">Versioning Doc</a>.</p>
<h3 id="lts"><a href="#lts">LTS</a><a class="header-link" href="#lts" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Long term support of older versions of Electron does not currently 
exist. If your current version of Electron works for you, you can stay 
on it for as long as you'd like. If you want to make use of new features
 as they come in you should upgrade to a newer version.</p>
<p>A major update came with version <code>v1.0.0</code>. If you're not yet using this version, you should <a href="https://electronjs.org/blog/electron-1-0">read more about the <code>v1.0.0</code> changes</a>.</p>
<h2 id="core-philosophy"><a href="#core-philosophy">Core Philosophy</a><a class="header-link" href="#core-philosophy" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>In order to keep Electron small (file size) and sustainable (the 
spread of dependencies and APIs) the project limits the scope of the 
core project.</p>
<p>For instance, Electron uses just the rendering library from Chromium 
rather than all of Chromium. This makes it easier to upgrade Chromium 
but also means some browser features found in Google Chrome do not exist
 in Electron.</p>
<p>New features added to Electron should primarily be native APIs. If a 
feature can be its own Node.js module, it probably should be. See the <a href="https://electronjs.org/community">Electron tools built by the community</a>.</p>
<h2 id="history"><a href="#history">History</a><a class="header-link" href="#history" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Below are milestones in Electron's history.</p>
<table>
<thead>
<tr>
<th>:calendar:</th>
<th>:tada:</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>April 2013</strong></td>
<td><a href="https://github.com/electron/electron/commit/6ef8875b1e93787fa9759f602e7880f28e8e6b45">Atom Shell is started</a>
.</td>
</tr>
<tr>
<td><strong>May 2014</strong></td>
<td><a href="https://blog.atom.io/2014/05/06/atom-is-now-open-source.html">Atom Shell is open sourced</a>
.</td>
</tr>
<tr>
<td><strong>April 2015</strong></td>
<td><a href="https://github.com/electron/electron/pull/1389">Atom Shell is re-named Electron</a>
.</td>
</tr>
<tr>
<td><strong>May 2016</strong></td>
<td><a href="https://electronjs.org/blog/electron-1-0">Electron releases <code>v1.0.0</code></a>
.</td>
</tr>
<tr>
<td><strong>May 2016</strong></td>
<td><a href="https://electronjs.org/docs/tutorial/mac-app-store-submission-guide">Electron apps compatible with Mac App Store</a>
.</td>
</tr>
<tr>
<td><strong>August 2016</strong></td>
<td><a href="https://electronjs.org/docs/tutorial/windows-store-guide">Windows Store support for Electron apps</a>
.</td>
</tr>
</tbody>
</table>

  <hr>
  <h1 id="accelerator"><a href="#accelerator">Accelerator</a><a class="header-link" href="#accelerator" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Define keyboard shortcuts.</p>
</blockquote>
<p>Accelerators are Strings that can contain multiple modifiers and key codes,
combined by the <code>+</code> character, and are used to define keyboard shortcuts
throughout your application.</p>
<p>Examples:</p>
<ul>
<li><code>CommandOrControl+A</code></li>
<li><code>CommandOrControl+Shift+Z</code></li>
</ul>
<p>Shortcuts are registered with the <a href="https://electronjs.org/docs/api/global-shortcut"><code>globalShortcut</code></a> module
using the <a href="https://electronjs.org/docs/api/global-shortcut#globalshortcutregisteraccelerator-callback"><code>register</code></a>
method, i.e.</p>
<pre><code class="hljs language-javascript" id="_42asejfc"><span class="hljs-keyword">const</span> {app, globalShortcut} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  <span class="hljs-comment">// Register a 'CommandOrControl+Y' shortcut listener.</span>
  globalShortcut.register(<span class="hljs-string">'CommandOrControl+Y'</span>, () =&gt; {
    <span class="hljs-comment">// Do stuff when Y and either Command/Control is pressed.</span>
  })
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_42asejfc">Copy</button></pre>
<h2 id="platform-notice"><a href="#platform-notice">Platform notice</a><a class="header-link" href="#platform-notice" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>On Linux and Windows, the <code>Command</code> key does not have any effect so
use <code>CommandOrControl</code> which represents <code>Command</code> on macOS and <code>Control</code> on
Linux and Windows to define some accelerators.</p>
<p>Use <code>Alt</code> instead of <code>Option</code>. The <code>Option</code> key only exists on macOS, whereas
the <code>Alt</code> key is available on all platforms.</p>
<p>The <code>Super</code> key is mapped to the <code>Windows</code> key on Windows and Linux and
<code>Cmd</code> on macOS.</p>
<h2 id="available-modifiers"><a href="#available-modifiers">Available modifiers</a><a class="header-link" href="#available-modifiers" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<ul>
<li><code>Command</code> (or <code>Cmd</code> for short)</li>
<li><code>Control</code> (or <code>Ctrl</code> for short)</li>
<li><code>CommandOrControl</code> (or <code>CmdOrCtrl</code> for short)</li>
<li><code>Alt</code></li>
<li><code>Option</code></li>
<li><code>AltGr</code></li>
<li><code>Shift</code></li>
<li><code>Super</code></li>
</ul>
<h2 id="available-key-codes"><a href="#available-key-codes">Available key codes</a><a class="header-link" href="#available-key-codes" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<ul>
<li><code>0</code> to <code>9</code></li>
<li><code>A</code> to <code>Z</code></li>
<li><code>F1</code> to <code>F24</code></li>
<li>Punctuations like <code>~</code>, <code>!</code>, <code>@</code>, <code>#</code>, <code>$</code>, etc.</li>
<li><code>Plus</code></li>
<li><code>Space</code></li>
<li><code>Tab</code></li>
<li><code>Backspace</code></li>
<li><code>Delete</code></li>
<li><code>Insert</code></li>
<li><code>Return</code> (or <code>Enter</code> as alias)</li>
<li><code>Up</code>, <code>Down</code>, <code>Left</code> and <code>Right</code></li>
<li><code>Home</code> and <code>End</code></li>
<li><code>PageUp</code> and <code>PageDown</code></li>
<li><code>Escape</code> (or <code>Esc</code> for short)</li>
<li><code>VolumeUp</code>, <code>VolumeDown</code> and <code>VolumeMute</code></li>
<li><code>MediaNextTrack</code>, <code>MediaPreviousTrack</code>, <code>MediaStop</code> and <code>MediaPlayPause</code></li>
<li><code>PrintScreen</code></li>
</ul>

  <hr>
  <h1 id="accessibility"><a href="#accessibility">Accessibility</a><a class="header-link" href="#accessibility" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>Making accessible applications is important and we're happy to introduce new functionality to <a href="https://electronjs.org/devtron">Devtron</a> and <a href="https://electronjs.org/spectron">Spectron</a> that gives developers the opportunity to make their apps better for everyone.</p>
<hr>
<p>Accessibility concerns in Electron applications are similar to those 
of websites because they're both ultimately HTML. With Electron apps, 
however, you can't use the online resources for accessibility audits 
because your app doesn't have a URL to point the auditor to.</p>
<p>These new features bring those auditing tools to your Electron app. 
You can choose to add audits to your tests with Spectron or use them 
within DevTools with Devtron. Read on for a summary of the tools or 
checkout our <a href="https://electronjs.org/docs/tutorial/accessibility">accessibility documentation</a> for more information.</p>
<h2 id="spectron"><a href="#spectron">Spectron</a><a class="header-link" href="#spectron" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>In the testing framework Spectron, you can now audit each window and <code>&lt;webview&gt;</code> tag in your application. For example:</p>
<pre><code class="hljs language-javascript" id="_ehnhsp3p">app.client.auditAccessibility().then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">audit</span>) </span>{
  <span class="hljs-keyword">if</span> (audit.failed) {
    <span class="hljs-built_in">console</span>.error(audit.message)
  }
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_ehnhsp3p">Copy</button></pre>
<p>You can read more about this feature in <a href="https://github.com/electron/spectron#accessibility-testing">Spectron's documentation</a>.</p>
<h2 id="devtron"><a href="#devtron">Devtron</a><a class="header-link" href="#devtron" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>In Devtron, there is a new accessibility tab which will allow you to audit a page in your app, sort and filter the results.</p>
<p><img src="All%20the%20Electron%20Docs!%20%20%20Electron_files/9f9bcd72-533f-11e6-880d-389115f40a2a.png" alt="devtron screenshot"></p>
<p>Both of these tools are using the <a href="https://github.com/GoogleChrome/accessibility-developer-tools">Accessibility Developer Tools</a> library built by Google for Chrome. You can learn more about the accessibility audit rules this library uses on that <a href="https://github.com/GoogleChrome/accessibility-developer-tools/wiki/Audit-Rules">repository's wiki</a>.</p>
<p>If you know of other great accessibility tools for Electron, add them to the <a href="https://electronjs.org/docs/tutorial/accessibility">accessibility documentation</a> with a pull request.</p>
<h2 id="enabling-accessibility"><a href="#enabling-accessibility">Enabling Accessibility</a><a class="header-link" href="#enabling-accessibility" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Electron applications keep accessibility disabled by default for performance reasons but there are multiple ways to enable it.</p>
<h3 id="inside-application"><a href="#inside-application">Inside Application</a><a class="header-link" href="#inside-application" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>By using <a href="https://electronjs.org/docs/api/app#appsetaccessibilitysupportenabledenabled-macos-windows"><code>app.setAccessibilitySupportEnabled(enabled)</code></a>,
 you can expose accessibility switch to users in the application 
preferences. User's system assistive utilities have priority over this 
setting and will override it.</p>
<h3 id="assistive-technology"><a href="#assistive-technology">Assistive Technology</a><a class="header-link" href="#assistive-technology" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Electron application will enable accessibility automatically when it 
detects assistive technology (Windows) or VoiceOver (macOS). See 
Chrome's <a href="https://www.chromium.org/developers/design-documents/accessibility#TOC-How-Chrome-detects-the-presence-of-Assistive-Technology">accessibility documentation</a> for more details.</p>
<p>On macOS, third-party assistive technology can switch accessibility inside Electron applications by setting the attribute <code>AXManualAccessibility</code> programmatically:</p>
<pre><code class="hljs language-objc" id="_zc9kpk2h"><span class="hljs-built_in">CFStringRef</span> kAXManualAccessibility = <span class="hljs-built_in">CFSTR</span>(<span class="hljs-string">"AXManualAccessibility"</span>);

+ (<span class="hljs-keyword">void</span>)enableAccessibility:(<span class="hljs-built_in">BOOL</span>)enable inElectronApplication:(<span class="hljs-built_in">NSRunningApplication</span> *)app
{
    AXUIElementRef appRef = AXUIElementCreateApplication(app.processIdentifier);
    <span class="hljs-keyword">if</span> (appRef == <span class="hljs-literal">nil</span>)
        <span class="hljs-keyword">return</span>;

    <span class="hljs-built_in">CFBooleanRef</span> value = enable ? kCFBooleanTrue : kCFBooleanFalse;
    AXUIElementSetAttributeValue(appRef, kAXManualAccessibility, value);
    <span class="hljs-built_in">CFRelease</span>(appRef);
}</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_zc9kpk2h">Copy</button></pre>

  <hr>
  <h1 id="app"><a href="#app">app</a><a class="header-link" href="#app" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Control your application's event lifecycle.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<p>The following example shows how to quit the application when the last window is
closed:</p>
<pre><code class="hljs language-javascript" id="_ukjv5uqa"><span class="hljs-keyword">const</span> {app} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
app.on(<span class="hljs-string">'window-all-closed'</span>, () =&gt; {
  app.quit()
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_ukjv5uqa">Copy</button></pre>
<h2 id="events"><a href="#events">Events</a><a class="header-link" href="#events" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>app</code> object emits the following events:</p>
<h3 id="event-will-finish-launching"><a href="#event-will-finish-launching">Event: 'will-finish-launching'</a><a class="header-link" href="#event-will-finish-launching" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Emitted when the application has finished basic startup. On Windows and Linux,
the <code>will-finish-launching</code> event is the same as the <code>ready</code> event; on macOS,
this event represents the <code>applicationWillFinishLaunching</code> notification of
<code>NSApplication</code>. You would usually set up listeners for the <code>open-file</code> and
<code>open-url</code> events here, and start the crash reporter and auto updater.</p>
<p>In most cases, you should just do everything in the <code>ready</code> event handler.</p>
<h3 id="event-ready"><a href="#event-ready">Event: 'ready'</a><a class="header-link" href="#event-ready" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>launchInfo</code> Object <em class="platform-label">macOS</em></li>
</ul>
<p>Emitted when Electron has finished initializing. On macOS, <code>launchInfo</code> holds
the <code>userInfo</code> of the <code>NSUserNotification</code> that was used to open the application,
if it was launched from Notification Center. You can call <code>app.isReady()</code> to
check if this event has already fired.</p>
<h3 id="event-window-all-closed"><a href="#event-window-all-closed">Event: 'window-all-closed'</a><a class="header-link" href="#event-window-all-closed" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Emitted when all windows have been closed.</p>
<p>If you do not subscribe to this event and all windows are closed, the default
behavior is to quit the app; however, if you subscribe, you control whether the
app quits or not. If the user pressed <code>Cmd + Q</code>, or the developer called
<code>app.quit()</code>, Electron will first try to close all the windows and then emit the
<code>will-quit</code> event, and in this case the <code>window-all-closed</code> event would not be
emitted.</p>
<h3 id="event-before-quit"><a href="#event-before-quit">Event: 'before-quit'</a><a class="header-link" href="#event-before-quit" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
</ul>
<p>Emitted before the application starts closing its windows.
Calling <code>event.preventDefault()</code> will prevent the default behaviour, which is
terminating the application.</p>
<p><strong>Note:</strong> If application quit was initiated by <code>autoUpdater.quitAndInstall()</code>
then <code>before-quit</code> is emitted <em>after</em> emitting <code>close</code> event on all windows and
closing them.</p>
<h3 id="event-will-quit"><a href="#event-will-quit">Event: 'will-quit'</a><a class="header-link" href="#event-will-quit" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
</ul>
<p>Emitted when all windows have been closed and the application will quit.
Calling <code>event.preventDefault()</code> will prevent the default behaviour, which is
terminating the application.</p>
<p>See the description of the <code>window-all-closed</code> event for the differences between
the <code>will-quit</code> and <code>window-all-closed</code> events.</p>
<h3 id="event-quit"><a href="#event-quit">Event: 'quit'</a><a class="header-link" href="#event-quit" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>exitCode</code> Integer</li>
</ul>
<p>Emitted when the application is quitting.</p>
<h3 id="event-open-file-macos"><a href="#event-open-file-macos">Event: 'open-file' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-open-file-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>path</code> String</li>
</ul>
<p>Emitted when the user wants to open a file with the application. The <code>open-file</code>
event is usually emitted when the application is already open and the OS wants
to reuse the application to open the file. <code>open-file</code> is also emitted when a
file is dropped onto the dock and the application is not yet running. Make sure
to listen for the <code>open-file</code> event very early in your application startup to
handle this case (even before the <code>ready</code> event is emitted).</p>
<p>You should call <code>event.preventDefault()</code> if you want to handle this event.</p>
<p>On Windows, you have to parse <code>process.argv</code> (in the main process) to get the
filepath.</p>
<h3 id="event-open-url-macos"><a href="#event-open-url-macos">Event: 'open-url' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-open-url-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>url</code> String</li>
</ul>
<p>Emitted when the user wants to open a URL with the application. Your application's
<code>Info.plist</code> file must define the url scheme within the <code>CFBundleURLTypes</code> key, and
set <code>NSPrincipalClass</code> to <code>AtomApplication</code>.</p>
<p>You should call <code>event.preventDefault()</code> if you want to handle this event.</p>
<h3 id="event-activate-macos"><a href="#event-activate-macos">Event: 'activate' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-activate-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>hasVisibleWindows</code> Boolean</li>
</ul>
<p>Emitted when the application is activated. Various actions can trigger
this event, such as launching the application for the first time, attempting
to re-launch the application when it's already running, or clicking on the
application's dock or taskbar icon.</p>
<h3 id="event-continue-activity-macos"><a href="#event-continue-activity-macos">Event: 'continue-activity' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-continue-activity-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>type</code> String - A string identifying the activity. Maps to
<a href="https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSUserActivity_Class/index.html#//apple_ref/occ/instp/NSUserActivity/activityType"><code>NSUserActivity.activityType</code></a>.</li>
<li><code>userInfo</code> Object - Contains app-specific state stored by the activity on
another device.</li>
</ul>
<p>Emitted during <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Handoff/HandoffFundamentals/HandoffFundamentals.html">Handoff</a> when an activity from a different device wants
to be resumed. You should call <code>event.preventDefault()</code> if you want to handle
this event.</p>
<p>A user activity can be continued only in an app that has the same developer Team
ID as the activity's source app and that supports the activity's type.
Supported activity types are specified in the app's <code>Info.plist</code> under the
<code>NSUserActivityTypes</code> key.</p>
<h3 id="event-will-continue-activity-macos"><a href="#event-will-continue-activity-macos">Event: 'will-continue-activity' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-will-continue-activity-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>type</code> String - A string identifying the activity. Maps to
<a href="https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSUserActivity_Class/index.html#//apple_ref/occ/instp/NSUserActivity/activityType"><code>NSUserActivity.activityType</code></a>.</li>
</ul>
<p>Emitted during <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Handoff/HandoffFundamentals/HandoffFundamentals.html">Handoff</a> before an activity from a different device wants
to be resumed. You should call <code>event.preventDefault()</code> if you want to handle
this event.</p>
<h3 id="event-continue-activity-error-macos"><a href="#event-continue-activity-error-macos">Event: 'continue-activity-error' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-continue-activity-error-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>type</code> String - A string identifying the activity. Maps to
<a href="https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSUserActivity_Class/index.html#//apple_ref/occ/instp/NSUserActivity/activityType"><code>NSUserActivity.activityType</code></a>.</li>
<li><code>error</code> String - A string with the error's localized description.</li>
</ul>
<p>Emitted during <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Handoff/HandoffFundamentals/HandoffFundamentals.html">Handoff</a> when an activity from a different device
fails to be resumed.</p>
<h3 id="event-activity-was-continued-macos"><a href="#event-activity-was-continued-macos">Event: 'activity-was-continued' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-activity-was-continued-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>type</code> String - A string identifying the activity. Maps to
<a href="https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSUserActivity_Class/index.html#//apple_ref/occ/instp/NSUserActivity/activityType"><code>NSUserActivity.activityType</code></a>.</li>
<li><code>userInfo</code> Object - Contains app-specific state stored by the activity.</li>
</ul>
<p>Emitted during <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Handoff/HandoffFundamentals/HandoffFundamentals.html">Handoff</a> after an activity from this device was successfully
resumed on another one.</p>
<h3 id="event-update-activity-state-macos"><a href="#event-update-activity-state-macos">Event: 'update-activity-state' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-update-activity-state-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>type</code> String - A string identifying the activity. Maps to
<a href="https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSUserActivity_Class/index.html#//apple_ref/occ/instp/NSUserActivity/activityType"><code>NSUserActivity.activityType</code></a>.</li>
<li><code>userInfo</code> Object - Contains app-specific state stored by the activity.</li>
</ul>
<p>Emitted when <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Handoff/HandoffFundamentals/HandoffFundamentals.html">Handoff</a> is about to be resumed on another device. If you need to update the state to be transferred, you should call <code>event.preventDefault()</code> immediatelly, construct a new <code>userInfo</code> dictionary and call <code>app.updateCurrentActiviy()</code> in a timely manner. Otherwise the operation will fail and <code>continue-activity-error</code> will be called.</p>
<h3 id="event-new-window-for-tab-macos"><a href="#event-new-window-for-tab-macos">Event: 'new-window-for-tab' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-new-window-for-tab-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
</ul>
<p>Emitted when the user clicks the native macOS new tab button. The new
tab button is only visible if the current <code>BrowserWindow</code> has a
<code>tabbingIdentifier</code></p>
<h3 id="event-browser-window-blur"><a href="#event-browser-window-blur">Event: 'browser-window-blur'</a><a class="header-link" href="#event-browser-window-blur" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>window</code> <a href="https://electronjs.org/docs/api/browser-window">BrowserWindow</a></li>
</ul>
<p>Emitted when a <a href="https://electronjs.org/docs/api/browser-window">browserWindow</a> gets blurred.</p>
<h3 id="event-browser-window-focus"><a href="#event-browser-window-focus">Event: 'browser-window-focus'</a><a class="header-link" href="#event-browser-window-focus" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>window</code> <a href="https://electronjs.org/docs/api/browser-window">BrowserWindow</a></li>
</ul>
<p>Emitted when a <a href="https://electronjs.org/docs/api/browser-window">browserWindow</a> gets focused.</p>
<h3 id="event-browser-window-created"><a href="#event-browser-window-created">Event: 'browser-window-created'</a><a class="header-link" href="#event-browser-window-created" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>window</code> <a href="https://electronjs.org/docs/api/browser-window">BrowserWindow</a></li>
</ul>
<p>Emitted when a new <a href="https://electronjs.org/docs/api/browser-window">browserWindow</a> is created.</p>
<h3 id="event-web-contents-created"><a href="#event-web-contents-created">Event: 'web-contents-created'</a><a class="header-link" href="#event-web-contents-created" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>webContents</code> <a href="https://electronjs.org/docs/api/web-contents">WebContents</a></li>
</ul>
<p>Emitted when a new <a href="https://electronjs.org/docs/api/web-contents">webContents</a> is created.</p>
<h3 id="event-certificate-error"><a href="#event-certificate-error">Event: 'certificate-error'</a><a class="header-link" href="#event-certificate-error" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>webContents</code> <a href="https://electronjs.org/docs/api/web-contents">WebContents</a></li>
<li><code>url</code> String</li>
<li><code>error</code> String - The error code</li>
<li><code>certificate</code> <a href="https://electronjs.org/docs/api/structures/certificate">Certificate</a></li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>isTrusted</code> Boolean - Whether to consider the certificate as trusted</li>
</ul>
</li>
</ul>
<p>Emitted when failed to verify the <code>certificate</code> for <code>url</code>, to trust the
certificate you should prevent the default behavior with
<code>event.preventDefault()</code> and call <code>callback(true)</code>.</p>
<pre><code class="hljs language-javascript" id="_v47dt84c"><span class="hljs-keyword">const</span> {app} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

app.on(<span class="hljs-string">'certificate-error'</span>, (event, webContents, url, error, certificate, callback) =&gt; {
  <span class="hljs-keyword">if</span> (url === <span class="hljs-string">'https://github.com'</span>) {
    <span class="hljs-comment">// Verification logic.</span>
    event.preventDefault()
    callback(<span class="hljs-literal">true</span>)
  } <span class="hljs-keyword">else</span> {
    callback(<span class="hljs-literal">false</span>)
  }
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_v47dt84c">Copy</button></pre>
<h3 id="event-select-client-certificate"><a href="#event-select-client-certificate">Event: 'select-client-certificate'</a><a class="header-link" href="#event-select-client-certificate" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>webContents</code> <a href="https://electronjs.org/docs/api/web-contents">WebContents</a></li>
<li><code>url</code> URL</li>
<li><code>certificateList</code> <a href="https://electronjs.org/docs/api/structures/certificate">Certificate[]</a></li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>certificate</code> <a href="https://electronjs.org/docs/api/structures/certificate">Certificate</a> (optional)</li>
</ul>
</li>
</ul>
<p>Emitted when a client certificate is requested.</p>
<p>The <code>url</code> corresponds to the navigation entry requesting the client certificate
and <code>callback</code> can be called with an entry filtered from the list. Using
<code>event.preventDefault()</code> prevents the application from using the first
certificate from the store.</p>
<pre><code class="hljs language-javascript" id="_lh8al0k"><span class="hljs-keyword">const</span> {app} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

app.on(<span class="hljs-string">'select-client-certificate'</span>, (event, webContents, url, list, callback) =&gt; {
  event.preventDefault()
  callback(list[<span class="hljs-number">0</span>])
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_lh8al0k">Copy</button></pre>
<h3 id="event-login"><a href="#event-login">Event: 'login'</a><a class="header-link" href="#event-login" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>webContents</code> <a href="https://electronjs.org/docs/api/web-contents">WebContents</a></li>
<li>
<p><code>request</code> Object</p>
<ul>
<li><code>method</code> String</li>
<li><code>url</code> URL</li>
<li><code>referrer</code> URL</li>
</ul>
</li>
<li>
<p><code>authInfo</code> Object</p>
<ul>
<li><code>isProxy</code> Boolean</li>
<li><code>scheme</code> String</li>
<li><code>host</code> String</li>
<li><code>port</code> Integer</li>
<li><code>realm</code> String</li>
</ul>
</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>username</code> String</li>
<li><code>password</code> String</li>
</ul>
</li>
</ul>
<p>Emitted when <code>webContents</code> wants to do basic auth.</p>
<p>The default behavior is to cancel all authentications, to override this you
should prevent the default behavior with <code>event.preventDefault()</code> and call
<code>callback(username, password)</code> with the credentials.</p>
<pre><code class="hljs language-javascript" id="_48tggt8u"><span class="hljs-keyword">const</span> {app} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

app.on(<span class="hljs-string">'login'</span>, (event, webContents, request, authInfo, callback) =&gt; {
  event.preventDefault()
  callback(<span class="hljs-string">'username'</span>, <span class="hljs-string">'secret'</span>)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_48tggt8u">Copy</button></pre>
<h3 id="event-gpu-process-crashed"><a href="#event-gpu-process-crashed">Event: 'gpu-process-crashed'</a><a class="header-link" href="#event-gpu-process-crashed" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>killed</code> Boolean</li>
</ul>
<p>Emitted when the gpu process crashes or is killed.</p>
<h3 id="event-accessibility-support-changed-macos-windows"><a href="#event-accessibility-support-changed-macos-windows">Event: 'accessibility-support-changed' <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#event-accessibility-support-changed-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>accessibilitySupportEnabled</code> Boolean - <code>true</code> when Chrome's accessibility
support is enabled, <code>false</code> otherwise.</li>
</ul>
<p>Emitted when Chrome's accessibility support changes. This event fires when
assistive technologies, such as screen readers, are enabled or disabled.
See <a href="https://www.chromium.org/developers/design-documents/accessibility">chromium.org/developers/design-documents/accessibility</a> for more
details.</p>
<h2 id="methods"><a href="#methods">Methods</a><a class="header-link" href="#methods" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>app</code> object has the following methods:</p>
<p><strong>Note:</strong> Some methods are only available on specific operating systems and are
labeled as such.</p>
<h3 id="appquit"><a href="#appquit"><code>app.quit()</code></a><a class="header-link" href="#appquit" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Try to close all windows. The <code>before-quit</code> event will be emitted first. If all
windows are successfully closed, the <code>will-quit</code> event will be emitted and by
default the application will terminate.</p>
<p>This method guarantees that all <code>beforeunload</code> and <code>unload</code> event handlers are
correctly executed. It is possible that a window cancels the quitting by
returning <code>false</code> in the <code>beforeunload</code> event handler.</p>
<h3 id="appexitexitcode"><a href="#appexitexitcode"><code>app.exit([exitCode])</code></a><a class="header-link" href="#appexitexitcode" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>exitCode</code> Integer (optional)</li>
</ul>
<p>Exits immediately with <code>exitCode</code>.  <code>exitCode</code> defaults to 0.</p>
<p>All windows will be closed immediately without asking user and the <code>before-quit</code>
and <code>will-quit</code> events will not be emitted.</p>
<h3 id="apprelaunchoptions"><a href="#apprelaunchoptions"><code>app.relaunch([options])</code></a><a class="header-link" href="#apprelaunchoptions" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>options</code> Object (optional)</p>
<ul>
<li><code>args</code> String[] - (optional)</li>
<li><code>execPath</code> String (optional)</li>
</ul>
</li>
</ul>
<p>Relaunches the app when current instance exits.</p>
<p>By default the new instance will use the same working directory and command line
arguments with current instance. When <code>args</code> is specified, the <code>args</code> will be
passed as command line arguments instead. When <code>execPath</code> is specified, the
<code>execPath</code> will be executed for relaunch instead of current app.</p>
<p>Note that this method does not quit the app when executed, you have to call
<code>app.quit</code> or <code>app.exit</code> after calling <code>app.relaunch</code> to make the app restart.</p>
<p>When <code>app.relaunch</code> is called for multiple times, multiple instances will be
started after current instance exited.</p>
<p>An example of restarting current instance immediately and adding a new command
line argument to the new instance:</p>
<pre><code class="hljs language-javascript" id="_l6mg1ekb"><span class="hljs-keyword">const</span> {app} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

app.relaunch({<span class="hljs-attr">args</span>: process.argv.slice(<span class="hljs-number">1</span>).concat([<span class="hljs-string">'--relaunch'</span>])})
app.exit(<span class="hljs-number">0</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_l6mg1ekb">Copy</button></pre>
<h3 id="appisready"><a href="#appisready"><code>app.isReady()</code></a><a class="header-link" href="#appisready" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Boolean</code> - <code>true</code> if Electron has finished initializing, <code>false</code> otherwise.</p>
<h3 id="appfocus"><a href="#appfocus"><code>app.focus()</code></a><a class="header-link" href="#appfocus" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>On Linux, focuses on the first visible window. On macOS, makes the application
the active app. On Windows, focuses on the application's first window.</p>
<h3 id="apphide-macos"><a href="#apphide-macos"><code>app.hide()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#apphide-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Hides all application windows without minimizing them.</p>
<h3 id="appshow-macos"><a href="#appshow-macos"><code>app.show()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#appshow-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Shows application windows after they were hidden. Does not automatically focus
them.</p>
<h3 id="appgetapppath"><a href="#appgetapppath"><code>app.getAppPath()</code></a><a class="header-link" href="#appgetapppath" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>String</code> - The current application directory.</p>
<h3 id="appgetpathname"><a href="#appgetpathname"><code>app.getPath(name)</code></a><a class="header-link" href="#appgetpathname" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>name</code> String</li>
</ul>
<p>Returns <code>String</code> - A path to a special directory or file associated with <code>name</code>. On
failure an <code>Error</code> is thrown.</p>
<p>You can request the following paths by the name:</p>
<ul>
<li><code>home</code> User's home directory.</li>
<li>
<p><code>appData</code> Per-user application data directory, which by default points to:</p>
<ul>
<li><code>%APPDATA%</code> on Windows</li>
<li><code>$XDG_CONFIG_HOME</code> or <code>~/.config</code> on Linux</li>
<li><code>~/Library/Application Support</code> on macOS</li>
</ul>
</li>
<li><code>userData</code> The directory for storing your app's configuration files, which by
default it is the <code>appData</code> directory appended with your app's name.</li>
<li><code>temp</code> Temporary directory.</li>
<li><code>exe</code> The current executable file.</li>
<li><code>module</code> The <code>libchromiumcontent</code> library.</li>
<li><code>desktop</code> The current user's Desktop directory.</li>
<li><code>documents</code> Directory for a user's "My Documents".</li>
<li><code>downloads</code> Directory for a user's downloads.</li>
<li><code>music</code> Directory for a user's music.</li>
<li><code>pictures</code> Directory for a user's pictures.</li>
<li><code>videos</code> Directory for a user's videos.</li>
<li><code>logs</code> Directory for your app's log folder.</li>
<li><code>pepperFlashSystemPlugin</code>  Full path to the system version of the Pepper Flash plugin.</li>
</ul>
<h3 id="appgetfileiconpath-options-callback"><a href="#appgetfileiconpath-options-callback"><code>app.getFileIcon(path[, options], callback)</code></a><a class="header-link" href="#appgetfileiconpath-options-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>path</code> String</li>
<li>
<p><code>options</code> Object (optional)</p>
<ul>
<li>
<p><code>size</code> String</p>
<ul>
<li><code>small</code> - 16x16</li>
<li><code>normal</code> - 32x32</li>
<li><code>large</code> - 48x48 on <em class="platform-label">Linux</em>, 32x32 on <em class="platform-label">Windows</em>, unsupported on <em class="platform-label">macOS</em>.</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>error</code> Error</li>
<li><code>icon</code> <a href="https://electronjs.org/docs/api/native-image">NativeImage</a></li>
</ul>
</li>
</ul>
<p>Fetches a path's associated icon.</p>
<p>On <em class="platform-label">Windows</em>, there a 2 kinds of icons:</p>
<ul>
<li>Icons associated with certain file extensions, like <code>.mp3</code>, <code>.png</code>, etc.</li>
<li>Icons inside the file itself, like <code>.exe</code>, <code>.dll</code>, <code>.ico</code>.</li>
</ul>
<p>On <em class="platform-label">Linux</em> and <em class="platform-label">macOS</em>, icons depend on the application associated with file
mime type.</p>
<h3 id="appsetpathname-path"><a href="#appsetpathname-path"><code>app.setPath(name, path)</code></a><a class="header-link" href="#appsetpathname-path" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>name</code> String</li>
<li><code>path</code> String</li>
</ul>
<p>Overrides the <code>path</code> to a special directory or file associated with <code>name</code>. If
the path specifies a directory that does not exist, the directory will be
created by this method. On failure an <code>Error</code> is thrown.</p>
<p>You can only override paths of a <code>name</code> defined in <code>app.getPath</code>.</p>
<p>By default, web pages' cookies and caches will be stored under the <code>userData</code>
directory. If you want to change this location, you have to override the
<code>userData</code> path before the <code>ready</code> event of the <code>app</code> module is emitted.</p>
<h3 id="appgetversion"><a href="#appgetversion"><code>app.getVersion()</code></a><a class="header-link" href="#appgetversion" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>String</code> - The version of the loaded application. If no version is found in the
application's <code>package.json</code> file, the version of the current bundle or
executable is returned.</p>
<h3 id="appgetname"><a href="#appgetname"><code>app.getName()</code></a><a class="header-link" href="#appgetname" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>String</code> - The current application's name, which is the name in the application's
<code>package.json</code> file.</p>
<p>Usually the <code>name</code> field of <code>package.json</code> is a short lowercased name, according
to the npm modules spec. You should usually also specify a <code>productName</code>
field, which is your application's full capitalized name, and which will be
preferred over <code>name</code> by Electron.</p>
<h3 id="appsetnamename"><a href="#appsetnamename"><code>app.setName(name)</code></a><a class="header-link" href="#appsetnamename" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>name</code> String</li>
</ul>
<p>Overrides the current application's name.</p>
<h3 id="appgetlocale"><a href="#appgetlocale"><code>app.getLocale()</code></a><a class="header-link" href="#appgetlocale" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>String</code> - The current application locale. Possible return values are documented
<a href="https://electronjs.org/docs/api/locales">here</a>.</p>
<p><strong>Note:</strong> When distributing your packaged app, you have to also ship the
<code>locales</code> folder.</p>
<p><strong>Note:</strong> On Windows you have to call it after the <code>ready</code> events gets emitted.</p>
<h3 id="appaddrecentdocumentpath-macos-windows"><a href="#appaddrecentdocumentpath-macos-windows"><code>app.addRecentDocument(path)</code> <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#appaddrecentdocumentpath-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>path</code> String</li>
</ul>
<p>Adds <code>path</code> to the recent documents list.</p>
<p>This list is managed by the OS. On Windows you can visit the list from the task
bar, and on macOS you can visit it from dock menu.</p>
<h3 id="appclearrecentdocuments-macos-windows"><a href="#appclearrecentdocuments-macos-windows"><code>app.clearRecentDocuments()</code> <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#appclearrecentdocuments-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Clears the recent documents list.</p>
<h3 id="appsetasdefaultprotocolclientprotocol-path-args"><a href="#appsetasdefaultprotocolclientprotocol-path-args"><code>app.setAsDefaultProtocolClient(protocol[, path, args])</code></a><a class="header-link" href="#appsetasdefaultprotocolclientprotocol-path-args" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>protocol</code> String - The name of your protocol, without <code>://</code>. If you want your
app to handle <code>electron://</code> links, call this method with <code>electron</code> as the
parameter.</li>
<li><code>path</code> String (optional) <em class="platform-label">Windows</em> - Defaults to <code>process.execPath</code></li>
<li><code>args</code> String<a href="https://electronjs.org/docs/api/optional"></a> <em class="platform-label">Windows</em> - Defaults to an empty array</li>
</ul>
<p>Returns <code>Boolean</code> - Whether the call succeeded.</p>
<p>This method sets the current executable as the default handler for a protocol
(aka URI scheme). It allows you to integrate your app deeper into the operating
system. Once registered, all links with <code>your-protocol://</code> will be opened with
the current executable. The whole link, including protocol, will be passed to
your application as a parameter.</p>
<p>On Windows you can provide optional parameters path, the path to your executable,
and args, an array of arguments to be passed to your executable when it launches.</p>
<p><strong>Note:</strong> On macOS, you can only register protocols that have been added to
your app's <code>info.plist</code>, which can not be modified at runtime. You can however
change the file with a simple text editor or script during build time.
Please refer to <a href="https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/TP40009249-102207-TPXREF115">Apple's documentation</a> for details.</p>
<p>The API uses the Windows Registry and LSSetDefaultHandlerForURLScheme internally.</p>
<h3 id="appremoveasdefaultprotocolclientprotocol-path-args-macos-windows"><a href="#appremoveasdefaultprotocolclientprotocol-path-args-macos-windows"><code>app.removeAsDefaultProtocolClient(protocol[, path, args])</code> <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#appremoveasdefaultprotocolclientprotocol-path-args-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>protocol</code> String - The name of your protocol, without <code>://</code>.</li>
<li><code>path</code> String (optional) <em class="platform-label">Windows</em> - Defaults to <code>process.execPath</code></li>
<li><code>args</code> String<a href="https://electronjs.org/docs/api/optional"></a> <em class="platform-label">Windows</em> - Defaults to an empty array</li>
</ul>
<p>Returns <code>Boolean</code> - Whether the call succeeded.</p>
<p>This method checks if the current executable as the default handler for a
protocol (aka URI scheme). If so, it will remove the app as the default handler.</p>
<h3 id="appisdefaultprotocolclientprotocol-path-args-macos-windows"><a href="#appisdefaultprotocolclientprotocol-path-args-macos-windows"><code>app.isDefaultProtocolClient(protocol[, path, args])</code> <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#appisdefaultprotocolclientprotocol-path-args-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>protocol</code> String - The name of your protocol, without <code>://</code>.</li>
<li><code>path</code> String (optional) <em class="platform-label">Windows</em> - Defaults to <code>process.execPath</code></li>
<li><code>args</code> String<a href="https://electronjs.org/docs/api/optional"></a> <em class="platform-label">Windows</em> - Defaults to an empty array</li>
</ul>
<p>Returns <code>Boolean</code></p>
<p>This method checks if the current executable is the default handler for a protocol
(aka URI scheme). If so, it will return true. Otherwise, it will return false.</p>
<p><strong>Note:</strong> On macOS, you can use this method to check if the app has been
registered as the default protocol handler for a protocol. You can also verify
this by checking <code>~/Library/Preferences/com.apple.LaunchServices.plist</code> on the
macOS machine. Please refer to
<a href="https://developer.apple.com/library/mac/documentation/Carbon/Reference/LaunchServicesReference/#//apple_ref/c/func/LSCopyDefaultHandlerForURLScheme">Apple's documentation</a> for details.</p>
<p>The API uses the Windows Registry and LSCopyDefaultHandlerForURLScheme internally.</p>
<h3 id="appsetusertaskstasks-windows"><a href="#appsetusertaskstasks-windows"><code>app.setUserTasks(tasks)</code> <em class="platform-label">Windows</em></a><a class="header-link" href="#appsetusertaskstasks-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>tasks</code> <a href="https://electronjs.org/docs/api/structures/task">Task[]</a> - Array of <code>Task</code> objects</li>
</ul>
<p>Adds <code>tasks</code> to the <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd378460(v=vs.85).aspx#tasks">Tasks</a> category of the JumpList on Windows.</p>
<p><code>tasks</code> is an array of <a href="https://electronjs.org/docs/api/structures/task"><code>Task</code></a> objects.</p>
<p>Returns <code>Boolean</code> - Whether the call succeeded.</p>
<p><strong>Note:</strong> If you'd like to customize the Jump List even more use
<code>app.setJumpList(categories)</code> instead.</p>
<h3 id="appgetjumplistsettings-windows"><a href="#appgetjumplistsettings-windows"><code>app.getJumpListSettings()</code> <em class="platform-label">Windows</em></a><a class="header-link" href="#appgetjumplistsettings-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Object</code>:</p>
<ul>
<li><code>minItems</code> Integer - The minimum number of items that will be shown in the
Jump List (for a more detailed description of this value see the
<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd378398(v=vs.85).aspx">MSDN docs</a>).</li>
<li><code>removedItems</code> <a href="https://electronjs.org/docs/api/structures/jump-list-item">JumpListItem[]</a> - Array of <code>JumpListItem</code> objects that correspond to
items that the user has explicitly removed from custom categories in the
Jump List. These items must not be re-added to the Jump List in the <strong>next</strong>
call to <code>app.setJumpList()</code>, Windows will not display any custom category
that contains any of the removed items.</li>
</ul>
<h3 id="appsetjumplistcategories-windows"><a href="#appsetjumplistcategories-windows"><code>app.setJumpList(categories)</code> <em class="platform-label">Windows</em></a><a class="header-link" href="#appsetjumplistcategories-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>categories</code> <a href="https://electronjs.org/docs/api/structures/jump-list-category">JumpListCategory[]</a> or <code>null</code> - Array of <code>JumpListCategory</code> objects.</li>
</ul>
<p>Sets or removes a custom Jump List for the application, and returns one of the
following strings:</p>
<ul>
<li><code>ok</code> - Nothing went wrong.</li>
<li><code>error</code> - One or more errors occurred, enable runtime logging to figure out
the likely cause.</li>
<li><code>invalidSeparatorError</code> - An attempt was made to add a separator to a
custom category in the Jump List. Separators are only allowed in the
standard <code>Tasks</code> category.</li>
<li><code>fileTypeRegistrationError</code> - An attempt was made to add a file link to
the Jump List for a file type the app isn't registered to handle.</li>
<li><code>customCategoryAccessDeniedError</code> - Custom categories can't be added to the
Jump List due to user privacy or group policy settings.</li>
</ul>
<p>If <code>categories</code> is <code>null</code> the previously set custom Jump List (if any) will be
replaced by the standard Jump List for the app (managed by Windows).</p>
<p><strong>Note:</strong> If a <code>JumpListCategory</code> object has neither the <code>type</code> nor the <code>name</code>
property set then its <code>type</code> is assumed to be <code>tasks</code>. If the <code>name</code> property
is set but the <code>type</code> property is omitted then the <code>type</code> is assumed to be
<code>custom</code>.</p>
<p><strong>Note:</strong> Users can remove items from custom categories, and Windows will not
allow a removed item to be added back into a custom category until <strong>after</strong>
the next successful call to <code>app.setJumpList(categories)</code>. Any attempt to
re-add a removed item to a custom category earlier than that will result in the
entire custom category being omitted from the Jump List. The list of removed
items can be obtained using <code>app.getJumpListSettings()</code>.</p>
<p>Here's a very simple example of creating a custom Jump List:</p>
<pre><code class="hljs language-javascript" id="_dx9ukkt"><span class="hljs-keyword">const</span> {app} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

app.setJumpList([
  {
    <span class="hljs-attr">type</span>: <span class="hljs-string">'custom'</span>,
    <span class="hljs-attr">name</span>: <span class="hljs-string">'Recent Projects'</span>,
    <span class="hljs-attr">items</span>: [
      { <span class="hljs-attr">type</span>: <span class="hljs-string">'file'</span>, <span class="hljs-attr">path</span>: <span class="hljs-string">'C:\\Projects\\project1.proj'</span> },
      { <span class="hljs-attr">type</span>: <span class="hljs-string">'file'</span>, <span class="hljs-attr">path</span>: <span class="hljs-string">'C:\\Projects\\project2.proj'</span> }
    ]
  },
  { <span class="hljs-comment">// has a name so `type` is assumed to be "custom"</span>
    name: <span class="hljs-string">'Tools'</span>,
    <span class="hljs-attr">items</span>: [
      {
        <span class="hljs-attr">type</span>: <span class="hljs-string">'task'</span>,
        <span class="hljs-attr">title</span>: <span class="hljs-string">'Tool A'</span>,
        <span class="hljs-attr">program</span>: process.execPath,
        <span class="hljs-attr">args</span>: <span class="hljs-string">'--run-tool-a'</span>,
        <span class="hljs-attr">icon</span>: process.execPath,
        <span class="hljs-attr">iconIndex</span>: <span class="hljs-number">0</span>,
        <span class="hljs-attr">description</span>: <span class="hljs-string">'Runs Tool A'</span>
      },
      {
        <span class="hljs-attr">type</span>: <span class="hljs-string">'task'</span>,
        <span class="hljs-attr">title</span>: <span class="hljs-string">'Tool B'</span>,
        <span class="hljs-attr">program</span>: process.execPath,
        <span class="hljs-attr">args</span>: <span class="hljs-string">'--run-tool-b'</span>,
        <span class="hljs-attr">icon</span>: process.execPath,
        <span class="hljs-attr">iconIndex</span>: <span class="hljs-number">0</span>,
        <span class="hljs-attr">description</span>: <span class="hljs-string">'Runs Tool B'</span>
      }
    ]
  },
  { <span class="hljs-attr">type</span>: <span class="hljs-string">'frequent'</span> },
  { <span class="hljs-comment">// has no name and no type so `type` is assumed to be "tasks"</span>
    items: [
      {
        <span class="hljs-attr">type</span>: <span class="hljs-string">'task'</span>,
        <span class="hljs-attr">title</span>: <span class="hljs-string">'New Project'</span>,
        <span class="hljs-attr">program</span>: process.execPath,
        <span class="hljs-attr">args</span>: <span class="hljs-string">'--new-project'</span>,
        <span class="hljs-attr">description</span>: <span class="hljs-string">'Create a new project.'</span>
      },
      { <span class="hljs-attr">type</span>: <span class="hljs-string">'separator'</span> },
      {
        <span class="hljs-attr">type</span>: <span class="hljs-string">'task'</span>,
        <span class="hljs-attr">title</span>: <span class="hljs-string">'Recover Project'</span>,
        <span class="hljs-attr">program</span>: process.execPath,
        <span class="hljs-attr">args</span>: <span class="hljs-string">'--recover-project'</span>,
        <span class="hljs-attr">description</span>: <span class="hljs-string">'Recover Project'</span>
      }
    ]
  }
])</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_dx9ukkt">Copy</button></pre>
<h3 id="appmakesingleinstancecallback"><a href="#appmakesingleinstancecallback"><code>app.makeSingleInstance(callback)</code></a><a class="header-link" href="#appmakesingleinstancecallback" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>argv</code> String[] - An array of the second instance's command line arguments</li>
<li><code>workingDirectory</code> String - The second instance's working directory</li>
</ul>
</li>
</ul>
<p>Returns <code>Boolean</code>.</p>
<p>This method makes your application a Single Instance Application - instead of
allowing multiple instances of your app to run, this will ensure that only a
single instance of your app is running, and other instances signal this
instance and exit.</p>
<p><code>callback</code> will be called by the first instance with <code>callback(argv, workingDirectory)</code>
when a second instance has been executed. <code>argv</code> is an Array of the second instance's
command line arguments, and <code>workingDirectory</code> is its current working directory. Usually
applications respond to this by making their primary window focused and
non-minimized.</p>
<p>The <code>callback</code> is guaranteed to be executed after the <code>ready</code> event of <code>app</code>
gets emitted.</p>
<p>This method returns <code>false</code> if your process is the primary instance of the
application and your app should continue loading. And returns <code>true</code> if your
process has sent its parameters to another instance, and you should immediately
quit.</p>
<p>On macOS the system enforces single instance automatically when users try to open
a second instance of your app in Finder, and the <code>open-file</code> and <code>open-url</code>
events will be emitted for that. However when users start your app in command
line the system's single instance mechanism will be bypassed and you have to
use this method to ensure single instance.</p>
<p>An example of activating the window of primary instance when a second instance
starts:</p>
<pre><code class="hljs language-javascript" id="_emj54gbd"><span class="hljs-keyword">const</span> {app} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> myWindow = <span class="hljs-literal">null</span>

<span class="hljs-keyword">const</span> isSecondInstance = app.makeSingleInstance(<span class="hljs-function">(<span class="hljs-params">commandLine, workingDirectory</span>) =&gt;</span> {
  <span class="hljs-comment">// Someone tried to run a second instance, we should focus our window.</span>
  <span class="hljs-keyword">if</span> (myWindow) {
    <span class="hljs-keyword">if</span> (myWindow.isMinimized()) myWindow.restore()
    myWindow.focus()
  }
})

<span class="hljs-keyword">if</span> (isSecondInstance) {
  app.quit()
}

<span class="hljs-comment">// Create myWindow, load the rest of the app, etc...</span>
app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_emj54gbd">Copy</button></pre>
<h3 id="appreleasesingleinstance"><a href="#appreleasesingleinstance"><code>app.releaseSingleInstance()</code></a><a class="header-link" href="#appreleasesingleinstance" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Releases all locks that were created by <code>makeSingleInstance</code>. This will allow
multiple instances of the application to once again run side by side.</p>
<h3 id="appsetuseractivitytype-userinfo-webpageurl-macos"><a href="#appsetuseractivitytype-userinfo-webpageurl-macos"><code>app.setUserActivity(type, userInfo[, webpageURL])</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#appsetuseractivitytype-userinfo-webpageurl-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>type</code> String - Uniquely identifies the activity. Maps to
<a href="https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSUserActivity_Class/index.html#//apple_ref/occ/instp/NSUserActivity/activityType"><code>NSUserActivity.activityType</code></a>.</li>
<li><code>userInfo</code> Object - App-specific state to store for use by another device.</li>
<li><code>webpageURL</code> String (optional) - The webpage to load in a browser if no suitable app is
installed on the resuming device. The scheme must be <code>http</code> or <code>https</code>.</li>
</ul>
<p>Creates an <code>NSUserActivity</code> and sets it as the current activity. The activity
is eligible for <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Handoff/HandoffFundamentals/HandoffFundamentals.html">Handoff</a> to another device afterward.</p>
<h3 id="appgetcurrentactivitytype-macos"><a href="#appgetcurrentactivitytype-macos"><code>app.getCurrentActivityType()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#appgetcurrentactivitytype-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>String</code> - The type of the currently running activity.</p>
<h3 id="appinvalidatecurrentactivity-macos"><a href="#appinvalidatecurrentactivity-macos"><code>app.invalidateCurrentActivity()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#appinvalidatecurrentactivity-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>type</code> String - Uniquely identifies the activity. Maps to
<a href="https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSUserActivity_Class/index.html#//apple_ref/occ/instp/NSUserActivity/activityType"><code>NSUserActivity.activityType</code></a>.</li>
</ul>
<p>Invalidates the current <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Handoff/HandoffFundamentals/HandoffFundamentals.html">Handoff</a> user activity.</p>
<h3 id="appupdatecurrentactivitytype-userinfo-macos"><a href="#appupdatecurrentactivitytype-userinfo-macos"><code>app.updateCurrentActivity(type, userInfo)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#appupdatecurrentactivitytype-userinfo-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>type</code> String - Uniquely identifies the activity. Maps to
<a href="https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSUserActivity_Class/index.html#//apple_ref/occ/instp/NSUserActivity/activityType"><code>NSUserActivity.activityType</code></a>.</li>
<li><code>userInfo</code> Object - App-specific state to store for use by another device.</li>
</ul>
<p>Updates the current activity if its type matches <code>type</code>, merging the entries from
<code>userInfo</code> into its current <code>userInfo</code> dictionary.</p>
<h3 id="appsetappusermodelidid-windows"><a href="#appsetappusermodelidid-windows"><code>app.setAppUserModelId(id)</code> <em class="platform-label">Windows</em></a><a class="header-link" href="#appsetappusermodelidid-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>id</code> String</li>
</ul>
<p>Changes the <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx">Application User Model ID</a> to <code>id</code>.</p>
<h3 id="appimportcertificateoptions-callback-linux"><a href="#appimportcertificateoptions-callback-linux"><code>app.importCertificate(options, callback)</code> <em>LINUX</em></a><a class="header-link" href="#appimportcertificateoptions-callback-linux" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>certificate</code> String - Path for the pkcs12 file.</li>
<li><code>password</code> String - Passphrase for the certificate.</li>
</ul>
</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>result</code> Integer - Result of import.</li>
</ul>
</li>
</ul>
<p>Imports the certificate in pkcs12 format into the platform certificate store.
<code>callback</code> is called with the <code>result</code> of import operation, a value of <code>0</code>
indicates success while any other value indicates failure according to chromium <a href="https://code.google.com/p/chromium/codesearch#chromium/src/net/base/net_error_list.h">net_error_list</a>.</p>
<h3 id="appdisablehardwareacceleration"><a href="#appdisablehardwareacceleration"><code>app.disableHardwareAcceleration()</code></a><a class="header-link" href="#appdisablehardwareacceleration" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Disables hardware acceleration for current app.</p>
<p>This method can only be called before app is ready.</p>
<h3 id="appdisabledomainblockingfor3dapis"><a href="#appdisabledomainblockingfor3dapis"><code>app.disableDomainBlockingFor3DAPIs()</code></a><a class="header-link" href="#appdisabledomainblockingfor3dapis" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>By default, Chromium disables 3D APIs (e.g. WebGL) until restart on a per
domain basis if the GPU processes crashes too frequently. This function
disables that behaviour.</p>
<p>This method can only be called before app is ready.</p>
<h3 id="appgetappmemoryinfo-deprecated"><a href="#appgetappmemoryinfo-deprecated"><code>app.getAppMemoryInfo()</code> <em>Deprecated</em></a><a class="header-link" href="#appgetappmemoryinfo-deprecated" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <a href="https://electronjs.org/docs/api/structures/process-metric"><code>ProcessMetric[]</code></a>:  Array of <code>ProcessMetric</code> objects that correspond to memory and cpu usage statistics of all the processes associated with the app.
<strong>Note:</strong> This method is deprecated, use <code>app.getAppMetrics()</code> instead.</p>
<h3 id="appgetappmetrics"><a href="#appgetappmetrics"><code>app.getAppMetrics()</code></a><a class="header-link" href="#appgetappmetrics" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <a href="https://electronjs.org/docs/api/structures/process-metric"><code>ProcessMetric[]</code></a>:  Array of <code>ProcessMetric</code> objects that correspond to memory and cpu usage statistics of all the processes associated with the app.</p>
<h3 id="appgetgpufeaturestatus"><a href="#appgetgpufeaturestatus"><code>app.getGPUFeatureStatus()</code></a><a class="header-link" href="#appgetgpufeaturestatus" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <a href="https://electronjs.org/docs/api/structures/gpu-feature-status"><code>GPUFeatureStatus</code></a> - The Graphics Feature Status from <code>chrome://gpu/</code>.</p>
<h3 id="appsetbadgecountcount-linux-macos"><a href="#appsetbadgecountcount-linux-macos"><code>app.setBadgeCount(count)</code> <em class="platform-label">Linux</em> <em class="platform-label">macOS</em></a><a class="header-link" href="#appsetbadgecountcount-linux-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>count</code> Integer</li>
</ul>
<p>Returns <code>Boolean</code> - Whether the call succeeded.</p>
<p>Sets the counter badge for current app. Setting the count to <code>0</code> will hide the
badge.</p>
<p>On macOS it shows on the dock icon. On Linux it only works for Unity launcher,</p>
<p><strong>Note:</strong> Unity launcher requires the existence of a <code>.desktop</code> file to work,
for more information please read <a href="https://electronjs.org/docs/tutorial/desktop-environment-integration#unity-launcher-shortcuts-linux">Desktop Environment Integration</a>.</p>
<h3 id="appgetbadgecount-linux-macos"><a href="#appgetbadgecount-linux-macos"><code>app.getBadgeCount()</code> <em class="platform-label">Linux</em> <em class="platform-label">macOS</em></a><a class="header-link" href="#appgetbadgecount-linux-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Integer</code> - The current value displayed in the counter badge.</p>
<h3 id="appisunityrunning-linux"><a href="#appisunityrunning-linux"><code>app.isUnityRunning()</code> <em class="platform-label">Linux</em></a><a class="header-link" href="#appisunityrunning-linux" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Boolean</code> - Whether the current desktop environment is Unity launcher.</p>
<h3 id="appgetloginitemsettingsoptions-macos-windows"><a href="#appgetloginitemsettingsoptions-macos-windows"><code>app.getLoginItemSettings([options])</code> <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#appgetloginitemsettingsoptions-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>options</code> Object (optional)</p>
<ul>
<li><code>path</code> String (optional) <em class="platform-label">Windows</em> - The executable path to compare against.
Defaults to <code>process.execPath</code>.</li>
<li><code>args</code> String<a href="https://electronjs.org/docs/api/optional"></a> <em class="platform-label">Windows</em> - The command-line arguments to compare
against. Defaults to an empty array.</li>
</ul>
</li>
</ul>
<p>If you provided <code>path</code> and <code>args</code> options to <code>app.setLoginItemSettings</code> then you
need to pass the same arguments here for <code>openAtLogin</code> to be set correctly.</p>
<p>Returns <code>Object</code>:</p>
<ul>
<li><code>openAtLogin</code> Boolean - <code>true</code> if the app is set to open at login.</li>
<li><code>openAsHidden</code> Boolean - <code>true</code> if the app is set to open as hidden at login.
This setting is only supported on macOS.</li>
<li><code>wasOpenedAtLogin</code> Boolean - <code>true</code> if the app was opened at login
automatically. This setting is only supported on macOS.</li>
<li><code>wasOpenedAsHidden</code> Boolean - <code>true</code> if the app was opened as a hidden login
item. This indicates that the app should not open any windows at startup.
This setting is only supported on macOS.</li>
<li><code>restoreState</code> Boolean - <code>true</code> if the app was opened as a login item that
should restore the state from the previous session. This indicates that the
app should restore the windows that were open the last time the app was
closed. This setting is only supported on macOS.</li>
</ul>
<p><strong>Note:</strong> This API has no effect on <a href="https://electronjs.org/docs/tutorial/mac-app-store-submission-guide">MAS builds</a>.</p>
<h3 id="appsetloginitemsettingssettings-macos-windows"><a href="#appsetloginitemsettingssettings-macos-windows"><code>app.setLoginItemSettings(settings)</code> <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#appsetloginitemsettingssettings-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>settings</code> Object</p>
<ul>
<li><code>openAtLogin</code> Boolean (optional) - <code>true</code> to open the app at login, <code>false</code> to remove
the app as a login item. Defaults to <code>false</code>.</li>
<li><code>openAsHidden</code> Boolean (optional) - <code>true</code> to open the app as hidden. Defaults to
<code>false</code>. The user can edit this setting from the System Preferences so
<code>app.getLoginItemStatus().wasOpenedAsHidden</code> should be checked when the app
is opened to know the current value. This setting is only supported on
macOS.</li>
<li><code>path</code> String (optional) <em class="platform-label">Windows</em> - The executable to launch at login.
Defaults to <code>process.execPath</code>.</li>
<li><code>args</code> String<a href="https://electronjs.org/docs/api/optional"></a> <em class="platform-label">Windows</em> - The command-line arguments to pass to
the executable. Defaults to an empty array. Take care to wrap paths in
quotes.</li>
</ul>
</li>
</ul>
<p>Set the app's login item settings.</p>
<p>To work with Electron's <code>autoUpdater</code> on Windows, which uses <a href="https://github.com/Squirrel/Squirrel.Windows">Squirrel</a>,
you'll want to set the launch path to Update.exe, and pass arguments that specify your
application name. For example:</p>
<pre><code class="hljs language-javascript" id="_4io23qat"><span class="hljs-keyword">const</span> appFolder = path.dirname(process.execPath)
<span class="hljs-keyword">const</span> updateExe = path.resolve(appFolder, <span class="hljs-string">'..'</span>, <span class="hljs-string">'Update.exe'</span>)
<span class="hljs-keyword">const</span> exeName = path.basename(process.execPath)

app.setLoginItemSettings({
  <span class="hljs-attr">openAtLogin</span>: <span class="hljs-literal">true</span>,
  <span class="hljs-attr">path</span>: updateExe,
  <span class="hljs-attr">args</span>: [
    <span class="hljs-string">'--processStart'</span>, <span class="hljs-string">`"<span class="hljs-subst">${exeName}</span>"`</span>,
    <span class="hljs-string">'--process-start-args'</span>, <span class="hljs-string">`"--hidden"`</span>
  ]
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_4io23qat">Copy</button></pre>
<p><strong>Note:</strong> This API has no effect on <a href="https://electronjs.org/docs/tutorial/mac-app-store-submission-guide">MAS builds</a>.</p>
<h3 id="appisaccessibilitysupportenabled-macos-windows"><a href="#appisaccessibilitysupportenabled-macos-windows"><code>app.isAccessibilitySupportEnabled()</code> <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#appisaccessibilitysupportenabled-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Boolean</code> - <code>true</code> if Chrome's accessibility support is enabled,
<code>false</code> otherwise. This API will return <code>true</code> if the use of assistive
technologies, such as screen readers, has been detected. See
<a href="https://www.chromium.org/developers/design-documents/accessibility">chromium.org/developers/design-documents/accessibility</a> for more
details.</p>
<h3 id="appsetaccessibilitysupportenabledenabled-macos-windows"><a href="#appsetaccessibilitysupportenabledenabled-macos-windows"><code>app.setAccessibilitySupportEnabled(enabled)</code> <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#appsetaccessibilitysupportenabledenabled-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>enabled</code> Boolean - Enable or disable <a href="https://developers.google.com/web/fundamentals/accessibility/semantics-builtin/the-accessibility-tree">accessibility tree</a> rendering</li>
</ul>
<p>Manually enables Chrome's accessibility support, allowing to expose accessibility switch to users in application settings. <a href="https://www.chromium.org/developers/design-documents/accessibility">chromium.org/developers/design-documents/accessibility</a> for more
details. Disabled by default.</p>
<p><strong>Note:</strong> Rendering accessibility tree can significantly affect the performance of your app. It should not be enabled by default.</p>
<h3 id="appsetaboutpaneloptionsoptions-macos"><a href="#appsetaboutpaneloptionsoptions-macos"><code>app.setAboutPanelOptions(options)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#appsetaboutpaneloptionsoptions-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>applicationName</code> String (optional) - The app's name.</li>
<li><code>applicationVersion</code> String (optional) - The app's version.</li>
<li><code>copyright</code> String (optional) - Copyright information.</li>
<li><code>credits</code> String (optional) - Credit information.</li>
<li><code>version</code> String (optional) - The app's build version number.</li>
</ul>
</li>
</ul>
<p>Set the about panel options. This will override the values defined in the app's
<code>.plist</code> file. See the <a href="https://developer.apple.com/reference/appkit/nsapplication/1428479-orderfrontstandardaboutpanelwith?language=objc">Apple docs</a> for more details.</p>
<h3 id="appcommandlineappendswitchswitch-value"><a href="#appcommandlineappendswitchswitch-value"><code>app.commandLine.appendSwitch(switch[, value])</code></a><a class="header-link" href="#appcommandlineappendswitchswitch-value" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>switch</code> String - A command-line switch</li>
<li><code>value</code> String (optional) - A value for the given switch</li>
</ul>
<p>Append a switch (with optional <code>value</code>) to Chromium's command line.</p>
<p><strong>Note:</strong> This will not affect <code>process.argv</code>, and is mainly used by developers
to control some low-level Chromium behaviors.</p>
<h3 id="appcommandlineappendargumentvalue"><a href="#appcommandlineappendargumentvalue"><code>app.commandLine.appendArgument(value)</code></a><a class="header-link" href="#appcommandlineappendargumentvalue" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>value</code> String - The argument to append to the command line</li>
</ul>
<p>Append an argument to Chromium's command line. The argument will be quoted
correctly.</p>
<p><strong>Note:</strong> This will not affect <code>process.argv</code>.</p>
<h3 id="appenablemixedsandbox-experimental-macos-windows"><a href="#appenablemixedsandbox-experimental-macos-windows"><code>app.enableMixedSandbox()</code> <em>Experimental</em> <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#appenablemixedsandbox-experimental-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Enables mixed sandbox mode on the app.</p>
<p>This method can only be called before app is ready.</p>
<h3 id="appisinapplicationsfolder-macos"><a href="#appisinapplicationsfolder-macos"><code>app.isInApplicationsFolder()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#appisinapplicationsfolder-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Boolean</code> - Whether the application is currently running from the
systems Application folder.  Use in combination with <code>app.moveToApplicationsFolder()</code></p>
<h3 id="appmovetoapplicationsfolder-macos"><a href="#appmovetoapplicationsfolder-macos"><code>app.moveToApplicationsFolder()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#appmovetoapplicationsfolder-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Boolean</code> - Whether the move was successful.  Please note that if
the move is successful your application will quit and relaunch.</p>
<p>No confirmation dialog will be presented by default, if you wish to allow
the user to confirm the operation you may do so using the
<a href="https://electronjs.org/docs/api/dialog"><code>dialog</code></a> API.</p>
<p><strong>NOTE:</strong> This method throws errors if anything other than the user causes the
move to fail.  For instance if the user cancels the authorization dialog this
method returns false.  If we fail to perform the copy then this method will
throw an error.  The message in the error should be informative and tell
you exactly what went wrong</p>
<h3 id="appdockbouncetype-macos"><a href="#appdockbouncetype-macos"><code>app.dock.bounce([type])</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#appdockbouncetype-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>type</code> String (optional) - Can be <code>critical</code> or <code>informational</code>. The default is
<code>informational</code></li>
</ul>
<p>When <code>critical</code> is passed, the dock icon will bounce until either the
application becomes active or the request is canceled.</p>
<p>When <code>informational</code> is passed, the dock icon will bounce for one second.
However, the request remains active until either the application becomes active
or the request is canceled.</p>
<p>Returns <code>Integer</code> an ID representing the request.</p>
<h3 id="appdockcancelbounceid-macos"><a href="#appdockcancelbounceid-macos"><code>app.dock.cancelBounce(id)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#appdockcancelbounceid-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>id</code> Integer</li>
</ul>
<p>Cancel the bounce of <code>id</code>.</p>
<h3 id="appdockdownloadfinishedfilepath-macos"><a href="#appdockdownloadfinishedfilepath-macos"><code>app.dock.downloadFinished(filePath)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#appdockdownloadfinishedfilepath-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>filePath</code> String</li>
</ul>
<p>Bounces the Downloads stack if the filePath is inside the Downloads folder.</p>
<h3 id="appdocksetbadgetext-macos"><a href="#appdocksetbadgetext-macos"><code>app.dock.setBadge(text)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#appdocksetbadgetext-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>text</code> String</li>
</ul>
<p>Sets the string to be displayed in the dock’s badging area.</p>
<h3 id="appdockgetbadge-macos"><a href="#appdockgetbadge-macos"><code>app.dock.getBadge()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#appdockgetbadge-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>String</code> - The badge string of the dock.</p>
<h3 id="appdockhide-macos"><a href="#appdockhide-macos"><code>app.dock.hide()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#appdockhide-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Hides the dock icon.</p>
<h3 id="appdockshow-macos"><a href="#appdockshow-macos"><code>app.dock.show()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#appdockshow-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Shows the dock icon.</p>
<h3 id="appdockisvisible-macos"><a href="#appdockisvisible-macos"><code>app.dock.isVisible()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#appdockisvisible-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Boolean</code> - Whether the dock icon is visible.
The <code>app.dock.show()</code> call is asynchronous so this method might not
return true immediately after that call.</p>
<h3 id="appdocksetmenumenu-macos"><a href="#appdocksetmenumenu-macos"><code>app.dock.setMenu(menu)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#appdocksetmenumenu-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>menu</code> <a href="https://electronjs.org/docs/api/menu">Menu</a></li>
</ul>
<p>Sets the application's <a href="https://developer.apple.com/library/mac/documentation/Carbon/Conceptual/customizing_docktile/concepts/dockconcepts.html#//apple_ref/doc/uid/TP30000986-CH2-TPXREF103">dock menu</a>.</p>
<h3 id="appdockseticonimage-macos"><a href="#appdockseticonimage-macos"><code>app.dock.setIcon(image)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#appdockseticonimage-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>image</code> (<a href="https://electronjs.org/docs/api/native-image">NativeImage</a> | String)</li>
</ul>
<p>Sets the <code>image</code> associated with this dock icon.</p>

  <hr>
  <h1 id="application-distribution"><a href="#application-distribution">Application Distribution</a><a class="header-link" href="#application-distribution" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>To distribute your app with Electron, you need to download Electron's <a href="https://github.com/electron/electron/releases">prebuilt
binaries</a>. Next, the folder
containing your app should be named <code>app</code> and placed in Electron's resources
directory as shown in the following examples. Note that the location of
Electron's prebuilt binaries is indicated with <code>electron/</code> in the examples
below.</p>
<p>On macOS:</p>
<pre><code class="hljs language-text" id="_mzmtu8k4">electron/Electron.app/Contents/Resources/app/
├── package<span class="hljs-selector-class">.json</span>
├── main<span class="hljs-selector-class">.js</span>
└── index.html</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_mzmtu8k4">Copy</button></pre>
<p>On Windows and Linux:</p>
<pre><code class="hljs language-text" id="_43n3qdgo">electron/resources/app
├── package<span class="hljs-selector-class">.json</span>
├── main<span class="hljs-selector-class">.js</span>
└── index.html</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_43n3qdgo">Copy</button></pre>
<p>Then execute <code>Electron.app</code> (or <code>electron</code> on Linux, <code>electron.exe</code> on Windows),
and Electron will start as your app. The <code>electron</code> directory will then be
your distribution to deliver to final users.</p>
<h2 id="packaging-your-app-into-a-file"><a href="#packaging-your-app-into-a-file">Packaging Your App into a File</a><a class="header-link" href="#packaging-your-app-into-a-file" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Apart from shipping your app by copying all of its source files, you can also
package your app into an <a href="https://github.com/electron/asar">asar</a> archive to avoid
exposing your app's source code to users.</p>
<p>To use an <code>asar</code> archive to replace the <code>app</code> folder, you need to rename the
archive to <code>app.asar</code>, and put it under Electron's resources directory like
below, and Electron will then try to read the archive and start from it.</p>
<p>On macOS:</p>
<pre><code class="hljs language-text" id="_osdxlym">electron<span class="hljs-regexp">/Electron.app/</span>Contents<span class="hljs-regexp">/Resources/</span>
└── app.asar</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_osdxlym">Copy</button></pre>
<p>On Windows and Linux:</p>
<pre><code class="hljs language-text" id="_k5vlvn4">electron<span class="hljs-regexp">/resources/</span>
└── app.asar</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_k5vlvn4">Copy</button></pre>
<p>More details can be found in <a href="https://electronjs.org/docs/tutorial/application-packaging">Application packaging</a>.</p>
<h2 id="rebranding-with-downloaded-binaries"><a href="#rebranding-with-downloaded-binaries">Rebranding with Downloaded Binaries</a><a class="header-link" href="#rebranding-with-downloaded-binaries" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>After bundling your app into Electron, you will want to rebrand Electron
before distributing it to users.</p>
<h3 id="windows"><a href="#windows">Windows</a><a class="header-link" href="#windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>You can rename <code>electron.exe</code> to any name you like, and edit its icon and other
information with tools like <a href="https://github.com/atom/rcedit">rcedit</a>.</p>
<h3 id="macos"><a href="#macos">macOS</a><a class="header-link" href="#macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>You can rename <code>Electron.app</code> to any name you want, and you also have to rename
the <code>CFBundleDisplayName</code>, <code>CFBundleIdentifier</code> and <code>CFBundleName</code> fields in the
following files:</p>
<ul>
<li><code>Electron.app/Contents/Info.plist</code></li>
<li><code>Electron.app/Contents/Frameworks/Electron Helper.app/Contents/Info.plist</code></li>
</ul>
<p>You can also rename the helper app to avoid showing <code>Electron Helper</code> in the
Activity Monitor, but make sure you have renamed the helper app's executable
file's name.</p>
<p>The structure of a renamed app would be like:</p>
<pre><code class="hljs language-text" id="_7axfrwvz">MyApp.app/Contents
├── <span class="hljs-keyword">Info</span>.plist
├── MacOS/
│&nbsp;&nbsp; └── MyApp
└── Frameworks/
    ├── MyApp Helper EH.app
    |   <span class="hljs-type">├── Info</span>.plist
    |   <span class="hljs-type">└── MacOS</span>/
    |    &nbsp;&nbsp; <span class="hljs-type">└── MyApp</span> Helper EH
    ├── MyApp Helper NP.app
    |   <span class="hljs-type">├── Info</span>.plist
    |   <span class="hljs-type">└── MacOS</span>/
    |    &nbsp;&nbsp; <span class="hljs-type">└── MyApp</span> Helper NP
    └── MyApp Helper.app
        ├── <span class="hljs-keyword">Info</span>.plist
        └── MacOS/
         &nbsp;&nbsp; └── MyApp Helper</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_7axfrwvz">Copy</button></pre>
<h3 id="linux"><a href="#linux">Linux</a><a class="header-link" href="#linux" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>You can rename the <code>electron</code> executable to any name you like.</p>
<h2 id="packaging-tools"><a href="#packaging-tools">Packaging Tools</a><a class="header-link" href="#packaging-tools" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Apart from packaging your app manually, you can also choose to use third party
packaging tools to do the work for you:</p>
<ul>
<li><a href="https://github.com/electron-userland/electron-forge">electron-forge</a></li>
<li><a href="https://github.com/electron-userland/electron-builder">electron-builder</a></li>
<li><a href="https://github.com/electron-userland/electron-packager">electron-packager</a></li>
</ul>
<h2 id="rebranding-by-rebuilding-electron-from-source"><a href="#rebranding-by-rebuilding-electron-from-source">Rebranding by Rebuilding Electron from Source</a><a class="header-link" href="#rebranding-by-rebuilding-electron-from-source" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>It is also possible to rebrand Electron by changing the product name and
building it from source. To do this you need to modify the <code>atom.gyp</code> file and
have a clean rebuild.</p>
<h3 id="creating-a-custom-electron-fork"><a href="#creating-a-custom-electron-fork">Creating a Custom Electron Fork</a><a class="header-link" href="#creating-a-custom-electron-fork" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Creating a custom fork of Electron is almost certainly not something you will
need to do in order to build your app, even for "Production Level" applications.
Using a tool such as <code>electron-packager</code> or <code>electron-forge</code> will allow you to
"Rebrand" Electron without having to do these steps.</p>
<p>You need to fork Electron when you have custom C++ code that you have patched
directly into Electron, that either cannot be upstreamed, or has been rejected
from the official version. As maintainers of Electron, we very much would like
to make your scenario work, so please try as hard as you can to get your changes
into the official version of Electron, it will be much much easier on you, and
we appreciate your help.</p>
<h4 id="creating-a-custom-release-with-surf-build"><a href="#creating-a-custom-release-with-surf-build">Creating a Custom Release with surf-build</a><a class="header-link" href="#creating-a-custom-release-with-surf-build" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ol>
<li>
<p>Install <a href="https://github.com/surf-build/surf">Surf</a>, via npm:
<code>npm install -g surf-build@latest</code></p>
</li>
<li>
<p>Create a new S3 bucket and create the following empty directory structure:</p>
<pre><code class="hljs language-sh" id="_25zuiucj">- atom-shell/
  - symbols/
  - dist/</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_25zuiucj">Copy</button></pre>
</li>
<li>
<p>Set the following Environment Variables:</p>
</li>
</ol>
<ul>
<li><code>ELECTRON_GITHUB_TOKEN</code> - a token that can create releases on GitHub</li>
<li><code>ELECTRON_S3_ACCESS_KEY</code>, <code>ELECTRON_S3_BUCKET</code>, <code>ELECTRON_S3_SECRET_KEY</code> -
the place where you'll upload node.js headers as well as symbols</li>
<li><code>ELECTRON_RELEASE</code> - Set to <code>true</code> and the upload part will run, leave unset
and <code>surf-build</code> will just do CI-type checks, appropriate to run for every
pull request.</li>
<li><code>CI</code> - Set to <code>true</code> or else it will fail</li>
<li><code>GITHUB_TOKEN</code> - set it to the same as <code>ELECTRON_GITHUB_TOKEN</code></li>
<li><code>SURF_TEMP</code> - set to <code>C:\Temp</code> on Windows to prevent path too long issues</li>
<li><code>TARGET_ARCH</code> - set to <code>ia32</code> or <code>x64</code></li>
</ul>
<ol start="4">
<li>
<p>In <code>script/upload.py</code>, you <em>must</em> set <code>ELECTRON_REPO</code> to your fork (<code>MYORG/electron</code>),
especially if you are a contributor to Electron proper.</p>
</li>
<li>
<p><code>surf-build -r https://github.com/MYORG/electron -s YOUR_COMMIT -n 'surf-PLATFORM-ARCH'</code></p>
</li>
<li>
<p>Wait a very, very long time for the build to complete.</p>
</li>
</ol>

  <hr>
  <h1 id="application-packaging"><a href="#application-packaging">Application Packaging</a><a class="header-link" href="#application-packaging" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>To mitigate <a href="https://github.com/joyent/node/issues/6960">issues</a> around long
path names on Windows, slightly speed up <code>require</code> and conceal your source code
from cursory inspection, you can choose to package your app into an <a href="https://github.com/electron/asar">asar</a>
archive with little changes to your source code.</p>
<h2 id="generating-asar-archive"><a href="#generating-asar-archive">Generating <code>asar</code> Archive</a><a class="header-link" href="#generating-asar-archive" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>An <a href="https://github.com/electron/asar">asar</a> archive is a simple tar-like format that concatenates files
into a single file. Electron can read arbitrary files from it without unpacking
the whole file.</p>
<p>Steps to package your app into an <code>asar</code> archive:</p>
<h3 id="1-install-the-asar-utility"><a href="#1-install-the-asar-utility">1. Install the asar Utility</a><a class="header-link" href="#1-install-the-asar-utility" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-sh" id="_bpmwfwhh">$ npm install -g asar</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_bpmwfwhh">Copy</button></pre>
<h3 id="2-package-with-asar-pack"><a href="#2-package-with-asar-pack">2. Package with <code>asar pack</code></a><a class="header-link" href="#2-package-with-asar-pack" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-sh" id="_n15i5zw5">$ asar pack your-app app.asar</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_n15i5zw5">Copy</button></pre>
<h2 id="using-asar-archives"><a href="#using-asar-archives">Using <code>asar</code> Archives</a><a class="header-link" href="#using-asar-archives" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>In Electron there are two sets of APIs: Node APIs provided by Node.js and Web
APIs provided by Chromium. Both APIs support reading files from <code>asar</code> archives.</p>
<h3 id="node-api"><a href="#node-api">Node API</a><a class="header-link" href="#node-api" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>With special patches in Electron, Node APIs like <code>fs.readFile</code> and <code>require</code>
treat <code>asar</code> archives as virtual directories, and the files in it as normal
files in the filesystem.</p>
<p>For example, suppose we have an <code>example.asar</code> archive under <code>/path/to</code>:</p>
<pre><code class="hljs language-sh" id="_4xe8boyc">$ asar list /path/to/example.asar
/app.js
/file.txt
/dir/module.js
/static/index.html
/static/main.css
/static/jquery.min.js</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_4xe8boyc">Copy</button></pre>
<p>Read a file in the <code>asar</code> archive:</p>
<pre><code class="hljs language-javascript" id="_190n5heb"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>)
fs.readFileSync(<span class="hljs-string">'/path/to/example.asar/file.txt'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_190n5heb">Copy</button></pre>
<p>List all files under the root of the archive:</p>
<pre><code class="hljs language-javascript" id="_s24tt9bf"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>)
fs.readdirSync(<span class="hljs-string">'/path/to/example.asar'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_s24tt9bf">Copy</button></pre>
<p>Use a module from the archive:</p>
<pre><code class="hljs language-javascript" id="_5hu2hear"><span class="hljs-built_in">require</span>(<span class="hljs-string">'/path/to/example.asar/dir/module.js'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_5hu2hear">Copy</button></pre>
<p>You can also display a web page in an <code>asar</code> archive with <code>BrowserWindow</code>:</p>
<pre><code class="hljs language-javascript" id="_xig79h5s"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">width</span>: <span class="hljs-number">800</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">600</span>})
win.loadURL(<span class="hljs-string">'file:///path/to/example.asar/static/index.html'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_xig79h5s">Copy</button></pre>
<h3 id="web-api"><a href="#web-api">Web API</a><a class="header-link" href="#web-api" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>In a web page, files in an archive can be requested with the <code>file:</code> protocol.
Like the Node API, <code>asar</code> archives are treated as directories.</p>
<p>For example, to get a file with <code>$.get</code>:</p>
<pre><code class="hljs language-html" id="_m06gm07i"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">let</span> $ = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./jquery.min.js'</span>)
$.get(<span class="hljs-string">'file:///path/to/example.asar/file.txt'</span>, (data) =&gt; {
  <span class="hljs-built_in">console</span>.log(data)
})
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_m06gm07i">Copy</button></pre>
<h3 id="treating-an-asar-archive-as-a-normal-file"><a href="#treating-an-asar-archive-as-a-normal-file">Treating an <code>asar</code> Archive as a Normal File</a><a class="header-link" href="#treating-an-asar-archive-as-a-normal-file" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>For some cases like verifying the <code>asar</code> archive's checksum, we need to read the
content of an <code>asar</code> archive as a file. For this purpose you can use the built-in
<code>original-fs</code> module which provides original <code>fs</code> APIs without <code>asar</code> support:</p>
<pre><code class="hljs language-javascript" id="_ui0w2zs"><span class="hljs-keyword">const</span> originalFs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'original-fs'</span>)
originalFs.readFileSync(<span class="hljs-string">'/path/to/example.asar'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_ui0w2zs">Copy</button></pre>
<p>You can also set <code>process.noAsar</code> to <code>true</code> to disable the support for <code>asar</code> in
the <code>fs</code> module:</p>
<pre><code class="hljs language-javascript" id="_kfnm6gww"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>)
process.noAsar = <span class="hljs-literal">true</span>
fs.readFileSync(<span class="hljs-string">'/path/to/example.asar'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_kfnm6gww">Copy</button></pre>
<h2 id="limitations-of-the-node-api"><a href="#limitations-of-the-node-api">Limitations of the Node API</a><a class="header-link" href="#limitations-of-the-node-api" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Even though we tried hard to make <code>asar</code> archives in the Node API work like
directories as much as possible, there are still limitations due to the
low-level nature of the Node API.</p>
<h3 id="archives-are-read-only"><a href="#archives-are-read-only">Archives Are Read-only</a><a class="header-link" href="#archives-are-read-only" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The archives can not be modified so all Node APIs that can modify files will not
work with <code>asar</code> archives.</p>
<h3 id="working-directory-can-not-be-set-to-directories-in-archive"><a href="#working-directory-can-not-be-set-to-directories-in-archive">Working Directory Can Not Be Set to Directories in Archive</a><a class="header-link" href="#working-directory-can-not-be-set-to-directories-in-archive" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Though <code>asar</code> archives are treated as directories, there are no actual
directories in the filesystem, so you can never set the working directory to
directories in <code>asar</code> archives. Passing them as the <code>cwd</code> option of some APIs
will also cause errors.</p>
<h3 id="extra-unpacking-on-some-apis"><a href="#extra-unpacking-on-some-apis">Extra Unpacking on Some APIs</a><a class="header-link" href="#extra-unpacking-on-some-apis" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Most <code>fs</code> APIs can read a file or get a file's information from <code>asar</code> archives
without unpacking, but for some APIs that rely on passing the real file path to
underlying system calls, Electron will extract the needed file into a
temporary file and pass the path of the temporary file to the APIs to make them
work. This adds a little overhead for those APIs.</p>
<p>APIs that requires extra unpacking are:</p>
<ul>
<li><code>child_process.execFile</code></li>
<li><code>child_process.execFileSync</code></li>
<li><code>fs.open</code></li>
<li><code>fs.openSync</code></li>
<li><code>process.dlopen</code> - Used by <code>require</code> on native modules</li>
</ul>
<h3 id="fake-stat-information-of-fsstat"><a href="#fake-stat-information-of-fsstat">Fake Stat Information of <code>fs.stat</code></a><a class="header-link" href="#fake-stat-information-of-fsstat" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The <code>Stats</code> object returned by <code>fs.stat</code> and its friends on files in <code>asar</code>
archives is generated by guessing, because those files do not exist on the
filesystem. So you should not trust the <code>Stats</code> object except for getting file
size and checking file type.</p>
<h3 id="executing-binaries-inside-asar-archive"><a href="#executing-binaries-inside-asar-archive">Executing Binaries Inside <code>asar</code> Archive</a><a class="header-link" href="#executing-binaries-inside-asar-archive" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>There are Node APIs that can execute binaries like <code>child_process.exec</code>,
<code>child_process.spawn</code> and <code>child_process.execFile</code>, but only <code>execFile</code> is
supported to execute binaries inside <code>asar</code> archive.</p>
<p>This is because <code>exec</code> and <code>spawn</code> accept <code>command</code> instead of <code>file</code> as input,
and <code>command</code>s are executed under shell. There is no reliable way to determine
whether a command uses a file in asar archive, and even if we do, we can not be
sure whether we can replace the path in command without side effects.</p>
<h2 id="adding-unpacked-files-in-asar-archive"><a href="#adding-unpacked-files-in-asar-archive">Adding Unpacked Files in <code>asar</code> Archive</a><a class="header-link" href="#adding-unpacked-files-in-asar-archive" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>As stated above, some Node APIs will unpack the file to filesystem when
calling, apart from the performance issues, it could also lead to false alerts
of virus scanners.</p>
<p>To work around this, you can unpack some files creating archives by using the
<code>--unpack</code> option, an example of excluding shared libraries of native modules
is:</p>
<pre><code class="hljs language-sh" id="_d46224aa">$ asar pack app app.asar --unpack *.node</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_d46224aa">Copy</button></pre>
<p>After running the command, apart from the <code>app.asar</code>, there is also an
<code>app.asar.unpacked</code> folder generated which contains the unpacked files, you
should copy it together with <code>app.asar</code> when shipping it to users.</p>

  <hr>
  <h1 id="technical-differences-between-electron-and-nwjs-formerly-node-webkit"><a href="#technical-differences-between-electron-and-nwjs-formerly-node-webkit">Technical Differences Between Electron and NW.js (formerly node-webkit)</a><a class="header-link" href="#technical-differences-between-electron-and-nwjs-formerly-node-webkit" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p><strong>Note: Electron was previously named Atom Shell.</strong></p>
<p>Like NW.js, Electron provides a platform to write desktop applications
with JavaScript and HTML and has Node integration to grant access to the low
level system from web pages.</p>
<p>But there are also fundamental differences between the two projects that make
Electron a completely separate product from NW.js:</p>
<p><strong>1. Entry of Application</strong></p>
<p>In NW.js the main entry point of an application is a web page or a JS script. You specify a
html or js file in the <code>package.json</code> and it is opened in a browser window as
the application's main window (in case of an html entrypoint) or the script is executed.</p>
<p>In Electron, the entry point is a JavaScript script. Instead of
providing a URL directly, you manually create a browser window and load
an HTML file using the API. You also need to listen to window events
to decide when to quit the application.</p>
<p>Electron works more like the Node.js runtime. Electron's APIs are lower level
so you can use it for browser testing in place of <a href="http://phantomjs.org/">PhantomJS</a>.</p>
<p><strong>2. Build System</strong></p>
<p>In order to avoid the complexity of building all of Chromium, Electron uses <a href="https://github.com/electron/libchromiumcontent"><code>libchromiumcontent</code></a> to access
Chromium's Content API. <code>libchromiumcontent</code> is a single shared library that
includes the Chromium Content module and all of its dependencies. Users don't
need a powerful machine to build Electron.</p>
<p><strong>3. Node Integration</strong></p>
<p>In NW.js, the Node integration in web pages requires patching Chromium to
work, while in Electron we chose a different way to integrate the libuv loop
with each platform's message loop to avoid hacking Chromium. See the
<a href="https://github.com/electron/electron/tree/master/atom/common"><code>node_bindings</code></a> code for how that was done.</p>
<p><strong>4. Multi-context</strong></p>
<p>If you are an experienced NW.js user, you should be familiar with the
concept of Node context and web context. These concepts were invented because
of how NW.js was implemented.</p>
<p>By using the <a href="https://github.com/nodejs/node-v0.x-archive/commit/756b622">multi-context</a>
feature of Node, Electron doesn't introduce a new JavaScript context in web
pages.</p>
<p>Note: NW.js has optionally supported multi-context since 0.13.</p>

  <hr>
  <h1 id="autoupdater"><a href="#autoupdater">autoUpdater</a><a class="header-link" href="#autoupdater" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Enable apps to automatically update themselves.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<p><strong>You can find a detailed guide about how to implement updates into your application <a href="https://electronjs.org/docs/tutorial/updates">here</a>.</strong></p>
<h2 id="platform-notices"><a href="#platform-notices">Platform Notices</a><a class="header-link" href="#platform-notices" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Currently, only macOS and Windows are supported. There is no built-in support
for auto-updater on Linux, so it is recommended to use the
distribution's package manager to update your app.</p>
<p>In addition, there are some subtle differences on each platform:</p>
<h3 id="macos"><a href="#macos">macOS</a><a class="header-link" href="#macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>On macOS, the <code>autoUpdater</code> module is built upon <a href="https://github.com/Squirrel/Squirrel.Mac">Squirrel.Mac</a>,
meaning you don't need any special setup to make it work. For server-side
requirements, you can read <a href="https://github.com/Squirrel/Squirrel.Mac#server-support">Server Support</a>. Note that <a href="https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW35">App
Transport Security</a> (ATS) applies to all requests made as part of the
update process. Apps that need to disable ATS can add the
<code>NSAllowsArbitraryLoads</code> key to their app's plist.</p>
<p><strong>Note:</strong> Your application must be signed for automatic updates on macOS.
This is a requirement of <code>Squirrel.Mac</code>.</p>
<h3 id="windows"><a href="#windows">Windows</a><a class="header-link" href="#windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>On Windows, you have to install your app into a user's machine before you can
use the <code>autoUpdater</code>, so it is recommended that you use the
<a href="https://github.com/electron/windows-installer">electron-winstaller</a>, <a href="https://github.com/electron-userland/electron-forge">electron-forge</a> or the <a href="https://github.com/electron/grunt-electron-installer">grunt-electron-installer</a> package to generate a Windows installer.</p>
<p>When using <a href="https://github.com/electron/windows-installer">electron-winstaller</a> or <a href="https://github.com/electron-userland/electron-forge">electron-forge</a> make sure you do not try to update your app <a href="https://github.com/electron/windows-installer#handling-squirrel-events">the first time it runs</a> (Also see <a href="https://github.com/electron/electron/issues/7155">this issue for more info</a>). It's also recommended to use <a href="https://github.com/mongodb-js/electron-squirrel-startup">electron-squirrel-startup</a> to get desktop shortcuts for your app.</p>
<p>The installer generated with Squirrel will create a shortcut icon with an
<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx">Application User Model ID</a> in the format of
<code>com.squirrel.PACKAGE_ID.YOUR_EXE_WITHOUT_DOT_EXE</code>, examples are
<code>com.squirrel.slack.Slack</code> and <code>com.squirrel.code.Code</code>. You have to use the
same ID for your app with <code>app.setAppUserModelId</code> API, otherwise Windows will
not be able to pin your app properly in task bar.</p>
<p>Unlike Squirrel.Mac, Windows can host updates on S3 or any other static file host.
You can read the documents of <a href="https://github.com/Squirrel/Squirrel.Windows">Squirrel.Windows</a> to get more details
about how Squirrel.Windows works.</p>
<h2 id="events"><a href="#events">Events</a><a class="header-link" href="#events" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>autoUpdater</code> object emits the following events:</p>
<h3 id="event-error"><a href="#event-error">Event: 'error'</a><a class="header-link" href="#event-error" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>error</code> Error</li>
</ul>
<p>Emitted when there is an error while updating.</p>
<h3 id="event-checking-for-update"><a href="#event-checking-for-update">Event: 'checking-for-update'</a><a class="header-link" href="#event-checking-for-update" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Emitted when checking if an update has started.</p>
<h3 id="event-update-available"><a href="#event-update-available">Event: 'update-available'</a><a class="header-link" href="#event-update-available" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Emitted when there is an available update. The update is downloaded
automatically.</p>
<h3 id="event-update-not-available"><a href="#event-update-not-available">Event: 'update-not-available'</a><a class="header-link" href="#event-update-not-available" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Emitted when there is no available update.</p>
<h3 id="event-update-downloaded"><a href="#event-update-downloaded">Event: 'update-downloaded'</a><a class="header-link" href="#event-update-downloaded" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>releaseNotes</code> String</li>
<li><code>releaseName</code> String</li>
<li><code>releaseDate</code> Date</li>
<li><code>updateURL</code> String</li>
</ul>
<p>Emitted when an update has been downloaded.</p>
<p>On Windows only <code>releaseName</code> is available.</p>
<h2 id="methods"><a href="#methods">Methods</a><a class="header-link" href="#methods" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>autoUpdater</code> object has the following methods:</p>
<h3 id="autoupdatersetfeedurlurl-requestheaders"><a href="#autoupdatersetfeedurlurl-requestheaders"><code>autoUpdater.setFeedURL(url[, requestHeaders])</code></a><a class="header-link" href="#autoupdatersetfeedurlurl-requestheaders" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>url</code> String</li>
<li><code>requestHeaders</code> Object <em class="platform-label">macOS</em> (optional) - HTTP request headers.</li>
</ul>
<p>Sets the <code>url</code> and initialize the auto updater.</p>
<h3 id="autoupdatergetfeedurl"><a href="#autoupdatergetfeedurl"><code>autoUpdater.getFeedURL()</code></a><a class="header-link" href="#autoupdatergetfeedurl" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>String</code> - The current update feed URL.</p>
<h3 id="autoupdatercheckforupdates"><a href="#autoupdatercheckforupdates"><code>autoUpdater.checkForUpdates()</code></a><a class="header-link" href="#autoupdatercheckforupdates" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Asks the server whether there is an update. You must call <code>setFeedURL</code> before
using this API.</p>
<h3 id="autoupdaterquitandinstall"><a href="#autoupdaterquitandinstall"><code>autoUpdater.quitAndInstall()</code></a><a class="header-link" href="#autoupdaterquitandinstall" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Restarts the app and installs the update after it has been downloaded. It
should only be called after <code>update-downloaded</code> has been emitted.</p>
<p><strong>Note:</strong> <code>autoUpdater.quitAndInstall()</code> will close all application windows
first and only emit <code>before-quit</code> event on <code>app</code> after that. This is different
from the normal quit event sequence.</p>

  <hr>
  <h1 id="bluetoothdevice-object"><a href="#bluetoothdevice-object">BluetoothDevice Object</a><a class="header-link" href="#bluetoothdevice-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>deviceName</code> String</li>
<li><code>deviceId</code> String</li>
</ul>

  <hr>
  <h2 id="class-browserview"><a href="#class-browserview">Class: BrowserView</a><a class="header-link" href="#class-browserview" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>Create and control views.</p>
</blockquote>
<p><strong>Note:</strong> The BrowserView API is currently experimental and may change or be
removed in future Electron releases.</p>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<p>A <code>BrowserView</code> can be used to embed additional web content into a
<code>BrowserWindow</code>. It is like a child window, except that it is positioned
relative to its owning window. It is meant to be an alternative to the
<code>webview</code> tag.</p>
<h2 id="example"><a href="#example">Example</a><a class="header-link" href="#example" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<pre><code class="hljs language-javascript" id="_v3glnkmm"><span class="hljs-comment">// In the main process.</span>
<span class="hljs-keyword">const</span> {BrowserView, BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">width</span>: <span class="hljs-number">800</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">600</span>})
win.on(<span class="hljs-string">'closed'</span>, () =&gt; {
  win = <span class="hljs-literal">null</span>
})

<span class="hljs-keyword">let</span> view = <span class="hljs-keyword">new</span> BrowserView({
  <span class="hljs-attr">webPreferences</span>: {
    <span class="hljs-attr">nodeIntegration</span>: <span class="hljs-literal">false</span>
  }
})
win.setBrowserView(view)
view.setBounds({ <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">width</span>: <span class="hljs-number">300</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">300</span> })
view.webContents.loadURL(<span class="hljs-string">'https://electronjs.org'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_v3glnkmm">Copy</button></pre>
<h3 id="new-browserviewoptions-experimental"><a href="#new-browserviewoptions-experimental"><code>new BrowserView([options])</code> <em>Experimental</em></a><a class="header-link" href="#new-browserviewoptions-experimental" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>options</code> Object (optional)</p>
<ul>
<li><code>webPreferences</code> Object (optional) - See <a href="https://electronjs.org/docs/api/browser-window">BrowserWindow</a>.</li>
</ul>
</li>
</ul>
<h3 id="static-methods"><a href="#static-methods">Static Methods</a><a class="header-link" href="#static-methods" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<h4 id="browserviewgetallviews"><a href="#browserviewgetallviews"><code>BrowserView.getAllViews()</code></a><a class="header-link" href="#browserviewgetallviews" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>BrowserView[]</code> - An array of all opened BrowserViews.</p>
<h4 id="browserviewfromwebcontentswebcontents"><a href="#browserviewfromwebcontentswebcontents"><code>BrowserView.fromWebContents(webContents)</code></a><a class="header-link" href="#browserviewfromwebcontentswebcontents" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>webContents</code> <a href="https://electronjs.org/docs/api/web-contents">WebContents</a></li>
</ul>
<p>Returns <code>BrowserView | null</code> - The BrowserView that owns the given <code>webContents</code>
or <code>null</code> if the contents are not owned by a BrowserView.</p>
<h4 id="browserviewfromidid"><a href="#browserviewfromidid"><code>BrowserView.fromId(id)</code></a><a class="header-link" href="#browserviewfromidid" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>id</code> Integer</li>
</ul>
<p>Returns <code>BrowserView</code> - The view with the given <code>id</code>.</p>
<h3 id="instance-properties"><a href="#instance-properties">Instance Properties</a><a class="header-link" href="#instance-properties" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Objects created with <code>new BrowserView</code> have the following properties:</p>
<h4 id="viewwebcontents-experimental"><a href="#viewwebcontents-experimental"><code>view.webContents</code> <em>Experimental</em></a><a class="header-link" href="#viewwebcontents-experimental" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <a href="https://electronjs.org/docs/api/web-contents"><code>WebContents</code></a> object owned by this view.</p>
<h4 id="viewid-experimental"><a href="#viewid-experimental"><code>view.id</code> <em>Experimental</em></a><a class="header-link" href="#viewid-experimental" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>Integer</code> representing the unique ID of the view.</p>
<h3 id="instance-methods"><a href="#instance-methods">Instance Methods</a><a class="header-link" href="#instance-methods" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Objects created with <code>new BrowserView</code> have the following instance methods:</p>
<h4 id="viewsetautoresizeoptions-experimental"><a href="#viewsetautoresizeoptions-experimental"><code>view.setAutoResize(options)</code> <em>Experimental</em></a><a class="header-link" href="#viewsetautoresizeoptions-experimental" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>width</code> Boolean - If <code>true</code>, the view's width will grow and shrink together
with the window. <code>false</code> by default.</li>
<li><code>height</code> Boolean - If <code>true</code>, the view's height will grow and shrink
together with the window. <code>false</code> by default.</li>
</ul>
</li>
</ul>
<h4 id="viewsetboundsbounds-experimental"><a href="#viewsetboundsbounds-experimental"><code>view.setBounds(bounds)</code> <em>Experimental</em></a><a class="header-link" href="#viewsetboundsbounds-experimental" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>bounds</code> <a href="https://electronjs.org/docs/api/structures/rectangle">Rectangle</a></li>
</ul>
<p>Resizes and moves the view to the supplied bounds relative to the window.</p>
<h4 id="viewsetbackgroundcolorcolor-experimental"><a href="#viewsetbackgroundcolorcolor-experimental"><code>view.setBackgroundColor(color)</code> <em>Experimental</em></a><a class="header-link" href="#viewsetbackgroundcolorcolor-experimental" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>color</code> String - Color in <code>#aarrggbb</code> or <code>#argb</code> form. The alpha channel is
optional.</li>
</ul>

  <hr>
  <h1 id="browserwindow"><a href="#browserwindow">BrowserWindow</a><a class="header-link" href="#browserwindow" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Create and control browser windows.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<pre><code class="hljs language-javascript" id="_goyg87lp"><span class="hljs-comment">// In the main process.</span>
<span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-comment">// Or use `remote` from the renderer process.</span>
<span class="hljs-comment">// const {BrowserWindow} = require('electron').remote</span>

<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">width</span>: <span class="hljs-number">800</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">600</span>})
win.on(<span class="hljs-string">'closed'</span>, () =&gt; {
  win = <span class="hljs-literal">null</span>
})

<span class="hljs-comment">// Load a remote URL</span>
win.loadURL(<span class="hljs-string">'https://github.com'</span>)

<span class="hljs-comment">// Or load a local HTML file</span>
win.loadURL(<span class="hljs-string">`file://<span class="hljs-subst">${__dirname}</span>/app/index.html`</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_goyg87lp">Copy</button></pre>
<h2 id="frameless-window"><a href="#frameless-window">Frameless window</a><a class="header-link" href="#frameless-window" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>To create a window without chrome, or a transparent window in arbitrary shape,
you can use the <a href="https://electronjs.org/docs/api/frameless-window">Frameless Window</a> API.</p>
<h2 id="showing-window-gracefully"><a href="#showing-window-gracefully">Showing window gracefully</a><a class="header-link" href="#showing-window-gracefully" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>When loading a page in the window directly, users may see the page 
load incrementally, which is not a good experience for a native app. To 
make the window display
without visual flash, there are two solutions for different situations.</p>
<h3 id="using-ready-to-show-event"><a href="#using-ready-to-show-event">Using <code>ready-to-show</code> event</a><a class="header-link" href="#using-ready-to-show-event" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>While loading the page, the <code>ready-to-show</code> event will be emitted when the renderer
process has rendered the page for the first time if the window has not been shown yet. Showing
the window after this event will have no visual flash:</p>
<pre><code class="hljs language-javascript" id="_yz6tatne"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>})
win.once(<span class="hljs-string">'ready-to-show'</span>, () =&gt; {
  win.show()
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_yz6tatne">Copy</button></pre>
<p>This event is usually emitted after the <code>did-finish-load</code> event, but for
pages with many remote resources, it may be emitted before the <code>did-finish-load</code>
event.</p>
<h3 id="setting-backgroundcolor"><a href="#setting-backgroundcolor">Setting <code>backgroundColor</code></a><a class="header-link" href="#setting-backgroundcolor" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>For a complex app, the <code>ready-to-show</code> event could be emitted too late, making
the app feel slow. In this case, it is recommended to show the window
immediately, and use a <code>backgroundColor</code> close to your app's background:</p>
<pre><code class="hljs language-javascript" id="_lomlsvs"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">'#2e2c29'</span>})
win.loadURL(<span class="hljs-string">'https://github.com'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_lomlsvs">Copy</button></pre>
<p>Note that even for apps that use <code>ready-to-show</code> event, it is still recommended
to set <code>backgroundColor</code> to make app feel more native.</p>
<h2 id="parent-and-child-windows"><a href="#parent-and-child-windows">Parent and child windows</a><a class="header-link" href="#parent-and-child-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>By using <code>parent</code> option, you can create child windows:</p>
<pre><code class="hljs language-javascript" id="_p2epzaw"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-keyword">let</span> top = <span class="hljs-keyword">new</span> BrowserWindow()
<span class="hljs-keyword">let</span> child = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">parent</span>: top})
child.show()
top.show()</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_p2epzaw">Copy</button></pre>
<p>The <code>child</code> window will always show on top of the <code>top</code> window.</p>
<h3 id="modal-windows"><a href="#modal-windows">Modal windows</a><a class="header-link" href="#modal-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>A modal window is a child window that disables parent window, to create a modal
window, you have to set both <code>parent</code> and <code>modal</code> options:</p>
<pre><code class="hljs language-javascript" id="_gyb7cyhp"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-keyword">let</span> child = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">parent</span>: top, <span class="hljs-attr">modal</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>})
child.loadURL(<span class="hljs-string">'https://github.com'</span>)
child.once(<span class="hljs-string">'ready-to-show'</span>, () =&gt; {
  child.show()
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_gyb7cyhp">Copy</button></pre>
<h3 id="page-visibility"><a href="#page-visibility">Page visibility</a><a class="header-link" href="#page-visibility" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The <a href="https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API">Page Visibility API</a> works as follows:</p>
<ul>
<li>On all platforms, the visibility state tracks whether the window is
hidden/minimized or not.</li>
<li>Additionally, on macOS, the visibility state also tracks the window
occlusion state. If the window is occluded (i.e. fully covered) by another
window, the visibility state will be <code>hidden</code>. On other platforms, the
visibility state will be <code>hidden</code> only when the window is minimized or
explicitly hidden with <code>win.hide()</code>.</li>
<li>If a <code>BrowserWindow</code> is created with <code>show: false</code>, the initial visibility
state will be <code>visible</code> despite the window actually being hidden.</li>
<li>If <code>backgroundThrottling</code> is disabled, the visibility state will remain
<code>visible</code> even if the window is minimized, occluded, or hidden.</li>
</ul>
<p>It is recommended that you pause expensive operations when the visibility
state is <code>hidden</code> in order to minimize power consumption.</p>
<h3 id="platform-notices"><a href="#platform-notices">Platform notices</a><a class="header-link" href="#platform-notices" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>On macOS modal windows will be displayed as sheets attached to the parent window.</li>
<li>On macOS the child windows will keep the relative position to parent window
when parent window moves, while on Windows and Linux child windows will not
move.</li>
<li>On Windows it is not supported to change parent window dynamically.</li>
<li>On Linux the type of modal windows will be changed to <code>dialog</code>.</li>
<li>On Linux many desktop environments do not support hiding a modal window.</li>
</ul>
<h2 id="class-browserwindow"><a href="#class-browserwindow">Class: BrowserWindow</a><a class="header-link" href="#class-browserwindow" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>Create and control browser windows.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<p><code>BrowserWindow</code> is an
<a href="http://nodejs.org/api/events.html#events_class_events_eventemitter">EventEmitter</a>.</p>
<p>It creates a new <code>BrowserWindow</code> with native properties as set by the <code>options</code>.</p>
<h3 id="new-browserwindowoptions"><a href="#new-browserwindowoptions"><code>new BrowserWindow([options])</code></a><a class="header-link" href="#new-browserwindowoptions" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>options</code> Object (optional)</p>
<ul>
<li><code>width</code> Integer (optional) - Window's width in pixels. Default is <code>800</code>.</li>
<li><code>height</code> Integer (optional) - Window's height in pixels. Default is <code>600</code>.</li>
<li><code>x</code> Integer (optional) (<strong>required</strong> if y is used) - Window's left offset from screen.
Default is to center the window.</li>
<li><code>y</code> Integer (optional) (<strong>required</strong> if x is used) - Window's top offset from screen.
Default is to center the window.</li>
<li><code>useContentSize</code> Boolean (optional) - The <code>width</code> and <code>height</code> would be used as web
page's size, which means the actual window's size will include window
frame's size and be slightly larger. Default is <code>false</code>.</li>
<li><code>center</code> Boolean (optional) - Show window in the center of the screen.</li>
<li><code>minWidth</code> Integer (optional) - Window's minimum width. Default is <code>0</code>.</li>
<li><code>minHeight</code> Integer (optional) - Window's minimum height. Default is <code>0</code>.</li>
<li><code>maxWidth</code> Integer (optional) - Window's maximum width. Default is no limit.</li>
<li><code>maxHeight</code> Integer (optional) - Window's maximum height. Default is no limit.</li>
<li><code>resizable</code> Boolean (optional) - Whether window is resizable. Default is <code>true</code>.</li>
<li><code>movable</code> Boolean (optional) - Whether window is movable. This is not implemented
on Linux. Default is <code>true</code>.</li>
<li><code>minimizable</code> Boolean (optional) - Whether window is minimizable. This is not
implemented on Linux. Default is <code>true</code>.</li>
<li><code>maximizable</code> Boolean (optional) - Whether window is maximizable. This is not
implemented on Linux. Default is <code>true</code>.</li>
<li><code>closable</code> Boolean (optional) - Whether window is closable. This is not implemented
on Linux. Default is <code>true</code>.</li>
<li><code>focusable</code> Boolean (optional) - Whether the window can be focused. Default is
<code>true</code>. On Windows setting <code>focusable: false</code> also implies setting
<code>skipTaskbar: true</code>. On Linux setting <code>focusable: false</code> makes the window
stop interacting with wm, so the window will always stay on top in all
workspaces.</li>
<li><code>alwaysOnTop</code> Boolean (optional) - Whether the window should always stay on top of
other windows. Default is <code>false</code>.</li>
<li><code>fullscreen</code> Boolean (optional) - Whether the window should show in fullscreen. When
explicitly set to <code>false</code> the fullscreen button will be hidden or disabled
on macOS. Default is <code>false</code>.</li>
<li><code>fullscreenable</code> Boolean (optional) - Whether the window can be put into fullscreen
mode. On macOS, also whether the maximize/zoom button should toggle full
screen mode or maximize window. Default is <code>true</code>.</li>
<li><code>simpleFullscreen</code> Boolean (optional) - Use pre-Lion fullscreen on macOS. Default is <code>false</code>.</li>
<li><code>skipTaskbar</code> Boolean (optional) - Whether to show the window in taskbar. Default is
<code>false</code>.</li>
<li><code>kiosk</code> Boolean (optional) - The kiosk mode. Default is <code>false</code>.</li>
<li><code>title</code> String (optional) - Default window title. Default is <code>"Electron"</code>.</li>
<li><code>icon</code> (<a href="https://electronjs.org/docs/api/native-image">NativeImage</a> | String) (optional) - The window icon. On Windows it is
recommended to use <code>ICO</code> icons to get best visual effects, you can also
leave it undefined so the executable's icon will be used.</li>
<li><code>show</code> Boolean (optional) - Whether window should be shown when created. Default is
<code>true</code>.</li>
<li><code>frame</code> Boolean (optional) - Specify <code>false</code> to create a
<a href="https://electronjs.org/docs/api/frameless-window">Frameless Window</a>. Default is <code>true</code>.</li>
<li><code>parent</code> BrowserWindow (optional) - Specify parent window. Default is <code>null</code>.</li>
<li><code>modal</code> Boolean (optional) - Whether this is a modal window. This only works when the
window is a child window. Default is <code>false</code>.</li>
<li><code>acceptFirstMouse</code> Boolean (optional) - Whether the web view accepts a single
mouse-down event that simultaneously activates the window. Default is
<code>false</code>.</li>
<li><code>disableAutoHideCursor</code> Boolean (optional) - Whether to hide cursor when typing.
Default is <code>false</code>.</li>
<li><code>autoHideMenuBar</code> Boolean (optional) - Auto hide the menu bar unless the <code>Alt</code>
key is pressed. Default is <code>false</code>.</li>
<li><code>enableLargerThanScreen</code> Boolean (optional) - Enable the window to be resized larger
than screen. Default is <code>false</code>.</li>
<li><code>backgroundColor</code> String (optional) - Window's background color as a hexadecimal value,
like <code>#66CD00</code> or <code>#FFF</code> or <code>#80FFFFFF</code> (alpha is supported). Default is
<code>#FFF</code> (white).</li>
<li><code>hasShadow</code> Boolean (optional) - Whether window should have a shadow. This is only
implemented on macOS. Default is <code>true</code>.</li>
<li><code>opacity</code> Number (optional) - Set the initial opacity of the window, between 0.0 (fully
transparent) and 1.0 (fully opaque). This is only implemented on Windows and macOS.</li>
<li><code>darkTheme</code> Boolean (optional) - Forces using dark theme for the window, only works on
some GTK+3 desktop environments. Default is <code>false</code>.</li>
<li><code>transparent</code> Boolean (optional) - Makes the window <a href="https://electronjs.org/docs/api/frameless-window">transparent</a>.
Default is <code>false</code>.</li>
<li><code>type</code> String (optional) - The type of window, default is normal window. See more about
this below.</li>
<li>
<p><code>titleBarStyle</code> String (optional) - The style of window title bar.
Default is <code>default</code>. Possible values are:</p>
<ul>
<li><code>default</code> - Results in the standard gray opaque Mac title
bar.</li>
<li><code>hidden</code> - Results in a hidden title bar and a full size content window, yet
the title bar still has the standard window controls ("traffic lights") in
the top left.</li>
<li><code>hidden-inset</code> - Deprecated, use <code>hiddenInset</code> instead.</li>
<li><code>hiddenInset</code> - Results in a hidden title bar with an alternative look
where the traffic light buttons are slightly more inset from the window edge.</li>
<li><code>customButtonsOnHover</code> Boolean (optional) - Draw custom close, minimize,
and full screen buttons on macOS frameless windows. These buttons will not
display unless hovered over in the top left of the window. These custom
buttons prevent issues with mouse events that occur with the standard
window toolbar buttons. <strong>Note:</strong> This option is currently experimental.</li>
</ul>
</li>
<li><code>fullscreenWindowTitle</code> Boolean (optional) - Shows the title in the
tile bar in full screen mode on macOS for all <code>titleBarStyle</code> options.
Default is <code>false</code>.</li>
<li><code>thickFrame</code> Boolean (optional) - Use <code>WS_THICKFRAME</code> style for frameless windows on
Windows, which adds standard window frame. Setting it to <code>false</code> will remove
window shadow and window animations. Default is <code>true</code>.</li>
<li><code>vibrancy</code> String (optional) - Add a type of vibrancy effect to the window, only on
macOS. Can be <code>appearance-based</code>, <code>light</code>, <code>dark</code>, <code>titlebar</code>, <code>selection</code>,
<code>menu</code>, <code>popover</code>, <code>sidebar</code>, <code>medium-light</code> or <code>ultra-dark</code>.</li>
<li><code>zoomToPageWidth</code> Boolean (optional) - Controls the behavior on macOS when
option-clicking the green stoplight button on the toolbar or by clicking the
Window &gt; Zoom menu item. If <code>true</code>, the window will grow to the preferred
width of the web page when zoomed, <code>false</code> will cause it to zoom to the
width of the screen. This will also affect the behavior when calling
<code>maximize()</code> directly. Default is <code>false</code>.</li>
<li><code>tabbingIdentifier</code> String (optional) - Tab group name, allows opening the
window as a native tab on macOS 10.12+. Windows with the same tabbing
identifier will be grouped together. This also adds a native new tab button
to your window's tab bar and allows your <code>app</code> and window to receive the
<code>new-window-for-tab</code> event.</li>
<li>
<p><code>webPreferences</code> Object (optional) - Settings of web page's features.</p>
<ul>
<li><code>devTools</code> Boolean (optional) - Whether to enable DevTools. If it is set to <code>false</code>, can not use <code>BrowserWindow.webContents.openDevTools()</code> to open DevTools. Default is <code>true</code>.</li>
<li><code>nodeIntegration</code> Boolean (optional) - Whether node integration is enabled. Default
is <code>true</code>.</li>
<li><code>nodeIntegrationInWorker</code> Boolean (optional) - Whether node integration is
enabled in web workers. Default is <code>false</code>. More about this can be found
in <a href="https://electronjs.org/docs/tutorial/multithreading">Multithreading</a>.</li>
<li><code>preload</code> String (optional) - Specifies a script that will be loaded before other
scripts run in the page. This script will always have access to node APIs
no matter whether node integration is turned on or off. The value should
be the absolute file path to the script.
When node integration is turned off, the preload script can reintroduce
Node global symbols back to the global scope. See example
<a href="https://electronjs.org/docs/api/process#event-loaded">here</a>.</li>
<li><code>sandbox</code> Boolean (optional) - If set, this will sandbox the renderer
associated with the window, making it compatible with the Chromium
OS-level sandbox and disabling the Node.js engine. This is not the same as
the <code>nodeIntegration</code> option and the APIs available to the preload script
are more limited. Read more about the option <a href="https://electronjs.org/docs/api/sandbox-option">here</a>.
<strong>Note:</strong> This option is currently experimental and may change or be
removed in future Electron releases.</li>
<li><code>session</code> <a href="https://electronjs.org/docs/api/session#class-session">Session</a> (optional) - Sets the session used by the
page. Instead of passing the Session object directly, you can also choose to
use the <code>partition</code> option instead, which accepts a partition string. When
both <code>session</code> and <code>partition</code> are provided, <code>session</code> will be preferred.
Default is the default session.</li>
<li><code>partition</code> String (optional) - Sets the session used by the page according to the
session's partition string. If <code>partition</code> starts with <code>persist:</code>, the page
will use a persistent session available to all pages in the app with the
same <code>partition</code>. If there is no <code>persist:</code> prefix, the page will use an
in-memory session. By assigning the same <code>partition</code>, multiple pages can share
the same session. Default is the default session.</li>
<li><code>zoomFactor</code> Number (optional) - The default zoom factor of the page, <code>3.0</code> represents
<code>300%</code>. Default is <code>1.0</code>.</li>
<li><code>javascript</code> Boolean (optional) - Enables JavaScript support. Default is <code>true</code>.</li>
<li><code>webSecurity</code> Boolean (optional) - When <code>false</code>, it will disable the
same-origin policy (usually using testing websites by people), and set
<code>allowRunningInsecureContent</code> to <code>true</code> if this options has not been set
by user. Default is <code>true</code>.</li>
<li><code>allowRunningInsecureContent</code> Boolean (optional) - Allow an https page to run
JavaScript, CSS or plugins from http URLs. Default is <code>false</code>.</li>
<li><code>images</code> Boolean (optional) - Enables image support. Default is <code>true</code>.</li>
<li><code>textAreasAreResizable</code> Boolean (optional) - Make TextArea elements resizable. Default
is <code>true</code>.</li>
<li><code>webgl</code> Boolean (optional) - Enables WebGL support. Default is <code>true</code>.</li>
<li><code>webaudio</code> Boolean (optional) - Enables WebAudio support. Default is <code>true</code>.</li>
<li><code>plugins</code> Boolean (optional) - Whether plugins should be enabled. Default is <code>false</code>.</li>
<li><code>experimentalFeatures</code> Boolean (optional) - Enables Chromium's experimental features.
Default is <code>false</code>.</li>
<li><code>experimentalCanvasFeatures</code> Boolean (optional) - Enables Chromium's experimental
canvas features. Default is <code>false</code>.</li>
<li><code>scrollBounce</code> Boolean (optional) - Enables scroll bounce (rubber banding) effect on
macOS. Default is <code>false</code>.</li>
<li><code>blinkFeatures</code> String (optional) - A list of feature strings separated by <code>,</code>, like
<code>CSSVariables,KeyboardEventKey</code> to enable. The full list of supported feature
strings can be found in the <a href="https://cs.chromium.org/chromium/src/third_party/WebKit/Source/platform/runtime_enabled_features.json5?l=70">RuntimeEnabledFeatures.json5</a>
file.</li>
<li><code>disableBlinkFeatures</code> String (optional) - A list of feature strings separated by <code>,</code>,
like <code>CSSVariables,KeyboardEventKey</code> to disable. The full list of supported
feature strings can be found in the
<a href="https://cs.chromium.org/chromium/src/third_party/WebKit/Source/platform/runtime_enabled_features.json5?l=70">RuntimeEnabledFeatures.json5</a> file.</li>
<li>
<p><code>defaultFontFamily</code> Object (optional) - Sets the default font for the font-family.</p>
<ul>
<li><code>standard</code> String (optional) - Defaults to <code>Times New Roman</code>.</li>
<li><code>serif</code> String (optional) - Defaults to <code>Times New Roman</code>.</li>
<li><code>sansSerif</code> String (optional) - Defaults to <code>Arial</code>.</li>
<li><code>monospace</code> String (optional) - Defaults to <code>Courier New</code>.</li>
<li><code>cursive</code> String (optional) - Defaults to <code>Script</code>.</li>
<li><code>fantasy</code> String (optional) - Defaults to <code>Impact</code>.</li>
</ul>
</li>
<li><code>defaultFontSize</code> Integer (optional) - Defaults to <code>16</code>.</li>
<li><code>defaultMonospaceFontSize</code> Integer (optional) - Defaults to <code>13</code>.</li>
<li><code>minimumFontSize</code> Integer (optional) - Defaults to <code>0</code>.</li>
<li><code>defaultEncoding</code> String (optional) - Defaults to <code>ISO-8859-1</code>.</li>
<li><code>backgroundThrottling</code> Boolean (optional) - Whether to throttle animations and timers
when the page becomes background. This also affects the
<a href="#page-visibility">Page Visibility API</a>. Defaults to <code>true</code>.</li>
<li><code>offscreen</code> Boolean (optional) - Whether to enable offscreen rendering for the browser
window. Defaults to <code>false</code>. See the
<a href="https://electronjs.org/docs/tutorial/offscreen-rendering">offscreen rendering tutorial</a> for
more details.</li>
<li><code>contextIsolation</code> Boolean (optional) - Whether to run Electron APIs and
the specified <code>preload</code> script in a separate JavaScript context. Defaults
to <code>false</code>. The context that the <code>preload</code> script runs in will still
have full access to the <code>document</code> and <code>window</code> globals but it will use
its own set of JavaScript builtins (<code>Array</code>, <code>Object</code>, <code>JSON</code>, etc.)
and will be isolated from any changes made to the global environment
by the loaded page. The Electron API will only be available in the
<code>preload</code> script and not the loaded page. This option should be used when
loading potentially untrusted remote content to ensure the loaded content
cannot tamper with the <code>preload</code> script and any Electron APIs being used.
This option uses the same technique used by <a href="https://developer.chrome.com/extensions/content_scripts#execution-environment">Chrome Content Scripts</a>.
You can access this context in the dev tools by selecting the
'Electron Isolated Context' entry in the combo box at the top of the
Console tab. <strong>Note:</strong> This option is currently experimental and may
change or be removed in future Electron releases.</li>
<li><code>nativeWindowOpen</code> Boolean (optional) - Whether to use native
<code>window.open()</code>. Defaults to <code>false</code>.  <strong>Note:</strong> This option is currently
experimental.</li>
<li><code>webviewTag</code> Boolean (optional) - Whether to enable the <a href="https://electronjs.org/docs/api/webview-tag"><code>&lt;webview&gt;</code> tag</a>.
Defaults to the value of the <code>nodeIntegration</code> option. <strong>Note:</strong> The
<code>preload</code> script configured for the <code>&lt;webview&gt;</code> will have node integration
enabled when it is executed so you should ensure remote/untrusted content
is not able to create a <code>&lt;webview&gt;</code> tag with a possibly malicious <code>preload</code>
script. You can use the <code>will-attach-webview</code> event on <a href="https://electronjs.org/docs/api/web-contents">webContents</a>
to strip away the <code>preload</code> script and to validate or alter the
<code>&lt;webview&gt;</code>'s initial settings.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>When setting minimum or maximum window size with <code>minWidth</code>/<code>maxWidth</code>/
<code>minHeight</code>/<code>maxHeight</code>, it only constrains the users. It won't prevent you from
passing a size that does not follow size constraints to <code>setBounds</code>/<code>setSize</code> or
to the constructor of <code>BrowserWindow</code>.</p>
<p>The possible values and behaviors of the <code>type</code> option are platform dependent.
Possible values are:</p>
<ul>
<li>On Linux, possible types are <code>desktop</code>, <code>dock</code>, <code>toolbar</code>, <code>splash</code>,
<code>notification</code>.</li>
<li>
<p>On macOS, possible types are <code>desktop</code>, <code>textured</code>.</p>
<ul>
<li>The <code>textured</code> type adds metal gradient appearance
(<code>NSTexturedBackgroundWindowMask</code>).</li>
<li>The <code>desktop</code> type places the window at the desktop background window level
(<code>kCGDesktopWindowLevel - 1</code>). Note that desktop window will not receive
focus, keyboard or mouse events, but you can use <code>globalShortcut</code> to receive
input sparingly.</li>
</ul>
</li>
<li>On Windows, possible type is <code>toolbar</code>.</li>
</ul>
<h3 id="instance-events"><a href="#instance-events">Instance Events</a><a class="header-link" href="#instance-events" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Objects created with <code>new BrowserWindow</code> emit the following events:</p>
<p><strong>Note:</strong> Some events are only available on specific operating systems and are
labeled as such.</p>
<h4 id="event-page-title-updated"><a href="#event-page-title-updated">Event: 'page-title-updated'</a><a class="header-link" href="#event-page-title-updated" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>title</code> String</li>
</ul>
<p>Emitted when the document changed its title, calling <code>event.preventDefault()</code>
will prevent the native window's title from changing.</p>
<h4 id="event-close"><a href="#event-close">Event: 'close'</a><a class="header-link" href="#event-close" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
</ul>
<p>Emitted when the window is going to be closed. It's emitted before the
<code>beforeunload</code> and <code>unload</code> event of the DOM. Calling <code>event.preventDefault()</code>
will cancel the close.</p>
<p>Usually you would want to use the <code>beforeunload</code> handler to decide whether the
window should be closed, which will also be called when the window is
reloaded. In Electron, returning any value other than <code>undefined</code> would cancel the
close. For example:</p>
<pre><code class="hljs language-javascript" id="_x1nzynkm"><span class="hljs-built_in">window</span>.onbeforeunload = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'I do not want to be closed'</span>)

  <span class="hljs-comment">// Unlike usual browsers that a message box will be prompted to users, returning</span>
  <span class="hljs-comment">// a non-void value will silently cancel the close.</span>
  <span class="hljs-comment">// It is recommended to use the dialog API to let the user confirm closing the</span>
  <span class="hljs-comment">// application.</span>
  e.returnValue = <span class="hljs-literal">false</span> <span class="hljs-comment">// equivalent to `return false` but not recommended</span>
}</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_x1nzynkm">Copy</button></pre>
<p><em><strong>Note</strong>: There is a subtle difference between the behaviors of <code>window.onbeforeunload = handler</code> and <code>window.addEventListener('beforeunload', handler)</code>. It is recommended to always set the <code>event.returnValue</code> explicitly, instead of just returning a value, as the former works more consistently within Electron.</em></p>
<h4 id="event-closed"><a href="#event-closed">Event: 'closed'</a><a class="header-link" href="#event-closed" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the window is closed. After you have received this event you should
remove the reference to the window and avoid using it any more.</p>
<h4 id="event-session-end-windows"><a href="#event-session-end-windows">Event: 'session-end' <em class="platform-label">Windows</em></a><a class="header-link" href="#event-session-end-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when window session is going to end due to force shutdown or machine restart
or session log off.</p>
<h4 id="event-unresponsive"><a href="#event-unresponsive">Event: 'unresponsive'</a><a class="header-link" href="#event-unresponsive" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the web page becomes unresponsive.</p>
<h4 id="event-responsive"><a href="#event-responsive">Event: 'responsive'</a><a class="header-link" href="#event-responsive" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the unresponsive web page becomes responsive again.</p>
<h4 id="event-blur"><a href="#event-blur">Event: 'blur'</a><a class="header-link" href="#event-blur" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the window loses focus.</p>
<h4 id="event-focus"><a href="#event-focus">Event: 'focus'</a><a class="header-link" href="#event-focus" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the window gains focus.</p>
<h4 id="event-show"><a href="#event-show">Event: 'show'</a><a class="header-link" href="#event-show" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the window is shown.</p>
<h4 id="event-hide"><a href="#event-hide">Event: 'hide'</a><a class="header-link" href="#event-hide" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the window is hidden.</p>
<h4 id="event-ready-to-show"><a href="#event-ready-to-show">Event: 'ready-to-show'</a><a class="header-link" href="#event-ready-to-show" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the web page has been rendered (while not being shown) and window can be displayed without
a visual flash.</p>
<h4 id="event-maximize"><a href="#event-maximize">Event: 'maximize'</a><a class="header-link" href="#event-maximize" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when window is maximized.</p>
<h4 id="event-unmaximize"><a href="#event-unmaximize">Event: 'unmaximize'</a><a class="header-link" href="#event-unmaximize" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the window exits from a maximized state.</p>
<h4 id="event-minimize"><a href="#event-minimize">Event: 'minimize'</a><a class="header-link" href="#event-minimize" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the window is minimized.</p>
<h4 id="event-restore"><a href="#event-restore">Event: 'restore'</a><a class="header-link" href="#event-restore" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the window is restored from a minimized state.</p>
<h4 id="event-resize"><a href="#event-resize">Event: 'resize'</a><a class="header-link" href="#event-resize" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the window is being resized.</p>
<h4 id="event-move"><a href="#event-move">Event: 'move'</a><a class="header-link" href="#event-move" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the window is being moved to a new position.</p>
<p><strong>Note</strong>: On macOS this event is just an alias of <code>moved</code>.</p>
<h4 id="event-moved-macos"><a href="#event-moved-macos">Event: 'moved' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-moved-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted once when the window is moved to a new position.</p>
<h4 id="event-enter-full-screen"><a href="#event-enter-full-screen">Event: 'enter-full-screen'</a><a class="header-link" href="#event-enter-full-screen" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the window enters a full-screen state.</p>
<h4 id="event-leave-full-screen"><a href="#event-leave-full-screen">Event: 'leave-full-screen'</a><a class="header-link" href="#event-leave-full-screen" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the window leaves a full-screen state.</p>
<h4 id="event-enter-html-full-screen"><a href="#event-enter-html-full-screen">Event: 'enter-html-full-screen'</a><a class="header-link" href="#event-enter-html-full-screen" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the window enters a full-screen state triggered by HTML API.</p>
<h4 id="event-leave-html-full-screen"><a href="#event-leave-html-full-screen">Event: 'leave-html-full-screen'</a><a class="header-link" href="#event-leave-html-full-screen" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the window leaves a full-screen state triggered by HTML API.</p>
<h4 id="event-app-command-windows"><a href="#event-app-command-windows">Event: 'app-command' <em class="platform-label">Windows</em></a><a class="header-link" href="#event-app-command-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>command</code> String</li>
</ul>
<p>Emitted when an <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms646275(v=vs.85).aspx">App Command</a>
is invoked. These are typically related to keyboard media keys or browser
commands, as well as the "Back" button built into some mice on Windows.</p>
<p>Commands are lowercased, underscores are replaced with hyphens, and the
<code>APPCOMMAND_</code> prefix is stripped off.
e.g. <code>APPCOMMAND_BROWSER_BACKWARD</code> is emitted as <code>browser-backward</code>.</p>
<pre><code class="hljs language-javascript" id="_onemn59"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow()
win.on(<span class="hljs-string">'app-command'</span>, (e, cmd) =&gt; {
  <span class="hljs-comment">// Navigate the window back when the user hits their mouse back button</span>
  <span class="hljs-keyword">if</span> (cmd === <span class="hljs-string">'browser-backward'</span> &amp;&amp; win.webContents.canGoBack()) {
    win.webContents.goBack()
  }
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_onemn59">Copy</button></pre>
<h4 id="event-scroll-touch-begin-macos"><a href="#event-scroll-touch-begin-macos">Event: 'scroll-touch-begin' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-scroll-touch-begin-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when scroll wheel event phase has begun.</p>
<h4 id="event-scroll-touch-end-macos"><a href="#event-scroll-touch-end-macos">Event: 'scroll-touch-end' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-scroll-touch-end-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when scroll wheel event phase has ended.</p>
<h4 id="event-scroll-touch-edge-macos"><a href="#event-scroll-touch-edge-macos">Event: 'scroll-touch-edge' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-scroll-touch-edge-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when scroll wheel event phase filed upon reaching the edge of element.</p>
<h4 id="event-swipe-macos"><a href="#event-swipe-macos">Event: 'swipe' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-swipe-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>direction</code> String</li>
</ul>
<p>Emitted on 3-finger swipe. Possible directions are <code>up</code>, <code>right</code>, <code>down</code>, <code>left</code>.</p>
<h4 id="event-sheet-begin-macos"><a href="#event-sheet-begin-macos">Event: 'sheet-begin' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-sheet-begin-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the window opens a sheet.</p>
<h4 id="event-sheet-end-macos"><a href="#event-sheet-end-macos">Event: 'sheet-end' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-sheet-end-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the window has closed a sheet.</p>
<h4 id="event-new-window-for-tab-macos"><a href="#event-new-window-for-tab-macos">Event: 'new-window-for-tab' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-new-window-for-tab-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the native new tab button is clicked.</p>
<h3 id="static-methods"><a href="#static-methods">Static Methods</a><a class="header-link" href="#static-methods" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The <code>BrowserWindow</code> class has the following static methods:</p>
<h4 id="browserwindowgetallwindows"><a href="#browserwindowgetallwindows"><code>BrowserWindow.getAllWindows()</code></a><a class="header-link" href="#browserwindowgetallwindows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>BrowserWindow[]</code> - An array of all opened browser windows.</p>
<h4 id="browserwindowgetfocusedwindow"><a href="#browserwindowgetfocusedwindow"><code>BrowserWindow.getFocusedWindow()</code></a><a class="header-link" href="#browserwindowgetfocusedwindow" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>BrowserWindow</code> - The window that is focused in this application, otherwise returns <code>null</code>.</p>
<h4 id="browserwindowfromwebcontentswebcontents"><a href="#browserwindowfromwebcontentswebcontents"><code>BrowserWindow.fromWebContents(webContents)</code></a><a class="header-link" href="#browserwindowfromwebcontentswebcontents" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>webContents</code> <a href="https://electronjs.org/docs/api/web-contents">WebContents</a></li>
</ul>
<p>Returns <code>BrowserWindow</code> - The window that owns the given <code>webContents</code>.</p>
<h4 id="browserwindowfrombrowserviewbrowserview"><a href="#browserwindowfrombrowserviewbrowserview"><code>BrowserWindow.fromBrowserView(browserView)</code></a><a class="header-link" href="#browserwindowfrombrowserviewbrowserview" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>browserView</code> <a href="https://electronjs.org/docs/api/browser-view">BrowserView</a></li>
</ul>
<p>Returns <code>BrowserWindow | null</code> - The window that owns the given <code>browserView</code>. If the given view is not attached to any window, returns <code>null</code>.</p>
<h4 id="browserwindowfromidid"><a href="#browserwindowfromidid"><code>BrowserWindow.fromId(id)</code></a><a class="header-link" href="#browserwindowfromidid" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>id</code> Integer</li>
</ul>
<p>Returns <code>BrowserWindow</code> - The window with the given <code>id</code>.</p>
<h4 id="browserwindowaddextensionpath"><a href="#browserwindowaddextensionpath"><code>BrowserWindow.addExtension(path)</code></a><a class="header-link" href="#browserwindowaddextensionpath" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>path</code> String</li>
</ul>
<p>Adds Chrome extension located at <code>path</code>, and returns extension's name.</p>
<p>The method will also not return if the extension's manifest is missing or incomplete.</p>
<p><strong>Note:</strong> This API cannot be called before the <code>ready</code> event of the <code>app</code> module
is emitted.</p>
<h4 id="browserwindowremoveextensionname"><a href="#browserwindowremoveextensionname"><code>BrowserWindow.removeExtension(name)</code></a><a class="header-link" href="#browserwindowremoveextensionname" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>name</code> String</li>
</ul>
<p>Remove a Chrome extension by name.</p>
<p><strong>Note:</strong> This API cannot be called before the <code>ready</code> event of the <code>app</code> module
is emitted.</p>
<h4 id="browserwindowgetextensions"><a href="#browserwindowgetextensions"><code>BrowserWindow.getExtensions()</code></a><a class="header-link" href="#browserwindowgetextensions" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Object</code> - The keys are the extension names and each value is
an Object containing <code>name</code> and <code>version</code> properties.</p>
<p><strong>Note:</strong> This API cannot be called before the <code>ready</code> event of the <code>app</code> module
is emitted.</p>
<h4 id="browserwindowadddevtoolsextensionpath"><a href="#browserwindowadddevtoolsextensionpath"><code>BrowserWindow.addDevToolsExtension(path)</code></a><a class="header-link" href="#browserwindowadddevtoolsextensionpath" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>path</code> String</li>
</ul>
<p>Adds DevTools extension located at <code>path</code>, and returns extension's name.</p>
<p>The extension will be remembered so you only need to call this API once, this
API is not for programming use. If you try to add an extension that has already
been loaded, this method will not return and instead log a warning to the
console.</p>
<p>The method will also not return if the extension's manifest is missing or incomplete.</p>
<p><strong>Note:</strong> This API cannot be called before the <code>ready</code> event of the <code>app</code> module
is emitted.</p>
<h4 id="browserwindowremovedevtoolsextensionname"><a href="#browserwindowremovedevtoolsextensionname"><code>BrowserWindow.removeDevToolsExtension(name)</code></a><a class="header-link" href="#browserwindowremovedevtoolsextensionname" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>name</code> String</li>
</ul>
<p>Remove a DevTools extension by name.</p>
<p><strong>Note:</strong> This API cannot be called before the <code>ready</code> event of the <code>app</code> module
is emitted.</p>
<h4 id="browserwindowgetdevtoolsextensions"><a href="#browserwindowgetdevtoolsextensions"><code>BrowserWindow.getDevToolsExtensions()</code></a><a class="header-link" href="#browserwindowgetdevtoolsextensions" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Object</code> - The keys are the extension names and each value is
an Object containing <code>name</code> and <code>version</code> properties.</p>
<p>To check if a DevTools extension is installed you can run the following:</p>
<pre><code class="hljs language-javascript" id="_8jshq4dq"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-keyword">let</span> installed = BrowserWindow.getDevToolsExtensions().hasOwnProperty(<span class="hljs-string">'devtron'</span>)
<span class="hljs-built_in">console</span>.log(installed)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_8jshq4dq">Copy</button></pre>
<p><strong>Note:</strong> This API cannot be called before the <code>ready</code> event of the <code>app</code> module
is emitted.</p>
<h3 id="instance-properties"><a href="#instance-properties">Instance Properties</a><a class="header-link" href="#instance-properties" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Objects created with <code>new BrowserWindow</code> have the following properties:</p>
<pre><code class="hljs language-javascript" id="_bpn9fbbp"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-comment">// In this example `win` is our instance</span>
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">width</span>: <span class="hljs-number">800</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">600</span>})
win.loadURL(<span class="hljs-string">'https://github.com'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_bpn9fbbp">Copy</button></pre>
<h4 id="winwebcontents"><a href="#winwebcontents"><code>win.webContents</code></a><a class="header-link" href="#winwebcontents" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>WebContents</code> object this window owns. All web page related events and
operations will be done via it.</p>
<p>See the <a href="https://electronjs.org/docs/api/web-contents"><code>webContents</code> documentation</a> for its methods and
events.</p>
<h4 id="winid"><a href="#winid"><code>win.id</code></a><a class="header-link" href="#winid" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>Integer</code> representing the unique ID of the window.</p>
<h3 id="instance-methods"><a href="#instance-methods">Instance Methods</a><a class="header-link" href="#instance-methods" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Objects created with <code>new BrowserWindow</code> have the following instance methods:</p>
<p><strong>Note:</strong> Some methods are only available on specific operating systems and are
labeled as such.</p>
<h4 id="windestroy"><a href="#windestroy"><code>win.destroy()</code></a><a class="header-link" href="#windestroy" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Force closing the window, the <code>unload</code> and <code>beforeunload</code> event won't be emitted
for the web page, and <code>close</code> event will also not be emitted
for this window, but it guarantees the <code>closed</code> event will be emitted.</p>
<h4 id="winclose"><a href="#winclose"><code>win.close()</code></a><a class="header-link" href="#winclose" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Try to close the window. This has the same effect as a user manually clicking
the close button of the window. The web page may cancel the close though. See
the <a href="#event-close">close event</a>.</p>
<h4 id="winfocus"><a href="#winfocus"><code>win.focus()</code></a><a class="header-link" href="#winfocus" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Focuses on the window.</p>
<h4 id="winblur"><a href="#winblur"><code>win.blur()</code></a><a class="header-link" href="#winblur" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Removes focus from the window.</p>
<h4 id="winisfocused"><a href="#winisfocused"><code>win.isFocused()</code></a><a class="header-link" href="#winisfocused" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the window is focused.</p>
<h4 id="winisdestroyed"><a href="#winisdestroyed"><code>win.isDestroyed()</code></a><a class="header-link" href="#winisdestroyed" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the window is destroyed.</p>
<h4 id="winshow"><a href="#winshow"><code>win.show()</code></a><a class="header-link" href="#winshow" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Shows and gives focus to the window.</p>
<h4 id="winshowinactive"><a href="#winshowinactive"><code>win.showInactive()</code></a><a class="header-link" href="#winshowinactive" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Shows the window but doesn't focus on it.</p>
<h4 id="winhide"><a href="#winhide"><code>win.hide()</code></a><a class="header-link" href="#winhide" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Hides the window.</p>
<h4 id="winisvisible"><a href="#winisvisible"><code>win.isVisible()</code></a><a class="header-link" href="#winisvisible" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the window is visible to the user.</p>
<h4 id="winismodal"><a href="#winismodal"><code>win.isModal()</code></a><a class="header-link" href="#winismodal" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether current window is a modal window.</p>
<h4 id="winmaximize"><a href="#winmaximize"><code>win.maximize()</code></a><a class="header-link" href="#winmaximize" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Maximizes the window. This will also show (but not focus) the window if it
isn't being displayed already.</p>
<h4 id="winunmaximize"><a href="#winunmaximize"><code>win.unmaximize()</code></a><a class="header-link" href="#winunmaximize" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Unmaximizes the window.</p>
<h4 id="winismaximized"><a href="#winismaximized"><code>win.isMaximized()</code></a><a class="header-link" href="#winismaximized" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the window is maximized.</p>
<h4 id="winminimize"><a href="#winminimize"><code>win.minimize()</code></a><a class="header-link" href="#winminimize" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Minimizes the window. On some platforms the minimized window will be shown in
the Dock.</p>
<h4 id="winrestore"><a href="#winrestore"><code>win.restore()</code></a><a class="header-link" href="#winrestore" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Restores the window from minimized state to its previous state.</p>
<h4 id="winisminimized"><a href="#winisminimized"><code>win.isMinimized()</code></a><a class="header-link" href="#winisminimized" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the window is minimized.</p>
<h4 id="winsetfullscreenflag"><a href="#winsetfullscreenflag"><code>win.setFullScreen(flag)</code></a><a class="header-link" href="#winsetfullscreenflag" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>flag</code> Boolean</li>
</ul>
<p>Sets whether the window should be in fullscreen mode.</p>
<h4 id="winisfullscreen"><a href="#winisfullscreen"><code>win.isFullScreen()</code></a><a class="header-link" href="#winisfullscreen" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the window is in fullscreen mode.</p>
<h4 id="winsetsimplefullscreenflag-macos"><a href="#winsetsimplefullscreenflag-macos"><code>win.setSimpleFullScreen(flag)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#winsetsimplefullscreenflag-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>flag</code> Boolean</li>
</ul>
<p>Enters or leaves simple fullscreen mode.</p>
<p>Simple fullscreen mode emulates the native fullscreen behavior found in versions of Mac OS X prior to Lion (10.7).</p>
<h4 id="winissimplefullscreen-macos"><a href="#winissimplefullscreen-macos"><code>win.isSimpleFullScreen()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#winissimplefullscreen-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the window is in simple (pre-Lion) fullscreen mode.</p>
<h4 id="winsetaspectratioaspectratio-extrasize-macos"><a href="#winsetaspectratioaspectratio-extrasize-macos"><code>win.setAspectRatio(aspectRatio[, extraSize])</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#winsetaspectratioaspectratio-extrasize-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>aspectRatio</code> Float - The aspect ratio to maintain for some portion of the
content view.</li>
<li><code>extraSize</code> <a href="https://electronjs.org/docs/api/structures/size">Size</a> - The extra size not to be included while
maintaining the aspect ratio.</li>
</ul>
<p>This will make a window maintain an aspect ratio. The extra size allows a
developer to have space, specified in pixels, not included within the aspect
ratio calculations. This API already takes into account the difference between a
window's size and its content size.</p>
<p>Consider a normal window with an HD video player and associated controls.
Perhaps there are 15 pixels of controls on the left edge, 25 pixels of controls
on the right edge and 50 pixels of controls below the player. In order to
maintain a 16:9 aspect ratio (standard aspect ratio for HD <a href="https://github.com/1920x1080"><strong>@1920x1080</strong></a>) within
the player itself we would call this function with arguments of 16/9 and
[ 40, 50 ]. The second argument doesn't care where the extra width and height
are within the content view--only that they exist. Just sum any extra width and
height areas you have within the overall content view.</p>
<h4 id="winpreviewfilepath-displayname-macos"><a href="#winpreviewfilepath-displayname-macos"><code>win.previewFile(path[, displayName])</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#winpreviewfilepath-displayname-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>path</code> String - The absolute path to the file to preview with QuickLook. This
is important as Quick Look uses the file name and file extension on the path
to determine the content type of the file to open.</li>
<li><code>displayName</code> String (optional) - The name of the file to display on the
Quick Look modal view. This is purely visual and does not affect the content
type of the file. Defaults to <code>path</code>.</li>
</ul>
<p>Uses <a href="https://en.wikipedia.org/wiki/Quick_Look">Quick Look</a> to preview a file at a given path.</p>
<h4 id="winclosefilepreview-macos"><a href="#winclosefilepreview-macos"><code>win.closeFilePreview()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#winclosefilepreview-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Closes the currently open <a href="https://en.wikipedia.org/wiki/Quick_Look">Quick Look</a> panel.</p>
<h4 id="winsetboundsbounds-animate"><a href="#winsetboundsbounds-animate"><code>win.setBounds(bounds[, animate])</code></a><a class="header-link" href="#winsetboundsbounds-animate" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>bounds</code> <a href="https://electronjs.org/docs/api/structures/rectangle">Rectangle</a></li>
<li><code>animate</code> Boolean (optional) <em class="platform-label">macOS</em></li>
</ul>
<p>Resizes and moves the window to the supplied bounds</p>
<h4 id="wingetbounds"><a href="#wingetbounds"><code>win.getBounds()</code></a><a class="header-link" href="#wingetbounds" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <a href="https://electronjs.org/docs/api/structures/rectangle"><code>Rectangle</code></a></p>
<h4 id="winsetcontentboundsbounds-animate"><a href="#winsetcontentboundsbounds-animate"><code>win.setContentBounds(bounds[, animate])</code></a><a class="header-link" href="#winsetcontentboundsbounds-animate" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>bounds</code> <a href="https://electronjs.org/docs/api/structures/rectangle">Rectangle</a></li>
<li><code>animate</code> Boolean (optional) <em class="platform-label">macOS</em></li>
</ul>
<p>Resizes and moves the window's client area (e.g. the web page) to
the supplied bounds.</p>
<h4 id="wingetcontentbounds"><a href="#wingetcontentbounds"><code>win.getContentBounds()</code></a><a class="header-link" href="#wingetcontentbounds" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <a href="https://electronjs.org/docs/api/structures/rectangle"><code>Rectangle</code></a></p>
<h4 id="winsetsizewidth-height-animate"><a href="#winsetsizewidth-height-animate"><code>win.setSize(width, height[, animate])</code></a><a class="header-link" href="#winsetsizewidth-height-animate" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>width</code> Integer</li>
<li><code>height</code> Integer</li>
<li><code>animate</code> Boolean (optional) <em class="platform-label">macOS</em></li>
</ul>
<p>Resizes the window to <code>width</code> and <code>height</code>.</p>
<h4 id="wingetsize"><a href="#wingetsize"><code>win.getSize()</code></a><a class="header-link" href="#wingetsize" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Integer[]</code> - Contains the window's width and height.</p>
<h4 id="winsetcontentsizewidth-height-animate"><a href="#winsetcontentsizewidth-height-animate"><code>win.setContentSize(width, height[, animate])</code></a><a class="header-link" href="#winsetcontentsizewidth-height-animate" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>width</code> Integer</li>
<li><code>height</code> Integer</li>
<li><code>animate</code> Boolean (optional) <em class="platform-label">macOS</em></li>
</ul>
<p>Resizes the window's client area (e.g. the web page) to <code>width</code> and <code>height</code>.</p>
<h4 id="wingetcontentsize"><a href="#wingetcontentsize"><code>win.getContentSize()</code></a><a class="header-link" href="#wingetcontentsize" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Integer[]</code> - Contains the window's client area's width and height.</p>
<h4 id="winsetminimumsizewidth-height"><a href="#winsetminimumsizewidth-height"><code>win.setMinimumSize(width, height)</code></a><a class="header-link" href="#winsetminimumsizewidth-height" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>width</code> Integer</li>
<li><code>height</code> Integer</li>
</ul>
<p>Sets the minimum size of window to <code>width</code> and <code>height</code>.</p>
<h4 id="wingetminimumsize"><a href="#wingetminimumsize"><code>win.getMinimumSize()</code></a><a class="header-link" href="#wingetminimumsize" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Integer[]</code> - Contains the window's minimum width and height.</p>
<h4 id="winsetmaximumsizewidth-height"><a href="#winsetmaximumsizewidth-height"><code>win.setMaximumSize(width, height)</code></a><a class="header-link" href="#winsetmaximumsizewidth-height" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>width</code> Integer</li>
<li><code>height</code> Integer</li>
</ul>
<p>Sets the maximum size of window to <code>width</code> and <code>height</code>.</p>
<h4 id="wingetmaximumsize"><a href="#wingetmaximumsize"><code>win.getMaximumSize()</code></a><a class="header-link" href="#wingetmaximumsize" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Integer[]</code> - Contains the window's maximum width and height.</p>
<h4 id="winsetresizableresizable"><a href="#winsetresizableresizable"><code>win.setResizable(resizable)</code></a><a class="header-link" href="#winsetresizableresizable" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>resizable</code> Boolean</li>
</ul>
<p>Sets whether the window can be manually resized by user.</p>
<h4 id="winisresizable"><a href="#winisresizable"><code>win.isResizable()</code></a><a class="header-link" href="#winisresizable" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the window can be manually resized by user.</p>
<h4 id="winsetmovablemovable-macos-windows"><a href="#winsetmovablemovable-macos-windows"><code>win.setMovable(movable)</code> <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#winsetmovablemovable-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>movable</code> Boolean</li>
</ul>
<p>Sets whether the window can be moved by user. On Linux does nothing.</p>
<h4 id="winismovable-macos-windows"><a href="#winismovable-macos-windows"><code>win.isMovable()</code> <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#winismovable-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the window can be moved by user.</p>
<p>On Linux always returns <code>true</code>.</p>
<h4 id="winsetminimizableminimizable-macos-windows"><a href="#winsetminimizableminimizable-macos-windows"><code>win.setMinimizable(minimizable)</code> <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#winsetminimizableminimizable-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>minimizable</code> Boolean</li>
</ul>
<p>Sets whether the window can be manually minimized by user. On Linux does
nothing.</p>
<h4 id="winisminimizable-macos-windows"><a href="#winisminimizable-macos-windows"><code>win.isMinimizable()</code> <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#winisminimizable-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the window can be manually minimized by user</p>
<p>On Linux always returns <code>true</code>.</p>
<h4 id="winsetmaximizablemaximizable-macos-windows"><a href="#winsetmaximizablemaximizable-macos-windows"><code>win.setMaximizable(maximizable)</code> <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#winsetmaximizablemaximizable-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>maximizable</code> Boolean</li>
</ul>
<p>Sets whether the window can be manually maximized by user. On Linux does
nothing.</p>
<h4 id="winismaximizable-macos-windows"><a href="#winismaximizable-macos-windows"><code>win.isMaximizable()</code> <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#winismaximizable-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the window can be manually maximized by user.</p>
<p>On Linux always returns <code>true</code>.</p>
<h4 id="winsetfullscreenablefullscreenable"><a href="#winsetfullscreenablefullscreenable"><code>win.setFullScreenable(fullscreenable)</code></a><a class="header-link" href="#winsetfullscreenablefullscreenable" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>fullscreenable</code> Boolean</li>
</ul>
<p>Sets whether the maximize/zoom window button toggles fullscreen mode or
maximizes the window.</p>
<h4 id="winisfullscreenable"><a href="#winisfullscreenable"><code>win.isFullScreenable()</code></a><a class="header-link" href="#winisfullscreenable" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the maximize/zoom window button toggles fullscreen mode or
maximizes the window.</p>
<h4 id="winsetclosableclosable-macos-windows"><a href="#winsetclosableclosable-macos-windows"><code>win.setClosable(closable)</code> <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#winsetclosableclosable-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>closable</code> Boolean</li>
</ul>
<p>Sets whether the window can be manually closed by user. On Linux does nothing.</p>
<h4 id="winisclosable-macos-windows"><a href="#winisclosable-macos-windows"><code>win.isClosable()</code> <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#winisclosable-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the window can be manually closed by user.</p>
<p>On Linux always returns <code>true</code>.</p>
<h4 id="winsetalwaysontopflag-level-relativelevel"><a href="#winsetalwaysontopflag-level-relativelevel"><code>win.setAlwaysOnTop(flag[, level][, relativeLevel])</code></a><a class="header-link" href="#winsetalwaysontopflag-level-relativelevel" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>flag</code> Boolean</li>
<li><code>level</code> String (optional) <em class="platform-label">macOS</em> - Values include <code>normal</code>, <code>floating</code>,
<code>torn-off-menu</code>, <code>modal-panel</code>, <code>main-menu</code>, <code>status</code>, <code>pop-up-menu</code>,
<code>screen-saver</code>, and <del><code>dock</code></del> (Deprecated). The default is <code>floating</code>. See the
<a href="https://developer.apple.com/reference/appkit/nswindow/1664726-window_levels">macOS docs</a> for more details.</li>
<li><code>relativeLevel</code> Integer (optional) <em class="platform-label">macOS</em> - The number of layers higher to set
this window relative to the given <code>level</code>. The default is <code>0</code>. Note that Apple
discourages setting levels higher than 1 above <code>screen-saver</code>.</li>
</ul>
<p>Sets whether the window should show always on top of other windows. After
setting this, the window is still a normal window, not a toolbox window which
can not be focused on.</p>
<h4 id="winisalwaysontop"><a href="#winisalwaysontop"><code>win.isAlwaysOnTop()</code></a><a class="header-link" href="#winisalwaysontop" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the window is always on top of other windows.</p>
<h4 id="wincenter"><a href="#wincenter"><code>win.center()</code></a><a class="header-link" href="#wincenter" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Moves window to the center of the screen.</p>
<h4 id="winsetpositionx-y-animate"><a href="#winsetpositionx-y-animate"><code>win.setPosition(x, y[, animate])</code></a><a class="header-link" href="#winsetpositionx-y-animate" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>x</code> Integer</li>
<li><code>y</code> Integer</li>
<li><code>animate</code> Boolean (optional) <em class="platform-label">macOS</em></li>
</ul>
<p>Moves window to <code>x</code> and <code>y</code>.</p>
<h4 id="wingetposition"><a href="#wingetposition"><code>win.getPosition()</code></a><a class="header-link" href="#wingetposition" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Integer[]</code> - Contains the window's current position.</p>
<h4 id="winsettitletitle"><a href="#winsettitletitle"><code>win.setTitle(title)</code></a><a class="header-link" href="#winsettitletitle" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>title</code> String</li>
</ul>
<p>Changes the title of native window to <code>title</code>.</p>
<h4 id="wingettitle"><a href="#wingettitle"><code>win.getTitle()</code></a><a class="header-link" href="#wingettitle" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>String</code> - The title of the native window.</p>
<p><strong>Note:</strong> The title of web page can be different from the title of the native
window.</p>
<h4 id="winsetsheetoffsetoffsety-offsetx-macos"><a href="#winsetsheetoffsetoffsety-offsetx-macos"><code>win.setSheetOffset(offsetY[, offsetX])</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#winsetsheetoffsetoffsety-offsetx-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>offsetY</code> Float</li>
<li><code>offsetX</code> Float (optional)</li>
</ul>
<p>Changes the attachment point for sheets on macOS. By default, sheets are
attached just below the window frame, but you may want to display them beneath
a HTML-rendered toolbar. For example:</p>
<pre><code class="hljs language-javascript" id="_yvhx5cfi"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow()

<span class="hljs-keyword">let</span> toolbarRect = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'toolbar'</span>).getBoundingClientRect()
win.setSheetOffset(toolbarRect.height)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_yvhx5cfi">Copy</button></pre>
<h4 id="winflashframeflag"><a href="#winflashframeflag"><code>win.flashFrame(flag)</code></a><a class="header-link" href="#winflashframeflag" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>flag</code> Boolean</li>
</ul>
<p>Starts or stops flashing the window to attract user's attention.</p>
<h4 id="winsetskiptaskbarskip"><a href="#winsetskiptaskbarskip"><code>win.setSkipTaskbar(skip)</code></a><a class="header-link" href="#winsetskiptaskbarskip" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>skip</code> Boolean</li>
</ul>
<p>Makes the window not show in the taskbar.</p>
<h4 id="winsetkioskflag"><a href="#winsetkioskflag"><code>win.setKiosk(flag)</code></a><a class="header-link" href="#winsetkioskflag" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>flag</code> Boolean</li>
</ul>
<p>Enters or leaves the kiosk mode.</p>
<h4 id="winiskiosk"><a href="#winiskiosk"><code>win.isKiosk()</code></a><a class="header-link" href="#winiskiosk" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the window is in kiosk mode.</p>
<h4 id="wingetnativewindowhandle"><a href="#wingetnativewindowhandle"><code>win.getNativeWindowHandle()</code></a><a class="header-link" href="#wingetnativewindowhandle" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Buffer</code> - The platform-specific handle of the window.</p>
<p>The native type of the handle is <code>HWND</code> on Windows, <code>NSView*</code> on macOS, and
<code>Window</code> (<code>unsigned long</code>) on Linux.</p>
<h4 id="winhookwindowmessagemessage-callback-windows"><a href="#winhookwindowmessagemessage-callback-windows"><code>win.hookWindowMessage(message, callback)</code> <em class="platform-label">Windows</em></a><a class="header-link" href="#winhookwindowmessagemessage-callback-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>message</code> Integer</li>
<li><code>callback</code> Function</li>
</ul>
<p>Hooks a windows message. The <code>callback</code> is called when
the message is received in the WndProc.</p>
<h4 id="winiswindowmessagehookedmessage-windows"><a href="#winiswindowmessagehookedmessage-windows"><code>win.isWindowMessageHooked(message)</code> <em class="platform-label">Windows</em></a><a class="header-link" href="#winiswindowmessagehookedmessage-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>message</code> Integer</li>
</ul>
<p>Returns <code>Boolean</code> - <code>true</code> or <code>false</code> depending on whether the message is hooked.</p>
<h4 id="winunhookwindowmessagemessage-windows"><a href="#winunhookwindowmessagemessage-windows"><code>win.unhookWindowMessage(message)</code> <em class="platform-label">Windows</em></a><a class="header-link" href="#winunhookwindowmessagemessage-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>message</code> Integer</li>
</ul>
<p>Unhook the window message.</p>
<h4 id="winunhookallwindowmessages-windows"><a href="#winunhookallwindowmessages-windows"><code>win.unhookAllWindowMessages()</code> <em class="platform-label">Windows</em></a><a class="header-link" href="#winunhookallwindowmessages-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Unhooks all of the window messages.</p>
<h4 id="winsetrepresentedfilenamefilename-macos"><a href="#winsetrepresentedfilenamefilename-macos"><code>win.setRepresentedFilename(filename)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#winsetrepresentedfilenamefilename-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>filename</code> String</li>
</ul>
<p>Sets the pathname of the file the window represents, and the icon of the file
will show in window's title bar.</p>
<h4 id="wingetrepresentedfilename-macos"><a href="#wingetrepresentedfilename-macos"><code>win.getRepresentedFilename()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#wingetrepresentedfilename-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>String</code> - The pathname of the file the window represents.</p>
<h4 id="winsetdocumenteditededited-macos"><a href="#winsetdocumenteditededited-macos"><code>win.setDocumentEdited(edited)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#winsetdocumenteditededited-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>edited</code> Boolean</li>
</ul>
<p>Specifies whether the window’s document has been edited, and the icon in title
bar will become gray when set to <code>true</code>.</p>
<h4 id="winisdocumentedited-macos"><a href="#winisdocumentedited-macos"><code>win.isDocumentEdited()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#winisdocumentedited-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the window's document has been edited.</p>
<h4 id="winfocusonwebview"><a href="#winfocusonwebview"><code>win.focusOnWebView()</code></a><a class="header-link" href="#winfocusonwebview" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<h4 id="winblurwebview"><a href="#winblurwebview"><code>win.blurWebView()</code></a><a class="header-link" href="#winblurwebview" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<h4 id="wincapturepagerect-callback"><a href="#wincapturepagerect-callback"><code>win.capturePage([rect, ]callback)</code></a><a class="header-link" href="#wincapturepagerect-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>rect</code> <a href="https://electronjs.org/docs/api/structures/rectangle">Rectangle</a> (optional) - The bounds to capture</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>image</code> <a href="https://electronjs.org/docs/api/native-image">NativeImage</a></li>
</ul>
</li>
</ul>
<p>Same as <code>webContents.capturePage([rect, ]callback)</code>.</p>
<h4 id="winloadurlurl-options"><a href="#winloadurlurl-options"><code>win.loadURL(url[, options])</code></a><a class="header-link" href="#winloadurlurl-options" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>url</code> String</li>
<li>
<p><code>options</code> Object (optional)</p>
<ul>
<li><code>httpReferrer</code> String (optional) - A HTTP Referrer url.</li>
<li><code>userAgent</code> String (optional) - A user agent originating the request.</li>
<li><code>extraHeaders</code> String (optional) - Extra headers separated by "\n"</li>
<li><code>postData</code> (<a href="https://electronjs.org/docs/api/structures/upload-raw-data">UploadRawData[]</a> | <a href="https://electronjs.org/docs/api/structures/upload-file">UploadFile[]</a> | <a href="https://electronjs.org/docs/api/structures/upload-file-system">UploadFileSystem[]</a> | <a href="https://electronjs.org/docs/api/structures/upload-blob">UploadBlob[]</a>) - (optional)</li>
<li><code>baseURLForDataURL</code> String (optional) - Base url (with 
trailing path separator) for files to be loaded by the data url. This is
 needed only if the specified <code>url</code> is a data url and needs to load other files.</li>
</ul>
</li>
</ul>
<p>Same as <code>webContents.loadURL(url[, options])</code>.</p>
<p>The <code>url</code> can be a remote address (e.g. <code>http://</code>) or a path to a local
HTML file using the <code>file://</code> protocol.</p>
<p>To ensure that file URLs are properly formatted, it is recommended to use
Node's <a href="https://nodejs.org/api/url.html#url_url_format_urlobject"><code>url.format</code></a>
method:</p>
<pre><code class="hljs language-javascript" id="_rheb4lon"><span class="hljs-keyword">let</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">'url'</span>).format({
  <span class="hljs-attr">protocol</span>: <span class="hljs-string">'file'</span>,
  <span class="hljs-attr">slashes</span>: <span class="hljs-literal">true</span>,
  <span class="hljs-attr">pathname</span>: <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>).join(__dirname, <span class="hljs-string">'index.html'</span>)
})

win.loadURL(url)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_rheb4lon">Copy</button></pre>
<p>You can load a URL using a <code>POST</code> request with URL-encoded data by doing
the following:</p>
<pre><code class="hljs language-javascript" id="_q48icqr3q">win.loadURL(<span class="hljs-string">'http://localhost:8000/post'</span>, {
  <span class="hljs-attr">postData</span>: [{
    <span class="hljs-attr">type</span>: <span class="hljs-string">'rawData'</span>,
    <span class="hljs-attr">bytes</span>: Buffer.from(<span class="hljs-string">'hello=world'</span>)
  }],
  <span class="hljs-attr">extraHeaders</span>: <span class="hljs-string">'Content-Type: application/x-www-form-urlencoded'</span>
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_q48icqr3q">Copy</button></pre>
<h4 id="winreload"><a href="#winreload"><code>win.reload()</code></a><a class="header-link" href="#winreload" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Same as <code>webContents.reload</code>.</p>
<h4 id="winsetmenumenu-linux-windows"><a href="#winsetmenumenu-linux-windows"><code>win.setMenu(menu)</code> <em class="platform-label">Linux</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#winsetmenumenu-linux-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>menu</code> Menu | null</li>
</ul>
<p>Sets the <code>menu</code> as the window's menu bar, setting it to <code>null</code> will remove the
menu bar.</p>
<h4 id="winsetprogressbarprogress-options"><a href="#winsetprogressbarprogress-options"><code>win.setProgressBar(progress[, options])</code></a><a class="header-link" href="#winsetprogressbarprogress-options" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>progress</code> Double</li>
<li>
<p><code>options</code> Object (optional)</p>
<ul>
<li><code>mode</code> String <em class="platform-label">Windows</em> - Mode for the progress bar. Can be <code>none</code>, <code>normal</code>, <code>indeterminate</code>, <code>error</code>, or <code>paused</code>.</li>
</ul>
</li>
</ul>
<p>Sets progress value in progress bar. Valid range is [0, 1.0].</p>
<p>Remove progress bar when progress &lt; 0;
Change to indeterminate mode when progress &gt; 1.</p>
<p>On Linux platform, only supports Unity desktop environment, you need to specify
the <code>*.desktop</code> file name to <code>desktopName</code> field in <code>package.json</code>. By default,
it will assume <code>app.getName().desktop</code>.</p>
<p>On Windows, a mode can be passed. Accepted values are <code>none</code>, <code>normal</code>,
<code>indeterminate</code>, <code>error</code>, and <code>paused</code>. If you call <code>setProgressBar</code> without a
mode set (but with a value within the valid range), <code>normal</code> will be assumed.</p>
<h4 id="winsetoverlayiconoverlay-description-windows"><a href="#winsetoverlayiconoverlay-description-windows"><code>win.setOverlayIcon(overlay, description)</code> <em class="platform-label">Windows</em></a><a class="header-link" href="#winsetoverlayiconoverlay-description-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>overlay</code> <a href="https://electronjs.org/docs/api/native-image">NativeImage</a> - the icon to display on the bottom
right corner of the taskbar icon. If this parameter is <code>null</code>, the overlay is
cleared</li>
<li><code>description</code> String - a description that will be provided to Accessibility
screen readers</li>
</ul>
<p>Sets a 16 x 16 pixel overlay onto the current taskbar icon, usually used to
convey some sort of application status or to passively notify the user.</p>
<h4 id="winsethasshadowhasshadow-macos"><a href="#winsethasshadowhasshadow-macos"><code>win.setHasShadow(hasShadow)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#winsethasshadowhasshadow-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>hasShadow</code> Boolean</li>
</ul>
<p>Sets whether the window should have a shadow. On Windows and Linux does
nothing.</p>
<h4 id="winhasshadow-macos"><a href="#winhasshadow-macos"><code>win.hasShadow()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#winhasshadow-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the window has a shadow.</p>
<p>On Windows and Linux always returns
<code>true</code>.</p>
<h4 id="winsetopacityopacity-windows-macos"><a href="#winsetopacityopacity-windows-macos"><code>win.setOpacity(opacity)</code> <em class="platform-label">Windows</em> <em class="platform-label">macOS</em></a><a class="header-link" href="#winsetopacityopacity-windows-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>opacity</code> Number - between 0.0 (fully transparent) and 1.0 (fully opaque)</li>
</ul>
<p>Sets the opacity of the window. On Linux does nothing.</p>
<h4 id="wingetopacity-windows-macos"><a href="#wingetopacity-windows-macos"><code>win.getOpacity()</code> <em class="platform-label">Windows</em> <em class="platform-label">macOS</em></a><a class="header-link" href="#wingetopacity-windows-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Number</code> - between 0.0 (fully transparent) and 1.0 (fully opaque)</p>
<h4 id="winsetthumbarbuttonsbuttons-windows"><a href="#winsetthumbarbuttonsbuttons-windows"><code>win.setThumbarButtons(buttons)</code> <em class="platform-label">Windows</em></a><a class="header-link" href="#winsetthumbarbuttonsbuttons-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>buttons</code> <a href="https://electronjs.org/docs/api/structures/thumbar-button">ThumbarButton[]</a></li>
</ul>
<p>Returns <code>Boolean</code> - Whether the buttons were added successfully</p>
<p>Add a thumbnail toolbar with a specified set of buttons to the thumbnail image
of a window in a taskbar button layout. Returns a <code>Boolean</code> object indicates
whether the thumbnail has been added successfully.</p>
<p>The number of buttons in thumbnail toolbar should be no greater than 7 due to
the limited room. Once you setup the thumbnail toolbar, the toolbar cannot be
removed due to the platform's limitation. But you can call the API with an empty
array to clean the buttons.</p>
<p>The <code>buttons</code> is an array of <code>Button</code> objects:</p>
<ul>
<li>
<p><code>Button</code> Object</p>
<ul>
<li><code>icon</code> <a href="https://electronjs.org/docs/api/native-image">NativeImage</a> - The icon showing in thumbnail
toolbar.</li>
<li><code>click</code> Function</li>
<li><code>tooltip</code> String (optional) - The text of the button's tooltip.</li>
<li><code>flags</code> String<a href="https://electronjs.org/docs/api/optional"></a> - Control specific states and behaviors of the
button. By default, it is <code>['enabled']</code>.</li>
</ul>
</li>
</ul>
<p>The <code>flags</code> is an array that can include following <code>String</code>s:</p>
<ul>
<li><code>enabled</code> - The button is active and available to the user.</li>
<li><code>disabled</code> - The button is disabled. It is present, but has a visual state
indicating it will not respond to user action.</li>
<li><code>dismissonclick</code> - When the button is clicked, the thumbnail window closes
immediately.</li>
<li><code>nobackground</code> - Do not draw a button border, use only the image.</li>
<li><code>hidden</code> - The button is not shown to the user.</li>
<li><code>noninteractive</code> - The button is enabled but not interactive; no pressed
button state is drawn. This value is intended for instances where the button
is used in a notification.</li>
</ul>
<h4 id="winsetthumbnailclipregion-windows"><a href="#winsetthumbnailclipregion-windows"><code>win.setThumbnailClip(region)</code> <em class="platform-label">Windows</em></a><a class="header-link" href="#winsetthumbnailclipregion-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>region</code> <a href="https://electronjs.org/docs/api/structures/rectangle">Rectangle</a> - Region of the window</li>
</ul>
<p>Sets the region of the window to show as the thumbnail image displayed when
hovering over the window in the taskbar. You can reset the thumbnail to be
the entire window by specifying an empty region:
<code>{x: 0, y: 0, width: 0, height: 0}</code>.</p>
<h4 id="winsetthumbnailtooltiptooltip-windows"><a href="#winsetthumbnailtooltiptooltip-windows"><code>win.setThumbnailToolTip(toolTip)</code> <em class="platform-label">Windows</em></a><a class="header-link" href="#winsetthumbnailtooltiptooltip-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>toolTip</code> String</li>
</ul>
<p>Sets the toolTip that is displayed when hovering over the window thumbnail
in the taskbar.</p>
<h4 id="winsetappdetailsoptions-windows"><a href="#winsetappdetailsoptions-windows"><code>win.setAppDetails(options)</code> <em class="platform-label">Windows</em></a><a class="header-link" href="#winsetappdetailsoptions-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>appId</code> String (optional) - Window's <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd391569(v=vs.85).aspx">App User Model ID</a>.
It has to be set, otherwise the other options will have no effect.</li>
<li><code>appIconPath</code> String (optional) - Window's <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd391573(v=vs.85).aspx">Relaunch Icon</a>.</li>
<li><code>appIconIndex</code> Integer (optional) - Index of the icon in <code>appIconPath</code>.
Ignored when <code>appIconPath</code> is not set. Default is <code>0</code>.</li>
<li><code>relaunchCommand</code> String (optional) - Window's <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd391571(v=vs.85).aspx">Relaunch Command</a>.</li>
<li><code>relaunchDisplayName</code> String (optional) - Window's <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd391572(v=vs.85).aspx">Relaunch Display Name</a>.</li>
</ul>
</li>
</ul>
<p>Sets the properties for the window's taskbar button.</p>
<p><strong>Note:</strong> <code>relaunchCommand</code> and <code>relaunchDisplayName</code> must always be set
together. If one of those properties is not set, then neither will be used.</p>
<h4 id="winshowdefinitionforselection-macos"><a href="#winshowdefinitionforselection-macos"><code>win.showDefinitionForSelection()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#winshowdefinitionforselection-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Same as <code>webContents.showDefinitionForSelection()</code>.</p>
<h4 id="winseticonicon-windows-linux"><a href="#winseticonicon-windows-linux"><code>win.setIcon(icon)</code> <em class="platform-label">Windows</em> <em class="platform-label">Linux</em></a><a class="header-link" href="#winseticonicon-windows-linux" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>icon</code> <a href="https://electronjs.org/docs/api/native-image">NativeImage</a></li>
</ul>
<p>Changes window icon.</p>
<h4 id="winsetautohidemenubarhide"><a href="#winsetautohidemenubarhide"><code>win.setAutoHideMenuBar(hide)</code></a><a class="header-link" href="#winsetautohidemenubarhide" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>hide</code> Boolean</li>
</ul>
<p>Sets whether the window menu bar should hide itself automatically. Once set the
menu bar will only show when users press the single <code>Alt</code> key.</p>
<p>If the menu bar is already visible, calling <code>setAutoHideMenuBar(true)</code> won't
hide it immediately.</p>
<h4 id="winismenubarautohide"><a href="#winismenubarautohide"><code>win.isMenuBarAutoHide()</code></a><a class="header-link" href="#winismenubarautohide" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether menu bar automatically hides itself.</p>
<h4 id="winsetmenubarvisibilityvisible-windows-linux"><a href="#winsetmenubarvisibilityvisible-windows-linux"><code>win.setMenuBarVisibility(visible)</code> <em class="platform-label">Windows</em> <em class="platform-label">Linux</em></a><a class="header-link" href="#winsetmenubarvisibilityvisible-windows-linux" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>visible</code> Boolean</li>
</ul>
<p>Sets whether the menu bar should be visible. If the menu bar is auto-hide, users
can still bring up the menu bar by pressing the single <code>Alt</code> key.</p>
<h4 id="winismenubarvisible"><a href="#winismenubarvisible"><code>win.isMenuBarVisible()</code></a><a class="header-link" href="#winismenubarvisible" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the menu bar is visible.</p>
<h4 id="winsetvisibleonallworkspacesvisible"><a href="#winsetvisibleonallworkspacesvisible"><code>win.setVisibleOnAllWorkspaces(visible)</code></a><a class="header-link" href="#winsetvisibleonallworkspacesvisible" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>visible</code> Boolean</li>
</ul>
<p>Sets whether the window should be visible on all workspaces.</p>
<p><strong>Note:</strong> This API does nothing on Windows.</p>
<h4 id="winisvisibleonallworkspaces"><a href="#winisvisibleonallworkspaces"><code>win.isVisibleOnAllWorkspaces()</code></a><a class="header-link" href="#winisvisibleonallworkspaces" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the window is visible on all workspaces.</p>
<p><strong>Note:</strong> This API always returns false on Windows.</p>
<h4 id="winsetignoremouseeventsignore-options"><a href="#winsetignoremouseeventsignore-options"><code>win.setIgnoreMouseEvents(ignore[, options])</code></a><a class="header-link" href="#winsetignoremouseeventsignore-options" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>ignore</code> Boolean</li>
<li>
<p><code>options</code> Object (optional)</p>
<ul>
<li><code>forward</code> Boolean (optional) <em class="platform-label">Windows</em> - If true, forwards mouse move
messages to Chromium, enabling mouse related events such as <code>mouseleave</code>.
Only used when <code>ignore</code> is true. If <code>ignore</code> is false, forwarding is always
disabled regardless of this value.</li>
</ul>
</li>
</ul>
<p>Makes the window ignore all mouse events.</p>
<p>All mouse events happened in this window will be passed to the window below
this window, but if this window has focus, it will still receive keyboard
events.</p>
<h4 id="winsetcontentprotectionenable-macos-windows"><a href="#winsetcontentprotectionenable-macos-windows"><code>win.setContentProtection(enable)</code> <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#winsetcontentprotectionenable-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>enable</code> Boolean</li>
</ul>
<p>Prevents the window contents from being captured by other apps.</p>
<p>On macOS it sets the NSWindow's sharingType to NSWindowSharingNone.
On Windows it calls SetWindowDisplayAffinity with <code>WDA_MONITOR</code>.</p>
<h4 id="winsetfocusablefocusable-windows"><a href="#winsetfocusablefocusable-windows"><code>win.setFocusable(focusable)</code> <em class="platform-label">Windows</em></a><a class="header-link" href="#winsetfocusablefocusable-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>focusable</code> Boolean</li>
</ul>
<p>Changes whether the window can be focused.</p>
<h4 id="winsetparentwindowparent-linux-macos"><a href="#winsetparentwindowparent-linux-macos"><code>win.setParentWindow(parent)</code> <em class="platform-label">Linux</em> <em class="platform-label">macOS</em></a><a class="header-link" href="#winsetparentwindowparent-linux-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>parent</code> BrowserWindow</li>
</ul>
<p>Sets <code>parent</code> as current window's parent window, passing <code>null</code> will turn
current window into a top-level window.</p>
<h4 id="wingetparentwindow"><a href="#wingetparentwindow"><code>win.getParentWindow()</code></a><a class="header-link" href="#wingetparentwindow" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>BrowserWindow</code> - The parent window.</p>
<h4 id="wingetchildwindows"><a href="#wingetchildwindows"><code>win.getChildWindows()</code></a><a class="header-link" href="#wingetchildwindows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>BrowserWindow[]</code> - All child windows.</p>
<h4 id="winsetautohidecursorautohide-macos"><a href="#winsetautohidecursorautohide-macos"><code>win.setAutoHideCursor(autoHide)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#winsetautohidecursorautohide-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>autoHide</code> Boolean</li>
</ul>
<p>Controls whether to hide cursor when typing.</p>
<h4 id="winselectprevioustab-macos"><a href="#winselectprevioustab-macos"><code>win.selectPreviousTab()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#winselectprevioustab-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Selects the previous tab when native tabs are enabled and there are other
tabs in the window.</p>
<h4 id="winselectnexttab-macos"><a href="#winselectnexttab-macos"><code>win.selectNextTab()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#winselectnexttab-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Selects the next tab when native tabs are enabled and there are other
tabs in the window.</p>
<h4 id="winmergeallwindows-macos"><a href="#winmergeallwindows-macos"><code>win.mergeAllWindows()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#winmergeallwindows-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Merges all windows into one window with multiple tabs when native tabs
are enabled and there is more than one open window.</p>
<h4 id="winmovetabtonewwindow-macos"><a href="#winmovetabtonewwindow-macos"><code>win.moveTabToNewWindow()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#winmovetabtonewwindow-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Moves the current tab into a new window if native tabs are enabled and
there is more than one tab in the current window.</p>
<h4 id="wintoggletabbar-macos"><a href="#wintoggletabbar-macos"><code>win.toggleTabBar()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#wintoggletabbar-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Toggles the visibility of the tab bar if native tabs are enabled and
there is only one tab in the current window.</p>
<h4 id="winaddtabbedwindowbrowserwindow-macos"><a href="#winaddtabbedwindowbrowserwindow-macos"><code>win.addTabbedWindow(browserWindow)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#winaddtabbedwindowbrowserwindow-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>browserWindow</code> BrowserWindow</li>
</ul>
<p>Adds a window as a tab on this window, after the tab for the window instance.</p>
<h4 id="winsetvibrancytype-macos"><a href="#winsetvibrancytype-macos"><code>win.setVibrancy(type)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#winsetvibrancytype-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>type</code> String - Can be <code>appearance-based</code>, <code>light</code>, <code>dark</code>, <code>titlebar</code>,
<code>selection</code>, <code>menu</code>, <code>popover</code>, <code>sidebar</code>, <code>medium-light</code> or <code>ultra-dark</code>. See
the <a href="https://developer.apple.com/reference/appkit/nsvisualeffectview?language=objc">macOS documentation</a> for more details.</li>
</ul>
<p>Adds a vibrancy effect to the browser window. Passing <code>null</code> or an empty string
will remove the vibrancy effect on the window.</p>
<h4 id="winsettouchbartouchbar-macos-experimental"><a href="#winsettouchbartouchbar-macos-experimental"><code>win.setTouchBar(touchBar)</code> <em class="platform-label">macOS</em> <em>Experimental</em></a><a class="header-link" href="#winsettouchbartouchbar-macos-experimental" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>touchBar</code> TouchBar</li>
</ul>
<p>Sets the touchBar layout for the current window. Specifying <code>null</code> or
<code>undefined</code> clears the touch bar. This method only has an effect if the
machine has a touch bar and is running on macOS 10.12.1+.</p>
<p><strong>Note:</strong> The TouchBar API is currently experimental and may change or be
removed in future Electron releases.</p>
<h4 id="winsetbrowserviewbrowserview-experimental"><a href="#winsetbrowserviewbrowserview-experimental"><code>win.setBrowserView(browserView)</code> <em>Experimental</em></a><a class="header-link" href="#winsetbrowserviewbrowserview-experimental" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>browserView</code> <a href="https://electronjs.org/docs/api/browser-view">BrowserView</a></li>
</ul>
<h4 id="wingetbrowserview-experimental"><a href="#wingetbrowserview-experimental"><code>win.getBrowserView()</code> <em>Experimental</em></a><a class="header-link" href="#wingetbrowserview-experimental" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>BrowserView | null</code> - an attached BrowserView. Returns <code>null</code> if none is attached.</p>
<p><strong>Note:</strong> The BrowserView API is currently experimental and may change or be
removed in future Electron releases.</p>

  <hr>
  <h2 id="class-browserwindowproxy"><a href="#class-browserwindowproxy">Class: BrowserWindowProxy</a><a class="header-link" href="#class-browserwindowproxy" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>Manipulate the child browser window</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#renderer-process">Renderer</a></p>
<p>The <code>BrowserWindowProxy</code> object is returned from <code>window.open</code> and provides
limited functionality with the child window.</p>
<h3 id="instance-methods"><a href="#instance-methods">Instance Methods</a><a class="header-link" href="#instance-methods" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The <code>BrowserWindowProxy</code> object has the following instance methods:</p>
<h4 id="winblur"><a href="#winblur"><code>win.blur()</code></a><a class="header-link" href="#winblur" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Removes focus from the child window.</p>
<h4 id="winclose"><a href="#winclose"><code>win.close()</code></a><a class="header-link" href="#winclose" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Forcefully closes the child window without calling its unload event.</p>
<h4 id="winevalcode"><a href="#winevalcode"><code>win.eval(code)</code></a><a class="header-link" href="#winevalcode" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>code</code> String</li>
</ul>
<p>Evaluates the code in the child window.</p>
<h4 id="winfocus"><a href="#winfocus"><code>win.focus()</code></a><a class="header-link" href="#winfocus" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Focuses the child window (brings the window to front).</p>
<h4 id="winprint"><a href="#winprint"><code>win.print()</code></a><a class="header-link" href="#winprint" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Invokes the print dialog on the child window.</p>
<h4 id="winpostmessagemessage-targetorigin"><a href="#winpostmessagemessage-targetorigin"><code>win.postMessage(message, targetOrigin)</code></a><a class="header-link" href="#winpostmessagemessage-targetorigin" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>message</code> String</li>
<li><code>targetOrigin</code> String</li>
</ul>
<p>Sends a message to the child window with the specified origin or <code>*</code> for no
origin preference.</p>
<p>In addition to these methods, the child window implements <code>window.opener</code> object
with no properties and a single method.</p>
<h3 id="instance-properties"><a href="#instance-properties">Instance Properties</a><a class="header-link" href="#instance-properties" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The <code>BrowserWindowProxy</code> object has the following instance properties:</p>
<h4 id="winclosed"><a href="#winclosed"><code>win.closed</code></a><a class="header-link" href="#winclosed" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>Boolean</code> that is set to true after the child window gets closed.</p>

  <hr>
  <h1 id="build-instructions-linux"><a href="#build-instructions-linux">Build Instructions (Linux)</a><a class="header-link" href="#build-instructions-linux" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>Follow the guidelines below for building Electron on Linux.</p>
<h2 id="prerequisites"><a href="#prerequisites">Prerequisites</a><a class="header-link" href="#prerequisites" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<ul>
<li>At least 25GB disk space and 8GB RAM.</li>
<li>Python 2.7.x. Some distributions like CentOS 6.x still use Python 2.6.x
so you may need to check your Python version with <code>python -V</code>.</li>
<li>Node.js. There are various ways to install Node. You can download
source code from <a href="https://nodejs.org/">nodejs.org</a> and compile it.
Doing so permits installing Node on your own home directory as a standard user.
Or try repositories such as <a href="https://nodesource.com/blog/nodejs-v012-iojs-and-the-nodesource-linux-repositories">NodeSource</a>.</li>
<li><a href="https://clang.llvm.org/get_started.html">clang</a> 3.4 or later.</li>
<li>Development headers of GTK+ and libnotify.</li>
</ul>
<p>On Ubuntu, install the following libraries:</p>
<pre><code class="hljs language-sh" id="_n3aeqst">$ sudo apt-get install build-essential clang libdbus-1-dev libgtk2.0-dev \
                       libnotify-dev libgnome-keyring-dev libgconf2-dev \
                       libasound2-dev libcap-dev libcups2-dev libxtst-dev \
                       libxss1 libnss3-dev gcc-multilib g++-multilib curl \
                       gperf bison</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_n3aeqst">Copy</button></pre>
<p>On RHEL / CentOS, install the following libraries:</p>
<pre><code class="hljs language-sh" id="_z5l2tcbg">$ sudo yum install clang dbus-devel gtk2-devel libnotify-devel \
                   libgnome-keyring-devel xorg-x11-server-utils libcap-devel \
                   cups-devel libXtst-devel alsa-lib-devel libXrandr-devel \
                   GConf2-devel nss-devel</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_z5l2tcbg">Copy</button></pre>
<p>On Fedora, install the following libraries:</p>
<pre><code class="hljs language-sh" id="_o2u0zem">$ sudo dnf install clang dbus-devel gtk2-devel libnotify-devel \
                   libgnome-keyring-devel xorg-x11-server-utils libcap-devel \
                   cups-devel libXtst-devel alsa-lib-devel libXrandr-devel \
                   GConf2-devel nss-devel</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_o2u0zem">Copy</button></pre>
<p>Other distributions may offer similar packages for installation via package
managers such as pacman. Or one can compile from source code.</p>
<h2 id="getting-the-code"><a href="#getting-the-code">Getting the Code</a><a class="header-link" href="#getting-the-code" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<pre><code class="hljs language-sh" id="_0h722cxl">$ git <span class="hljs-built_in">clone</span> https://github.com/electron/electron</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_0h722cxl">Copy</button></pre>
<h2 id="bootstrapping"><a href="#bootstrapping">Bootstrapping</a><a class="header-link" href="#bootstrapping" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The bootstrap script will download all necessary build dependencies and create
the build project files. You must have Python 2.7.x for the script to succeed.
Downloading certain files can take a long time. Notice that we are using
<code>ninja</code> to build Electron so there is no <code>Makefile</code> generated.</p>
<pre><code class="hljs language-sh" id="_1px4a9zl">$ <span class="hljs-built_in">cd</span> electron
$ ./script/bootstrap.py --verbose</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_1px4a9zl">Copy</button></pre>
<h3 id="cross-compilation"><a href="#cross-compilation">Cross compilation</a><a class="header-link" href="#cross-compilation" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>If you want to build for an <code>arm</code> target you should also install the following
dependencies:</p>
<pre><code class="hljs language-sh" id="_mtgydkw">$ sudo apt-get install libc6-dev-armhf-cross linux-libc-dev-armhf-cross \
                       g++-arm-linux-gnueabihf</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_mtgydkw">Copy</button></pre>
<p>Similarly for <code>arm64</code>, install the following:</p>
<pre><code class="hljs language-sh" id="_2xwm2cw">$ sudo apt-get install libc6-dev-arm64-cross linux-libc-dev-arm64-cross \
                       g++-aarch64-linux-gnu</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_2xwm2cw">Copy</button></pre>
<p>And to cross-compile for <code>arm</code> or <code>ia32</code> targets, you should pass the
<code>--target_arch</code> parameter to the <code>bootstrap.py</code> script:</p>
<pre><code class="hljs language-sh" id="_48w6sgo4">$ ./script/bootstrap.py -v --target_arch=arm</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_48w6sgo4">Copy</button></pre>
<h2 id="building"><a href="#building">Building</a><a class="header-link" href="#building" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>If you would like to build both <code>Release</code> and <code>Debug</code> targets:</p>
<pre><code class="hljs language-sh" id="_nq3x0f6">$ ./script/build.py</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_nq3x0f6">Copy</button></pre>
<p>This script will cause a very large Electron executable to be placed in
the directory <code>out/R</code>. The file size is in excess of 1.3 gigabytes. This
happens because the Release target binary contains debugging symbols.
To reduce the file size, run the <code>create-dist.py</code> script:</p>
<pre><code class="hljs language-sh" id="_54sazp2r">$ ./script/create-dist.py</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_54sazp2r">Copy</button></pre>
<p>This will put a working distribution with much smaller file sizes in
the <code>dist</code> directory. After running the <code>create-dist.py</code> script, you
may want to remove the 1.3+ gigabyte binary which is still in <code>out/R</code>.</p>
<p>You can also build the <code>Debug</code> target only:</p>
<pre><code class="hljs language-sh" id="_489q57hd">$ ./script/build.py -c D</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_489q57hd">Copy</button></pre>
<p>After building is done, you can find the <code>electron</code> debug binary under <code>out/D</code>.</p>
<h2 id="cleaning"><a href="#cleaning">Cleaning</a><a class="header-link" href="#cleaning" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>To clean the build files:</p>
<pre><code class="hljs language-sh" id="_os1cqgkk">$ npm run clean</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_os1cqgkk">Copy</button></pre>
<p>To clean only <code>out</code> and <code>dist</code> directories:</p>
<pre><code class="hljs language-sh" id="_wixnusld">$ npm run clean-build</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_wixnusld">Copy</button></pre>
<p><strong>Note:</strong> Both clean commands require running <code>bootstrap</code> again before building.</p>
<h2 id="troubleshooting"><a href="#troubleshooting">Troubleshooting</a><a class="header-link" href="#troubleshooting" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<h3 id="error-while-loading-shared-libraries-libtinfoso5"><a href="#error-while-loading-shared-libraries-libtinfoso5">Error While Loading Shared Libraries: libtinfo.so.5</a><a class="header-link" href="#error-while-loading-shared-libraries-libtinfoso5" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Prebuilt <code>clang</code> will try to link to <code>libtinfo.so.5</code>. Depending on the host
architecture, symlink to appropriate <code>libncurses</code>:</p>
<pre><code class="hljs language-sh" id="_m0j3u0ka">$ sudo ln -s /usr/lib/libncurses.so.5 /usr/lib/libtinfo.so.5</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_m0j3u0ka">Copy</button></pre>
<h2 id="tests"><a href="#tests">Tests</a><a class="header-link" href="#tests" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>See <a href="https://electronjs.org/docs/development/build-system-overview#tests">Build System Overview: Tests</a></p>
<h2 id="advanced-topics"><a href="#advanced-topics">Advanced topics</a><a class="header-link" href="#advanced-topics" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The default building configuration is targeted for major desktop Linux
distributions. To build for a specific distribution or device, the following
information may help you.</p>
<h3 id="building-libchromiumcontent-locally"><a href="#building-libchromiumcontent-locally">Building <code>libchromiumcontent</code> locally</a><a class="header-link" href="#building-libchromiumcontent-locally" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>To avoid using the prebuilt binaries of <code>libchromiumcontent</code>, you can build <code>libchromiumcontent</code> locally. To do so, follow these steps:</p>
<ol>
<li>Install <a href="https://chromium.googlesource.com/chromium/src/+/master/docs/linux_build_instructions.md#Install">depot_tools</a></li>
<li>Install <a href="https://chromium.googlesource.com/chromium/src/+/master/docs/linux_build_instructions.md#Install-additional-build-dependencies">additional build dependencies</a></li>
<li>Fetch the git submodules:</li>
</ol>
<pre><code class="hljs language-sh" id="_q4wicy68">$ git submodule update --init --recursive</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_q4wicy68">Copy</button></pre>
<ol start="4">
<li>Pass the <code>--build_release_libcc</code> switch to <code>bootstrap.py</code> script:</li>
</ol>
<pre><code class="hljs language-sh" id="_4iwwm6fn">$ ./script/bootstrap.py -v --build_release_libcc</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_4iwwm6fn">Copy</button></pre>
<p>Note that by default the <code>shared_library</code> configuration is not built, so you can
only build <code>Release</code> version of Electron if you use this mode:</p>
<pre><code class="hljs language-sh" id="_ufbykg3q">$ ./script/build.py -c R</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_ufbykg3q">Copy</button></pre>
<h3 id="using-system-clang-instead-of-downloaded-clang-binaries"><a href="#using-system-clang-instead-of-downloaded-clang-binaries">Using system <code>clang</code> instead of downloaded <code>clang</code> binaries</a><a class="header-link" href="#using-system-clang-instead-of-downloaded-clang-binaries" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>By default Electron is built with prebuilt
<a href="https://clang.llvm.org/get_started.html"><code>clang</code></a> binaries provided by the
Chromium project. If for some reason you want to build with the <code>clang</code>
installed in your system, you can call <code>bootstrap.py</code> with <code>--clang_dir=&lt;path&gt;</code>
switch. By passing it the build script will assume the <code>clang</code> binaries reside
in <code>&lt;path&gt;/bin/</code>.</p>
<p>For example if you installed <code>clang</code> under <code>/user/local/bin/clang</code>:</p>
<pre><code class="hljs language-sh" id="_34ppu61">$ ./script/bootstrap.py -v --build_release_libcc --clang_dir /usr/<span class="hljs-built_in">local</span>
$ ./script/build.py -c R</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_34ppu61">Copy</button></pre>
<h3 id="using-compilers-other-than-clang"><a href="#using-compilers-other-than-clang">Using compilers other than <code>clang</code></a><a class="header-link" href="#using-compilers-other-than-clang" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>To build Electron with compilers like <code>g++</code>, you first need to disable <code>clang</code>
with <code>--disable_clang</code> switch first, and then set <code>CC</code> and <code>CXX</code> environment
variables to the ones you want.</p>
<p>For example building with GCC toolchain:</p>
<pre><code class="hljs language-sh" id="_im0eliz">$ env CC=gcc CXX=g++ ./script/bootstrap.py -v --build_release_libcc --disable_clang
$ ./script/build.py -c R</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_im0eliz">Copy</button></pre>
<h3 id="environment-variables"><a href="#environment-variables">Environment variables</a><a class="header-link" href="#environment-variables" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Apart from <code>CC</code> and <code>CXX</code>, you can also set the following environment variables to
customise the build configuration:</p>
<ul>
<li><code>CPPFLAGS</code></li>
<li><code>CPPFLAGS_host</code></li>
<li><code>CFLAGS</code></li>
<li><code>CFLAGS_host</code></li>
<li><code>CXXFLAGS</code></li>
<li><code>CXXFLAGS_host</code></li>
<li><code>AR</code></li>
<li><code>AR_host</code></li>
<li><code>CC</code></li>
<li><code>CC_host</code></li>
<li><code>CXX</code></li>
<li><code>CXX_host</code></li>
<li><code>LDFLAGS</code></li>
</ul>
<p>The environment variables have to be set when executing the <code>bootstrap.py</code>
script, it won't work in the <code>build.py</code> script.</p>

  <hr>
  <h1 id="build-instructions-macos"><a href="#build-instructions-macos">Build Instructions (macOS)</a><a class="header-link" href="#build-instructions-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>Follow the guidelines below for building Electron on macOS.</p>
<h2 id="prerequisites"><a href="#prerequisites">Prerequisites</a><a class="header-link" href="#prerequisites" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<ul>
<li>macOS &gt;= 10.11.6</li>
<li><a href="https://developer.apple.com/technologies/tools/">Xcode</a> &gt;= 8.2.1</li>
<li><a href="https://nodejs.org/">node.js</a> (external)</li>
</ul>
<p>If you are using the Python downloaded by Homebrew, you also need to install
the following Python modules:</p>
<ul>
<li><a href="https://pythonhosted.org/pyobjc/install.html">pyobjc</a></li>
</ul>
<h2 id="macos-sdk"><a href="#macos-sdk">macOS SDK</a><a class="header-link" href="#macos-sdk" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>If you're simply developing Electron and don't plan to redistribute your
custom Electron build, you may skip this section.</p>
<p>For certain features (e.g. pinch-zoom) to work properly, you must target the
macOS 10.10 SDK.</p>
<p>Official Electron builds are built with <a href="http://adcdownload.apple.com/Developer_Tools/Xcode_8.2.1/Xcode_8.2.1.xip">Xcode 8.2.1</a>, which does not contain
the 10.10 SDK by default. To obtain it, first download and mount the
<a href="http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/Xcode_6.4/Xcode_6.4.dmg">Xcode 6.4</a>
DMG.</p>
<p>Then, assuming that the Xcode 6.4 DMG has been mounted at <code>/Volumes/Xcode</code> and
that your Xcode 8.2.1 install is at <code>/Applications/Xcode.app</code>, run:</p>
<pre><code class="hljs language-sh" id="_zsjccn6j">cp -r /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_zsjccn6j">Copy</button></pre>
<p>You will also need to enable Xcode to build against the 10.10 SDK:</p>
<ul>
<li>Open <code>/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Info.plist</code></li>
<li>Set the <code>MinimumSDKVersion</code> to <code>10.10</code></li>
<li>Save the file</li>
</ul>
<h2 id="getting-the-code"><a href="#getting-the-code">Getting the Code</a><a class="header-link" href="#getting-the-code" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<pre><code class="hljs language-sh" id="_vlvit7k">$ git <span class="hljs-built_in">clone</span> https://github.com/electron/electron</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_vlvit7k">Copy</button></pre>
<h2 id="bootstrapping"><a href="#bootstrapping">Bootstrapping</a><a class="header-link" href="#bootstrapping" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The bootstrap script will download all necessary build dependencies and create
the build project files. Notice that we're using <a href="https://ninja-build.org/">ninja</a>
to build Electron so there is no Xcode project generated.</p>
<pre><code class="hljs language-sh" id="_l24wr5qb">$ <span class="hljs-built_in">cd</span> electron
$ ./script/bootstrap.py -v</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_l24wr5qb">Copy</button></pre>
<h2 id="building"><a href="#building">Building</a><a class="header-link" href="#building" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Build both <code>Release</code> and <code>Debug</code> targets:</p>
<pre><code class="hljs language-sh" id="_py7ekv3">$ ./script/build.py</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_py7ekv3">Copy</button></pre>
<p>You can also only build the <code>Debug</code> target:</p>
<pre><code class="hljs language-sh" id="_mb43bizu">$ ./script/build.py -c D</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_mb43bizu">Copy</button></pre>
<p>After building is done, you can find <code>Electron.app</code> under <code>out/D</code>.</p>
<h2 id="32bit-support"><a href="#32bit-support">32bit Support</a><a class="header-link" href="#32bit-support" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Electron can only be built for a 64bit target on macOS and there is no plan to
support 32bit macOS in the future.</p>
<h2 id="cleaning"><a href="#cleaning">Cleaning</a><a class="header-link" href="#cleaning" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>To clean the build files:</p>
<pre><code class="hljs language-sh" id="_ywejsrvj">$ npm run clean</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_ywejsrvj">Copy</button></pre>
<p>To clean only <code>out</code> and <code>dist</code> directories:</p>
<pre><code class="hljs language-sh" id="_7173veo2">$ npm run clean-build</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_7173veo2">Copy</button></pre>
<p><strong>Note:</strong> Both clean commands require running <code>bootstrap</code> again before building.</p>
<h2 id="tests"><a href="#tests">Tests</a><a class="header-link" href="#tests" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>See <a href="https://electronjs.org/docs/development/build-system-overview#tests">Build System Overview: Tests</a></p>

  <hr>
  <h1 id="build-instructions-windows"><a href="#build-instructions-windows">Build Instructions (Windows)</a><a class="header-link" href="#build-instructions-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>Follow the guidelines below for building Electron on Windows.</p>
<h2 id="prerequisites"><a href="#prerequisites">Prerequisites</a><a class="header-link" href="#prerequisites" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<ul>
<li>Windows 7 / Server 2008 R2 or higher</li>
<li>Visual Studio 2015 Update 3 - <a href="https://www.visualstudio.com/vs/older-downloads/">download VS 2015 Community Edition for
free</a></li>
<li><a href="http://www.python.org/download/releases/2.7/">Python 2.7</a></li>
<li><a href="https://nodejs.org/download/">Node.js</a></li>
<li><a href="http://git-scm.com/">Git</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/windows/hardware/ff551063.aspx">Debugging Tools for Windows</a>
if you plan on creating a full distribution since <code>symstore.exe</code> is used for
creating a symbol store from <code>.pdb</code> files.</li>
</ul>
<p>If you don't currently have a Windows installation,
<a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/">dev.microsoftedge.com</a>
has timebombed versions of Windows that you can use to build Electron.</p>
<p>Building Electron is done entirely with command-line scripts and cannot be done
with Visual Studio. You can develop Electron with any editor but support for
building with Visual Studio will come in the future.</p>
<p><strong>Note:</strong> Even though Visual Studio is not used for building, it's still
<strong>required</strong> because we need the build toolchains it provides.</p>
<h2 id="getting-the-code"><a href="#getting-the-code">Getting the Code</a><a class="header-link" href="#getting-the-code" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<pre><code class="hljs language-powershell" id="_qka4jwrp">$ git clone https://github.com/electron/electron.git</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_qka4jwrp">Copy</button></pre>
<h2 id="bootstrapping"><a href="#bootstrapping">Bootstrapping</a><a class="header-link" href="#bootstrapping" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The bootstrap script will download all necessary build dependencies and create
the build project files. Notice that we're using <code>ninja</code> to build Electron so
there is no Visual Studio project generated.</p>
<pre><code class="hljs language-powershell" id="_h1ck4nk">$ cd electron
$ python script\bootstrap.py -v</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_h1ck4nk">Copy</button></pre>
<h2 id="building"><a href="#building">Building</a><a class="header-link" href="#building" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Build both Release and Debug targets:</p>
<pre><code class="hljs language-powershell" id="_sfmxra">$ python script\build.py</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_sfmxra">Copy</button></pre>
<p>You can also only build the Debug target:</p>
<pre><code class="hljs language-powershell" id="_dznhxqlm">$ python script\build.py -c D</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_dznhxqlm">Copy</button></pre>
<p>After building is done, you can find <code>electron.exe</code> under <code>out\D</code> (debug
target) or under <code>out\R</code> (release target).</p>
<h2 id="32bit-build"><a href="#32bit-build">32bit Build</a><a class="header-link" href="#32bit-build" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>To build for the 32bit target, you need to pass <code>--target_arch=ia32</code> when
running the bootstrap script:</p>
<pre><code class="hljs language-powershell" id="_arh9qvg">$ python script\bootstrap.py -v --target_arch=ia32</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_arh9qvg">Copy</button></pre>
<p>The other building steps are exactly the same.</p>
<h2 id="visual-studio-project"><a href="#visual-studio-project">Visual Studio project</a><a class="header-link" href="#visual-studio-project" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>To generate a Visual Studio project, you can pass the <code>--msvs</code> parameter:</p>
<pre><code class="hljs language-powershell" id="_oiirwxw">$ python script\bootstrap.py --msvs</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_oiirwxw">Copy</button></pre>
<h2 id="cleaning"><a href="#cleaning">Cleaning</a><a class="header-link" href="#cleaning" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>To clean the build files:</p>
<pre><code class="hljs language-powershell" id="_gejta57w">$ npm run clean</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_gejta57w">Copy</button></pre>
<p>To clean only <code>out</code> and <code>dist</code> directories:</p>
<pre><code class="hljs language-sh" id="_on7o9jxj">$ npm run clean-build</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_on7o9jxj">Copy</button></pre>
<p><strong>Note:</strong> Both clean commands require running <code>bootstrap</code> again before building.</p>
<h2 id="tests"><a href="#tests">Tests</a><a class="header-link" href="#tests" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>See <a href="https://electronjs.org/docs/development/build-system-overview#tests">Build System Overview: Tests</a></p>
<h2 id="troubleshooting"><a href="#troubleshooting">Troubleshooting</a><a class="header-link" href="#troubleshooting" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<h3 id="command-xxxx-not-found"><a href="#command-xxxx-not-found">Command xxxx not found</a><a class="header-link" href="#command-xxxx-not-found" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>If you encountered an error like <code>Command xxxx not found</code>, you may try to use
the <code>VS2015 Command Prompt</code> console to execute the build scripts.</p>
<h3 id="fatal-internal-compiler-error-c1001"><a href="#fatal-internal-compiler-error-c1001">Fatal internal compiler error: C1001</a><a class="header-link" href="#fatal-internal-compiler-error-c1001" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Make sure you have the latest Visual Studio update installed.</p>
<h3 id="assertion-failed-handle-activecnt--0"><a href="#assertion-failed-handle-activecnt--0">Assertion failed: ((handle))-&gt;activecnt &gt;= 0</a><a class="header-link" href="#assertion-failed-handle-activecnt--0" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>If building under Cygwin, you may see <code>bootstrap.py</code> failed with following
error:</p>
<pre><code class="hljs language-sh" id="_k2rlcoaa">Assertion failed: ((handle))-&gt;activecnt &gt;= 0, file src\win\pipe.c, line 1430

Traceback (most recent call last):
  File <span class="hljs-string">"script/bootstrap.py"</span>, line 87, <span class="hljs-keyword">in</span> &lt;module&gt;
    sys.exit(main())
  File <span class="hljs-string">"script/bootstrap.py"</span>, line 22, <span class="hljs-keyword">in</span> main
    update_node_modules(<span class="hljs-string">'.'</span>)
  File <span class="hljs-string">"script/bootstrap.py"</span>, line 56, <span class="hljs-keyword">in</span> update_node_modules
    execute([NPM, <span class="hljs-string">'install'</span>])
  File <span class="hljs-string">"/home/zcbenz/codes/raven/script/lib/util.py"</span>, line 118, <span class="hljs-keyword">in</span> execute
    raise e
subprocess.CalledProcessError: Command <span class="hljs-string">'['</span>npm.cmd<span class="hljs-string">', '</span>install<span class="hljs-string">']'</span> returned non-zero <span class="hljs-built_in">exit</span> status 3</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_k2rlcoaa">Copy</button></pre>
<p>This is caused by a bug when using Cygwin Python and Win32 Node together. The
solution is to use the Win32 Python to execute the bootstrap script (assuming
you have installed Python under <code>C:\Python27</code>):</p>
<pre><code class="hljs language-powershell" id="_6etudqcg">$ /cygdrive/c/Python27/python.exe script/bootstrap.py</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_6etudqcg">Copy</button></pre>
<h3 id="lnk1181-cannot-open-input-file-kernel32lib"><a href="#lnk1181-cannot-open-input-file-kernel32lib">LNK1181: cannot open input file 'kernel32.lib'</a><a class="header-link" href="#lnk1181-cannot-open-input-file-kernel32lib" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Try reinstalling 32bit Node.js.</p>
<h3 id="error-enoent-stat-cusersusernameappdataroamingnpm"><a href="#error-enoent-stat-cusersusernameappdataroamingnpm">Error: ENOENT, stat 'C:\Users\USERNAME\AppData\Roaming\npm'</a><a class="header-link" href="#error-enoent-stat-cusersusernameappdataroamingnpm" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Simply making that directory <a href="https://stackoverflow.com/a/25095327/102704">should fix the problem</a>:</p>
<pre><code class="hljs language-powershell" id="_ysx31zjh">$ mkdir ~\AppData\Roaming\npm</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_ysx31zjh">Copy</button></pre>
<h3 id="node-gyp-is-not-recognized-as-an-internal-or-external-command"><a href="#node-gyp-is-not-recognized-as-an-internal-or-external-command">node-gyp is not recognized as an internal or external command</a><a class="header-link" href="#node-gyp-is-not-recognized-as-an-internal-or-external-command" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>You may get this error if you are using Git Bash for building, you should use
PowerShell or VS2015 Command Prompt instead.</p>

  <hr>
  <h1 id="build-system-overview"><a href="#build-system-overview">Build System Overview</a><a class="header-link" href="#build-system-overview" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>Electron uses <a href="https://gyp.gsrc.io/">gyp</a> for project generation and
<a href="https://ninja-build.org/">ninja</a> for building. Project configurations can
be found in the <code>.gyp</code> and <code>.gypi</code> files.</p>
<h2 id="gyp-files"><a href="#gyp-files">Gyp Files</a><a class="header-link" href="#gyp-files" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Following <code>gyp</code> files contain the main rules for building Electron:</p>
<ul>
<li><code>electron.gyp</code> defines how Electron itself is built.</li>
<li><code>common.gypi</code> adjusts the build configurations of Node to make it build
together with Chromium.</li>
<li><code>brightray/brightray.gyp</code> defines how <code>brightray</code> is built and
includes the default configurations for linking with Chromium.</li>
<li><code>brightray/brightray.gypi</code> includes general build configurations about
building.</li>
</ul>
<h2 id="component-build"><a href="#component-build">Component Build</a><a class="header-link" href="#component-build" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Since Chromium is quite a large project, the final linking stage can take
quite a few minutes, which makes it hard for development. In order to solve
this, Chromium introduced the "component build", which builds each component as
a separate shared library, making linking very quick but sacrificing file size
and performance.</p>
<p>In Electron we took a very similar approach: for <code>Debug</code> builds, the binary
will be linked to a shared library version of Chromium's components to achieve
fast linking time; for <code>Release</code> builds, the binary will be linked to the static
library versions, so we can have the best possible binary size and performance.</p>
<h2 id="minimal-bootstrapping"><a href="#minimal-bootstrapping">Minimal Bootstrapping</a><a class="header-link" href="#minimal-bootstrapping" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>All of Chromium's prebuilt binaries (<code>libchromiumcontent</code>) are downloaded when
running the bootstrap script. By default both static libraries and shared
libraries will be downloaded and the final size should be between 800MB and 2GB
depending on the platform.</p>
<p>By default, <code>libchromiumcontent</code> is downloaded from Amazon Web Services.
If the <code>LIBCHROMIUMCONTENT_MIRROR</code> environment variable is set, the bootstrap
script will download from it.
<a href="https://github.com/hokein/libchromiumcontent-qiniu-mirror"><code>libchromiumcontent-qiniu-mirror</code></a>
is a mirror for <code>libchromiumcontent</code>. If you have trouble in accessing AWS, you
can switch the download address to it via
<code>export LIBCHROMIUMCONTENT_MIRROR=http://7xk3d2.dl1.z0.glb.clouddn.com/</code></p>
<p>If you only want to build Electron quickly for testing or development, you
can download just the shared library versions by passing the <code>--dev</code> parameter:</p>
<pre><code class="hljs language-sh" id="_cwnak7su">$ ./script/bootstrap.py --dev
$ ./script/build.py -c D</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_cwnak7su">Copy</button></pre>
<h2 id="two-phase-project-generation"><a href="#two-phase-project-generation">Two-Phase Project Generation</a><a class="header-link" href="#two-phase-project-generation" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Electron links with different sets of libraries in <code>Release</code> and <code>Debug</code>
builds. <code>gyp</code>, however, doesn't support configuring different link settings for
different configurations.</p>
<p>To work around this Electron uses a <code>gyp</code> variable
<code>libchromiumcontent_component</code> to control which link settings to use and only
generates one target when running <code>gyp</code>.</p>
<h2 id="target-names"><a href="#target-names">Target Names</a><a class="header-link" href="#target-names" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Unlike most projects that use <code>Release</code> and <code>Debug</code> as target names, Electron
uses <code>R</code> and <code>D</code> instead. This is because <code>gyp</code> randomly crashes if there is
only one <code>Release</code> or <code>Debug</code> build configuration defined, and Electron only has
to generate one target at a time as stated above.</p>
<p>This only affects developers, if you are just building Electron for rebranding
you are not affected.</p>
<h2 id="tests"><a href="#tests">Tests</a><a class="header-link" href="#tests" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Test your changes conform to the project coding style using:</p>
<pre><code class="hljs language-sh" id="_f0hllvrd">$ npm run lint</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_f0hllvrd">Copy</button></pre>
<p>Test functionality using:</p>
<pre><code class="hljs language-sh" id="_6tnhhbzk">$ npm <span class="hljs-built_in">test</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_6tnhhbzk">Copy</button></pre>
<p>Whenever you make changes to Electron source code, you'll need to re-run the
build before the tests:</p>
<pre><code class="hljs language-sh" id="_d4yydh8q">$ npm run build &amp;&amp; npm <span class="hljs-built_in">test</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_d4yydh8q">Copy</button></pre>
<p>You can make the test suite run faster by isolating the specific test or block
you're currently working on using Mocha's
<a href="https://mochajs.org/#exclusive-tests">exclusive tests</a> feature. Just append
<code>.only</code> to any <code>describe</code> or <code>it</code> function call:</p>
<pre><code class="hljs language-js" id="_qh78h7hu">describe.only(<span class="hljs-string">'some feature'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-comment">// ... only tests in this block will be run</span>
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_qh78h7hu">Copy</button></pre>
<p>Alternatively, you can use mocha's <code>grep</code> option to only run tests matching the
given regular expression pattern:</p>
<pre><code class="hljs language-sh" id="_7vimng5b">$ npm <span class="hljs-built_in">test</span> -- --grep child_process</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_7vimng5b">Copy</button></pre>
<p>Tests that include native modules (e.g. <code>runas</code>) can't be executed with the
debug build (see <a href="https://github.com/electron/electron/issues/2558">#2558</a> for
details), but they will work with the release build.</p>
<p>To run the tests with the release build use:</p>
<pre><code class="hljs language-sh" id="_dcyc26s4">$ npm <span class="hljs-built_in">test</span> -- -R</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_dcyc26s4">Copy</button></pre>

  <hr>
  <h1 id="certificate-object"><a href="#certificate-object">Certificate Object</a><a class="header-link" href="#certificate-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>data</code> String - PEM encoded data</li>
<li><code>issuer</code> <a href="https://electronjs.org/docs/api/structures/certificate-principal">CertificatePrincipal</a> - Issuer principal</li>
<li><code>issuerName</code> String - Issuer's Common Name</li>
<li><code>issuerCert</code> Certificate - Issuer certificate (if not self-signed)</li>
<li><code>subject</code> <a href="https://electronjs.org/docs/api/structures/certificate-principal">CertificatePrincipal</a> - Subject principal</li>
<li><code>subjectName</code> String - Subject's Common Name</li>
<li><code>serialNumber</code> String - Hex value represented string</li>
<li><code>validStart</code> Number - Start date of the certificate being valid in seconds</li>
<li><code>validExpiry</code> Number - End date of the certificate being valid in seconds</li>
<li><code>fingerprint</code> String - Fingerprint of the certificate</li>
</ul>

  <hr>
  <h1 id="certificateprincipal-object"><a href="#certificateprincipal-object">CertificatePrincipal Object</a><a class="header-link" href="#certificateprincipal-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>commonName</code> String - Common Name</li>
<li><code>organizations</code> String[] - Organization names</li>
<li><code>organizationUnits</code> String[] - Organization Unit names</li>
<li><code>locality</code> String - Locality</li>
<li><code>state</code> String - State or province</li>
<li><code>country</code> String - Country or region</li>
</ul>

  <hr>
  <h1 id="supported-chrome-command-line-switches"><a href="#supported-chrome-command-line-switches">Supported Chrome Command Line Switches</a><a class="header-link" href="#supported-chrome-command-line-switches" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Command line switches supported by Electron.</p>
</blockquote>
<p>You can use <a href="https://electronjs.org/docs/api/app#appcommandlineappendswitchswitch-value">app.commandLine.appendSwitch</a> to append them in
your app's main script before the <a href="https://electronjs.org/docs/api/app#event-ready">ready</a> event of the <a href="https://electronjs.org/docs/api/app">app</a> module
is emitted:</p>
<pre><code class="hljs language-javascript" id="_dqsn85wf"><span class="hljs-keyword">const</span> {app} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
app.commandLine.appendSwitch(<span class="hljs-string">'remote-debugging-port'</span>, <span class="hljs-string">'8315'</span>)
app.commandLine.appendSwitch(<span class="hljs-string">'host-rules'</span>, <span class="hljs-string">'MAP * 127.0.0.1'</span>)

app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  <span class="hljs-comment">// Your code here</span>
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_dqsn85wf">Copy</button></pre>
<h2 id="--ignore-connections-limitdomains"><a href="#--ignore-connections-limitdomains">--ignore-connections-limit=<code>domains</code></a><a class="header-link" href="#--ignore-connections-limitdomains" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Ignore the connections limit for <code>domains</code> list separated by <code>,</code>.</p>
<h2 id="--disable-http-cache"><a href="#--disable-http-cache">--disable-http-cache</a><a class="header-link" href="#--disable-http-cache" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Disables the disk cache for HTTP requests.</p>
<h2 id="--disable-http2"><a href="#--disable-http2">--disable-http2</a><a class="header-link" href="#--disable-http2" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Disable HTTP/2 and SPDY/3.1 protocols.</p>
<h2 id="--inspectport-and---inspect-brkport"><a href="#--inspectport-and---inspect-brkport">--inspect=<code>port</code> and --inspect-brk=<code>port</code></a><a class="header-link" href="#--inspectport-and---inspect-brkport" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Debug-related flags, see the <a href="https://electronjs.org/docs/tutorial/debugging-main-process">Debugging the Main Process</a> guide for details.</p>
<h2 id="--remote-debugging-portport"><a href="#--remote-debugging-portport">--remote-debugging-port=<code>port</code></a><a class="header-link" href="#--remote-debugging-portport" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Enables remote debugging over HTTP on the specified <code>port</code>.</p>
<h2 id="--disk-cache-sizesize"><a href="#--disk-cache-sizesize">--disk-cache-size=<code>size</code></a><a class="header-link" href="#--disk-cache-sizesize" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Forces the maximum disk space to be used by the disk cache, in bytes.</p>
<h2 id="--js-flagsflags"><a href="#--js-flagsflags">--js-flags=<code>flags</code></a><a class="header-link" href="#--js-flagsflags" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Specifies the flags passed to the Node JS engine. It has to be passed when starting
Electron if you want to enable the <code>flags</code> in the main process.</p>
<pre><code class="hljs language-bash" id="_vh9o3dsr">$ electron --js-flags=<span class="hljs-string">"--harmony_proxies --harmony_collections"</span> your-app</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_vh9o3dsr">Copy</button></pre>
<p>See the <a href="https://nodejs.org/api/cli.html">Node documentation</a> or run <code>node --help</code> in your terminal for a list of available flags. Additionally, run <code>node --v8-options</code> to see a list of flags that specifically refer to Node's V8 JavaScript engine.</p>
<h2 id="--proxy-serveraddressport"><a href="#--proxy-serveraddressport">--proxy-server=<code>address:port</code></a><a class="header-link" href="#--proxy-serveraddressport" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Use a specified proxy server, which overrides the system setting. This switch
only affects requests with HTTP protocol, including HTTPS and WebSocket
requests. It is also noteworthy that not all proxy servers support HTTPS and
WebSocket requests.</p>
<h2 id="--proxy-bypass-listhosts"><a href="#--proxy-bypass-listhosts">--proxy-bypass-list=<code>hosts</code></a><a class="header-link" href="#--proxy-bypass-listhosts" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Instructs Electron to bypass the proxy server for the given semi-colon-separated
list of hosts. This flag has an effect only if used in tandem with
<code>--proxy-server</code>.</p>
<p>For example:</p>
<pre><code class="hljs language-javascript" id="_znkt84fj"><span class="hljs-keyword">const</span> {app} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
app.commandLine.appendSwitch(<span class="hljs-string">'proxy-bypass-list'</span>, <span class="hljs-string">'&lt;local&gt;;*.google.com;*foo.com;1.2.3.4:5678'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_znkt84fj">Copy</button></pre>
<p>Will use the proxy server for all hosts except for local addresses (<code>localhost</code>,
<code>127.0.0.1</code> etc.), <code>google.com</code> subdomains, hosts that contain the suffix
<code>foo.com</code> and anything at <code>1.2.3.4:5678</code>.</p>
<h2 id="--proxy-pac-urlurl"><a href="#--proxy-pac-urlurl">--proxy-pac-url=<code>url</code></a><a class="header-link" href="#--proxy-pac-urlurl" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Uses the PAC script at the specified <code>url</code>.</p>
<h2 id="--no-proxy-server"><a href="#--no-proxy-server">--no-proxy-server</a><a class="header-link" href="#--no-proxy-server" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Don't use a proxy server and always make direct connections. Overrides any other
proxy server flags that are passed.</p>
<h2 id="--host-rulesrules"><a href="#--host-rulesrules">--host-rules=<code>rules</code></a><a class="header-link" href="#--host-rulesrules" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>A comma-separated list of <code>rules</code> that control how hostnames are mapped.</p>
<p>For example:</p>
<ul>
<li><code>MAP * 127.0.0.1</code> Forces all hostnames to be mapped to 127.0.0.1</li>
<li><code>MAP *.google.com proxy</code> Forces all google.com subdomains to be resolved to
"proxy".</li>
<li><code>MAP test.com [::1]:77</code> Forces "test.com" to resolve to IPv6 loopback. Will
also force the port of the resulting socket address to be 77.</li>
<li><code>MAP * baz, EXCLUDE www.google.com</code> Remaps everything to "baz", except for
"www.google.com".</li>
</ul>
<p>These mappings apply to the endpoint host in a net request (the TCP connect
and host resolver in a direct connection, and the <code>CONNECT</code> in an HTTP proxy
connection, and the endpoint host in a <code>SOCKS</code> proxy connection).</p>
<h2 id="--host-resolver-rulesrules"><a href="#--host-resolver-rulesrules">--host-resolver-rules=<code>rules</code></a><a class="header-link" href="#--host-resolver-rulesrules" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Like <code>--host-rules</code> but these <code>rules</code> only apply to the host resolver.</p>
<h2 id="--auth-server-whitelisturl"><a href="#--auth-server-whitelisturl">--auth-server-whitelist=<code>url</code></a><a class="header-link" href="#--auth-server-whitelisturl" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>A comma-separated list of servers for which integrated authentication is enabled.</p>
<p>For example:</p>
<pre><code class="hljs language-bash" id="_eqd0k62u">--auth-server-whitelist=<span class="hljs-string">'*example.com, *foobar.com, *baz'</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_eqd0k62u">Copy</button></pre>
<p>then any <code>url</code> ending with <code>example.com</code>, <code>foobar.com</code>, <code>baz</code> will be considered
for integrated authentication. Without <code>*</code> prefix the url has to match exactly.</p>
<h2 id="--auth-negotiate-delegate-whitelisturl"><a href="#--auth-negotiate-delegate-whitelisturl">--auth-negotiate-delegate-whitelist=<code>url</code></a><a class="header-link" href="#--auth-negotiate-delegate-whitelisturl" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>A comma-separated list of servers for which delegation of user credentials is required.
Without <code>*</code> prefix the url has to match exactly.</p>
<h2 id="--ignore-certificate-errors"><a href="#--ignore-certificate-errors">--ignore-certificate-errors</a><a class="header-link" href="#--ignore-certificate-errors" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Ignores certificate related errors.</p>
<h2 id="--ppapi-flash-pathpath"><a href="#--ppapi-flash-pathpath">--ppapi-flash-path=<code>path</code></a><a class="header-link" href="#--ppapi-flash-pathpath" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Sets the <code>path</code> of the pepper flash plugin.</p>
<h2 id="--ppapi-flash-versionversion"><a href="#--ppapi-flash-versionversion">--ppapi-flash-version=<code>version</code></a><a class="header-link" href="#--ppapi-flash-versionversion" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Sets the <code>version</code> of the pepper flash plugin.</p>
<h2 id="--log-net-logpath"><a href="#--log-net-logpath">--log-net-log=<code>path</code></a><a class="header-link" href="#--log-net-logpath" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Enables net log events to be saved and writes them to <code>path</code>.</p>
<h2 id="--disable-renderer-backgrounding"><a href="#--disable-renderer-backgrounding">--disable-renderer-backgrounding</a><a class="header-link" href="#--disable-renderer-backgrounding" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Prevents Chromium from lowering the priority of invisible pages' renderer
processes.</p>
<p>This flag is global to all renderer processes, if you only want to disable
throttling in one window, you can take the hack of
<a href="https://github.com/atom/atom/pull/9485/files">playing silent audio</a>.</p>
<h2 id="--enable-logging"><a href="#--enable-logging">--enable-logging</a><a class="header-link" href="#--enable-logging" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Prints Chromium's logging into console.</p>
<p>This switch can not be used in <code>app.commandLine.appendSwitch</code> since it is parsed
earlier than user's app is loaded, but you can set the <code>ELECTRON_ENABLE_LOGGING</code>
environment variable to achieve the same effect.</p>
<h2 id="--vlog_level"><a href="#--vlog_level">--v=<code>log_level</code></a><a class="header-link" href="#--vlog_level" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Gives the default maximal active V-logging level; 0 is the default. Normally
positive values are used for V-logging levels.</p>
<p>This switch only works when <code>--enable-logging</code> is also passed.</p>
<h2 id="--vmodulepattern"><a href="#--vmodulepattern">--vmodule=<code>pattern</code></a><a class="header-link" href="#--vmodulepattern" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Gives the per-module maximal V-logging levels to override the value given by
<code>--v</code>. E.g. <code>my_module=2,foo*=3</code> would change the logging level for all code in
source files <code>my_module.*</code> and <code>foo*.*</code>.</p>
<p>Any pattern containing a forward or backward slash will be tested against the
whole pathname and not just the module. E.g. <code>*/foo/bar/*=2</code> would change the
logging level for all code in the source files under a <code>foo/bar</code> directory.</p>
<p>This switch only works when <code>--enable-logging</code> is also passed.</p>

  <hr>
  <h1 id="chromium-development"><a href="#chromium-development">Chromium Development</a><a class="header-link" href="#chromium-development" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>A collection of resources for learning about Chromium and tracking its development</p>
</blockquote>
<ul>
<li><a href="https://chromiumdev-slack.herokuapp.com/">chromiumdev</a> on Slack</li>
<li><a href="https://twitter.com/ChromiumDev">@ChromiumDev</a> on Twitter</li>
<li><a href="https://twitter.com/googlechrome">@googlechrome</a> on Twitter</li>
<li><a href="https://blog.chromium.org/">Blog</a></li>
<li><a href="https://cs.chromium.org/">Code Search</a></li>
<li><a href="https://cs.chromium.org/chromium/src/">Source Code</a></li>
<li><a href="https://www.chromium.org/developers/calendar">Development Calendar and Release Info</a></li>
<li><a href="http://www.chromium.org/developers/discussion-groups">Discussion Groups</a></li>
</ul>
<p>See also <a href="https://electronjs.org/docs/development/v8-development">V8 Development</a></p>
<h1 id="chromium-development-with-electron"><a href="#chromium-development-with-electron">Chromium development with Electron</a><a class="header-link" href="#chromium-development-with-electron" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>It is possible to debug Chromium with Electron by passing
<code>--build_debug_libcc</code> to the bootstrap script:</p>
<pre><code class="hljs language-sh" id="_zfeglclx">$ ./script/bootstrap.py -d --build_debug_libcc</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_zfeglclx">Copy</button></pre>
<p>This will download and build libchromiumcontent locally, similarly to the
<code>--build_release_libcc</code>, but it will create a shared library build of
libchromiumcontent and won't strip any symbols, making it ideal for debugging.</p>
<p>When built like this, you can make changes to files in
<code>vendor/libchromiumcontent/src</code> and rebuild quickly with:</p>
<pre><code class="hljs language-sh" id="_a19b8mqt">$ ./script/build.py -c D --libcc</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_a19b8mqt">Copy</button></pre>
<p>When developing on linux with gdb, it is recommended to add a gdb index to speed
up loading symbols. This doesn't need to be executed on every build, but it is
recommended to do it at least once to index most shared libraries:</p>
<pre><code class="hljs language-sh" id="_yjblis9j">$ ./vendor/libchromiumcontent/src/build/gdb-add-index ./out/D/electron</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_yjblis9j">Copy</button></pre>
<p>Building libchromiumcontent requires a powerful machine and takes a long time
(though incremental rebuilding the shared library component is fast). With an
8-core/16-thread Ryzen 1700 CPU clocked at 3ghz, fast SSD and 32GB of RAM, it
should take about 40 minutes. It is not recommended to build with less than 16GB
of RAM.</p>
<h2 id="chromium-git-cache"><a href="#chromium-git-cache">Chromium git cache</a><a class="header-link" href="#chromium-git-cache" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p><code>depot_tools</code> has an undocumented option that allows the developer to set a
global cache for all git objects of Chromium + dependencies. This option uses
<code>git clone --shared</code> to save bandwidth/space on multiple clones of the same
repositories.</p>
<p>On electron/libchromiumcontent, this option is exposed through the
<code>LIBCHROMIUMCONTENT_GIT_CACHE</code> environment variable. If you intend to have
several libchromiumcontent build trees on the same machine(to work on different
branches for example), it is recommended to set the variable to speed up the
download of Chromium source. For example:</p>
<pre><code class="hljs language-sh" id="_c81vjsjw">$ mkdir ~/.chromium-git-cache
$ LIBCHROMIUMCONTENT_GIT_CACHE=~/.chromium-git-cache ./script/bootstrap.py -d --build_debug_libcc</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_c81vjsjw">Copy</button></pre>
<p>If the bootstrap script is interrupted while using the git cache, it will leave
the cache locked. To remove the lock, delete the files ending in <code>.lock</code>:</p>
<pre><code class="hljs language-sh" id="_slbwal7o">$ find ~/.chromium-git-cache/ -<span class="hljs-built_in">type</span> f -name <span class="hljs-string">'*.lock'</span> -delete</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_slbwal7o">Copy</button></pre>
<p>It is possible to share this directory with other machines by exporting it as
SMB share on linux, but only one process/machine can be using the cache at a
time. The locks created by git-cache script will try to prevent this, but it may
not work perfectly in a network.</p>
<p>On Windows, SMBv2 has a directory cache that will cause problems with the git
cache script, so it is necessary to disable it by setting the registry key</p>
<pre><code class="hljs language-sh" id="_3dgnm7h">HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\Lanmanworkstation\Parameters\DirectoryCacheLifetime</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_3dgnm7h">Copy</button></pre>
<p>to 0. More information: <a href="https://stackoverflow.com/a/9935126">stackoverflow.com/a/9935126</a></p>

  <hr>
  <h1 id="using-clang-format-on-c-code"><a href="#using-clang-format-on-c-code">Using clang-format on C++ Code</a><a class="header-link" href="#using-clang-format-on-c-code" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p><a href="http://clang.llvm.org/docs/ClangFormat.html"><code>clang-format</code></a> is a tool to
automatically format C/C++/Objective-C code, so that developers don't need to
worry about style issues during code reviews.</p>
<p>It is highly recommended to format your changed C++ code before opening pull
requests, which will save you and the reviewers' time.</p>
<p>You can install <code>clang-format</code> and <code>git-clang-format</code> via
<code>npm install -g clang-format</code>.</p>
<p>To automatically format a file according to Electron C++ code style, simply run
<code>clang-format -i path/to/electron/file.cc</code>. It should work on macOS/Linux/Windows.</p>
<p>The workflow to format your changed code:</p>
<ol>
<li>Make codes changes in Electron repository.</li>
<li>Run <code>git add your_changed_file.cc</code>.</li>
<li>Run <code>git-clang-format</code>, and you will probably see modifications in
<code>your_changed_file.cc</code>, these modifications are generated from <code>clang-format</code>.</li>
<li>Run <code>git add your_changed_file.cc</code>, and commit your change.</li>
<li>Now the branch is ready to be opened as a pull request.</li>
</ol>
<p>If you want to format the changed code on your latest git commit (HEAD), you can
run <code>git-clang-format HEAD~1</code>. See <code>git-clang-format -h</code> for more details.</p>
<h2 id="editor-integration"><a href="#editor-integration">Editor Integration</a><a class="header-link" href="#editor-integration" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>You can also integrate <code>clang-format</code> directly into your favorite editors.
For further guidance on setting up editor integration, see these pages:</p>
<ul>
<li><a href="https://atom.io/packages/clang-format">Atom</a></li>
<li><a href="http://clang.llvm.org/docs/ClangFormat.html#vim-integration">Vim &amp; Emacs</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=xaver.clang-format">Visual Studio Code</a></li>
</ul>

  <hr>
  <h2 id="class-clientrequest"><a href="#class-clientrequest">Class: ClientRequest</a><a class="header-link" href="#class-clientrequest" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>Make HTTP/HTTPS requests.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<p><code>ClientRequest</code> implements the <a href="https://nodejs.org/api/stream.html#stream_writable_streams">Writable Stream</a>
interface and is therefore an <a href="https://nodejs.org/api/events.html#events_class_eventemitter">EventEmitter</a>.</p>
<h3 id="new-clientrequestoptions"><a href="#new-clientrequestoptions"><code>new ClientRequest(options)</code></a><a class="header-link" href="#new-clientrequestoptions" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>options</code> (Object | String) - If <code>options</code> is a String, it is interpreted as
the request URL. If it is an object, it is expected to fully specify an HTTP request via the
following properties:</p>
<ul>
<li><code>method</code> String (optional) - The HTTP request method. Defaults to the GET
method.</li>
<li><code>url</code> String (optional) - The request URL. Must be provided in the absolute
form with the protocol scheme specified as http or https.</li>
<li><code>session</code> Object (optional) - The <a href="https://electronjs.org/docs/api/session"><code>Session</code></a> instance with
which the request is associated.</li>
<li><code>partition</code> String (optional) - The name of the <a href="https://electronjs.org/docs/api/session"><code>partition</code></a>
with which the request is associated. Defaults to the empty string. The
<code>session</code> option prevails on <code>partition</code>. Thus if a <code>session</code> is explicitly
specified, <code>partition</code> is ignored.</li>
<li><code>protocol</code> String (optional) - The protocol scheme in the form 'scheme:'.
Currently supported values are 'http:' or 'https:'. Defaults to 'http:'.</li>
<li><code>host</code> String (optional) - The server host provided as a concatenation of
the hostname and the port number 'hostname:port'</li>
<li><code>hostname</code> String (optional) - The server host name.</li>
<li><code>port</code> Integer (optional) - The server's listening port number.</li>
<li><code>path</code> String (optional) - The path part of the request URL.</li>
<li><code>redirect</code> String (optional) - The redirect mode for this request. Should be
one of <code>follow</code>, <code>error</code> or <code>manual</code>. Defaults to <code>follow</code>. When mode is <code>error</code>,
any redirection will be aborted. When mode is <code>manual</code> the redirection will be
deferred until <a href="#requestfollowRedirect"><code>request.followRedirect</code></a> is invoked. Listen for the <a href="#event-redirect"><code>redirect</code></a> event in
this mode to get more details about the redirect request.</li>
</ul>
</li>
</ul>
<p><code>options</code> properties such as <code>protocol</code>, <code>host</code>, <code>hostname</code>, <code>port</code> and <code>path</code>
strictly follow the Node.js model as described in the
<a href="https://nodejs.org/api/url.html">URL</a> module.</p>
<p>For instance, we could have created the same request to 'github.com' as follows:</p>
<pre><code class="hljs language-JavaScript" id="_ji5rw1dn"><span class="hljs-keyword">const</span> request = net.request({
  <span class="hljs-attr">method</span>: <span class="hljs-string">'GET'</span>,
  <span class="hljs-attr">protocol</span>: <span class="hljs-string">'https:'</span>,
  <span class="hljs-attr">hostname</span>: <span class="hljs-string">'github.com'</span>,
  <span class="hljs-attr">port</span>: <span class="hljs-number">443</span>,
  <span class="hljs-attr">path</span>: <span class="hljs-string">'/'</span>
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_ji5rw1dn">Copy</button></pre>
<h3 id="instance-events"><a href="#instance-events">Instance Events</a><a class="header-link" href="#instance-events" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<h4 id="event-response"><a href="#event-response">Event: 'response'</a><a class="header-link" href="#event-response" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>response</code> IncomingMessage - An object representing the HTTP response message.</li>
</ul>
<h4 id="event-login"><a href="#event-login">Event: 'login'</a><a class="header-link" href="#event-login" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li>
<p><code>authInfo</code> Object</p>
<ul>
<li><code>isProxy</code> Boolean</li>
<li><code>scheme</code> String</li>
<li><code>host</code> String</li>
<li><code>port</code> Integer</li>
<li><code>realm</code> String</li>
</ul>
</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>username</code> String</li>
<li><code>password</code> String</li>
</ul>
</li>
</ul>
<p>Emitted when an authenticating proxy is asking for user credentials.</p>
<p>The <code>callback</code> function is expected to be called back with user credentials:</p>
<ul>
<li><code>username</code> String</li>
<li><code>password</code> String</li>
</ul>
<pre><code class="hljs language-JavaScript" id="_jemanz0zo">request.on(<span class="hljs-string">'login'</span>, (authInfo, callback) =&gt; {
  callback(<span class="hljs-string">'username'</span>, <span class="hljs-string">'password'</span>)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_jemanz0zo">Copy</button></pre>
<p>Providing empty credentials will cancel the request and report an authentication
error on the response object:</p>
<pre><code class="hljs language-JavaScript" id="_o8ujeiej">request.on(<span class="hljs-string">'response'</span>, (response) =&gt; {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`STATUS: <span class="hljs-subst">${response.statusCode}</span>`</span>);
  response.on(<span class="hljs-string">'error'</span>, (error) =&gt; {
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`ERROR: <span class="hljs-subst">${<span class="hljs-built_in">JSON</span>.stringify(error)}</span>`</span>)
  })
})
request.on(<span class="hljs-string">'login'</span>, (authInfo, callback) =&gt; {
  callback()
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_o8ujeiej">Copy</button></pre>
<h4 id="event-finish"><a href="#event-finish">Event: 'finish'</a><a class="header-link" href="#event-finish" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted just after the last chunk of the <code>request</code>'s data has been written into
the <code>request</code> object.</p>
<h4 id="event-abort"><a href="#event-abort">Event: 'abort'</a><a class="header-link" href="#event-abort" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the <code>request</code> is aborted. The <code>abort</code> event will not be fired if
the <code>request</code> is already closed.</p>
<h4 id="event-error"><a href="#event-error">Event: 'error'</a><a class="header-link" href="#event-error" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>error</code> Error - an error object providing some information about the failure.</li>
</ul>
<p>Emitted when the <code>net</code> module fails to issue a network request. Typically when
the <code>request</code> object emits an <code>error</code> event, a <code>close</code> event will subsequently
follow and no response object will be provided.</p>
<h4 id="event-close"><a href="#event-close">Event: 'close'</a><a class="header-link" href="#event-close" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted as the last event in the HTTP request-response transaction. The <code>close</code>
event indicates that no more events will be emitted on either the <code>request</code> or
<code>response</code> objects.</p>
<h4 id="event-redirect"><a href="#event-redirect">Event: 'redirect'</a><a class="header-link" href="#event-redirect" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>statusCode</code> Integer</li>
<li><code>method</code> String</li>
<li><code>redirectUrl</code> String</li>
<li><code>responseHeaders</code> Object</li>
</ul>
<p>Emitted when there is redirection and the mode is <code>manual</code>. Calling
<a href="#requestfollowRedirect"><code>request.followRedirect</code></a> will continue with the redirection.</p>
<h3 id="instance-properties"><a href="#instance-properties">Instance Properties</a><a class="header-link" href="#instance-properties" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<h4 id="requestchunkedencoding"><a href="#requestchunkedencoding"><code>request.chunkedEncoding</code></a><a class="header-link" href="#requestchunkedencoding" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>Boolean</code> specifying whether the request will use HTTP chunked transfer encoding
or not. Defaults to false. The property is readable and writable, however it can
be set only before the first write operation as the HTTP headers are not yet put
on the wire. Trying to set the <code>chunkedEncoding</code> property after the first write
will throw an error.</p>
<p>Using chunked encoding is strongly recommended if you need to send a large
request body as data will be streamed in small chunks instead of being
internally buffered inside Electron process memory.</p>
<h3 id="instance-methods"><a href="#instance-methods">Instance Methods</a><a class="header-link" href="#instance-methods" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<h4 id="requestsetheadername-value"><a href="#requestsetheadername-value"><code>request.setHeader(name, value)</code></a><a class="header-link" href="#requestsetheadername-value" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>name</code> String - An extra HTTP header name.</li>
<li><code>value</code> Object - An extra HTTP header value.</li>
</ul>
<p>Adds an extra HTTP header. The header name will issued as it is without
lowercasing. It can be called only before first write. Calling this method after
the first write will throw an error. If the passed value is not a <code>String</code>, its
<code>toString()</code> method will be called to obtain the final value.</p>
<h4 id="requestgetheadername"><a href="#requestgetheadername"><code>request.getHeader(name)</code></a><a class="header-link" href="#requestgetheadername" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>name</code> String - Specify an extra header name.</li>
</ul>
<p>Returns <code>Object</code> - The value of a previously set extra header name.</p>
<h4 id="requestremoveheadername"><a href="#requestremoveheadername"><code>request.removeHeader(name)</code></a><a class="header-link" href="#requestremoveheadername" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>name</code> String - Specify an extra header name.</li>
</ul>
<p>Removes a previously set extra header name. This method can be called only
before first write. Trying to call it after the first write will throw an error.</p>
<h4 id="requestwritechunk-encoding-callback"><a href="#requestwritechunk-encoding-callback"><code>request.write(chunk[, encoding][, callback])</code></a><a class="header-link" href="#requestwritechunk-encoding-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>chunk</code> (String | Buffer) - A chunk of the request body's data. If it is a
string, it is converted into a Buffer using the specified encoding.</li>
<li><code>encoding</code> String (optional) - Used to convert string chunks into Buffer
objects. Defaults to 'utf-8'.</li>
<li><code>callback</code> Function (optional) - Called after the write operation ends.</li>
</ul>
<p><code>callback</code> is essentially a dummy function introduced in the purpose of keeping
similarity with the Node.js API. It is called asynchronously in the next tick
after <code>chunk</code> content have been delivered to the Chromium networking layer.
Contrary to the Node.js implementation, it is not guaranteed that <code>chunk</code>
content have been flushed on the wire before <code>callback</code> is called.</p>
<p>Adds a chunk of data to the request body. The first write operation may cause
the request headers to be issued on the wire. After the first write operation,
it is not allowed to add or remove a custom header.</p>
<h4 id="requestendchunk-encoding-callback"><a href="#requestendchunk-encoding-callback"><code>request.end([chunk][, encoding][, callback])</code></a><a class="header-link" href="#requestendchunk-encoding-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>chunk</code> (String | Buffer) (optional)</li>
<li><code>encoding</code> String (optional)</li>
<li><code>callback</code> Function (optional)</li>
</ul>
<p>Sends the last chunk of the request data. Subsequent write or end operations
will not be allowed. The <code>finish</code> event is emitted just after the end operation.</p>
<h4 id="requestabort"><a href="#requestabort"><code>request.abort()</code></a><a class="header-link" href="#requestabort" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Cancels an ongoing HTTP transaction. If the request has already emitted the
<code>close</code> event, the abort operation will have no effect. Otherwise an ongoing
event will emit <code>abort</code> and <code>close</code> events. Additionally, if there is an ongoing
response object,it will emit the <code>aborted</code> event.</p>
<h4 id="requestfollowredirect"><a href="#requestfollowredirect"><code>request.followRedirect()</code></a><a class="header-link" href="#requestfollowredirect" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Continues any deferred redirection request when the redirection mode is <code>manual</code>.</p>

  <hr>
  <h1 id="clipboard"><a href="#clipboard">clipboard</a><a class="header-link" href="#clipboard" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Perform copy and paste operations on the system clipboard.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a>, <a href="https://electronjs.org/docs/glossary#renderer-process">Renderer</a></p>
<p>The following example shows how to write a string to the clipboard:</p>
<pre><code class="hljs language-javascript" id="_x6w5amfp"><span class="hljs-keyword">const</span> {clipboard} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
clipboard.writeText(<span class="hljs-string">'Example String'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_x6w5amfp">Copy</button></pre>
<p>On X Window systems, there is also a selection clipboard. To manipulate it
you need to pass <code>selection</code> to each method:</p>
<pre><code class="hljs language-javascript" id="_i4pv7uyk"><span class="hljs-keyword">const</span> {clipboard} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
clipboard.writeText(<span class="hljs-string">'Example String'</span>, <span class="hljs-string">'selection'</span>)
<span class="hljs-built_in">console</span>.log(clipboard.readText(<span class="hljs-string">'selection'</span>))</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_i4pv7uyk">Copy</button></pre>
<h2 id="methods"><a href="#methods">Methods</a><a class="header-link" href="#methods" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>clipboard</code> module has the following methods:</p>
<p><strong>Note:</strong> Experimental APIs are marked as such and could be removed in future.</p>
<h3 id="clipboardreadtexttype"><a href="#clipboardreadtexttype"><code>clipboard.readText([type])</code></a><a class="header-link" href="#clipboardreadtexttype" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>type</code> String (optional)</li>
</ul>
<p>Returns <code>String</code> - The content in the clipboard as plain text.</p>
<h3 id="clipboardwritetexttext-type"><a href="#clipboardwritetexttext-type"><code>clipboard.writeText(text[, type])</code></a><a class="header-link" href="#clipboardwritetexttext-type" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>text</code> String</li>
<li><code>type</code> String (optional)</li>
</ul>
<p>Writes the <code>text</code> into the clipboard as plain text.</p>
<h3 id="clipboardreadhtmltype"><a href="#clipboardreadhtmltype"><code>clipboard.readHTML([type])</code></a><a class="header-link" href="#clipboardreadhtmltype" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>type</code> String (optional)</li>
</ul>
<p>Returns <code>String</code> - The content in the clipboard as markup.</p>
<h3 id="clipboardwritehtmlmarkup-type"><a href="#clipboardwritehtmlmarkup-type"><code>clipboard.writeHTML(markup[, type])</code></a><a class="header-link" href="#clipboardwritehtmlmarkup-type" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>markup</code> String</li>
<li><code>type</code> String (optional)</li>
</ul>
<p>Writes <code>markup</code> to the clipboard.</p>
<h3 id="clipboardreadimagetype"><a href="#clipboardreadimagetype"><code>clipboard.readImage([type])</code></a><a class="header-link" href="#clipboardreadimagetype" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>type</code> String (optional)</li>
</ul>
<p>Returns <a href="https://electronjs.org/docs/api/native-image"><code>NativeImage</code></a> - The image content in the clipboard.</p>
<h3 id="clipboardwriteimageimage-type"><a href="#clipboardwriteimageimage-type"><code>clipboard.writeImage(image[, type])</code></a><a class="header-link" href="#clipboardwriteimageimage-type" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>image</code> <a href="https://electronjs.org/docs/api/native-image">NativeImage</a></li>
<li><code>type</code> String (optional)</li>
</ul>
<p>Writes <code>image</code> to the clipboard.</p>
<h3 id="clipboardreadrtftype"><a href="#clipboardreadrtftype"><code>clipboard.readRTF([type])</code></a><a class="header-link" href="#clipboardreadrtftype" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>type</code> String (optional)</li>
</ul>
<p>Returns <code>String</code> - The content in the clipboard as RTF.</p>
<h3 id="clipboardwritertftext-type"><a href="#clipboardwritertftext-type"><code>clipboard.writeRTF(text[, type])</code></a><a class="header-link" href="#clipboardwritertftext-type" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>text</code> String</li>
<li><code>type</code> String (optional)</li>
</ul>
<p>Writes the <code>text</code> into the clipboard in RTF.</p>
<h3 id="clipboardreadbookmark-macos-windows"><a href="#clipboardreadbookmark-macos-windows"><code>clipboard.readBookmark()</code> <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#clipboardreadbookmark-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Object</code>:</p>
<ul>
<li><code>title</code> String</li>
<li><code>url</code> String</li>
</ul>
<p>Returns an Object containing <code>title</code> and <code>url</code> keys representing the bookmark in
the clipboard. The <code>title</code> and <code>url</code> values will be empty strings when the
bookmark is unavailable.</p>
<h3 id="clipboardwritebookmarktitle-url-type-macos-windows"><a href="#clipboardwritebookmarktitle-url-type-macos-windows"><code>clipboard.writeBookmark(title, url[, type])</code> <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#clipboardwritebookmarktitle-url-type-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>title</code> String</li>
<li><code>url</code> String</li>
<li><code>type</code> String (optional)</li>
</ul>
<p>Writes the <code>title</code> and <code>url</code> into the clipboard as a bookmark.</p>
<p><strong>Note:</strong> Most apps on Windows don't support pasting bookmarks into them so
you can use <code>clipboard.write</code> to write both a bookmark and fallback text to the
clipboard.</p>
<pre><code class="hljs language-js" id="_9fzmqxnv">clipboard.write({
  <span class="hljs-attr">text</span>: <span class="hljs-string">'https://electronjs.org'</span>,
  <span class="hljs-attr">bookmark</span>: <span class="hljs-string">'Electron Homepage'</span>
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_9fzmqxnv">Copy</button></pre>
<h3 id="clipboardreadfindtext-macos"><a href="#clipboardreadfindtext-macos"><code>clipboard.readFindText()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#clipboardreadfindtext-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>String</code> - The text on the find pasteboard. This method uses synchronous
IPC when called from the renderer process. The cached value is reread from the
find pasteboard whenever the application is activated.</p>
<h3 id="clipboardwritefindtexttext-macos"><a href="#clipboardwritefindtexttext-macos"><code>clipboard.writeFindText(text)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#clipboardwritefindtexttext-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>text</code> String</li>
</ul>
<p>Writes the <code>text</code> into the find pasteboard as plain text. This method uses
synchronous IPC when called from the renderer process.</p>
<h3 id="clipboardcleartype"><a href="#clipboardcleartype"><code>clipboard.clear([type])</code></a><a class="header-link" href="#clipboardcleartype" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>type</code> String (optional)</li>
</ul>
<p>Clears the clipboard content.</p>
<h3 id="clipboardavailableformatstype"><a href="#clipboardavailableformatstype"><code>clipboard.availableFormats([type])</code></a><a class="header-link" href="#clipboardavailableformatstype" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>type</code> String (optional)</li>
</ul>
<p>Returns <code>String[]</code> - An array of supported formats for the clipboard <code>type</code>.</p>
<h3 id="clipboardhasformat-type-experimental"><a href="#clipboardhasformat-type-experimental"><code>clipboard.has(format[, type])</code> <em>Experimental</em></a><a class="header-link" href="#clipboardhasformat-type-experimental" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>format</code> String</li>
<li><code>type</code> String (optional)</li>
</ul>
<p>Returns <code>Boolean</code> - Whether the clipboard supports the specified <code>format</code>.</p>
<pre><code class="hljs language-javascript" id="_2l5yo4nr"><span class="hljs-keyword">const</span> {clipboard} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-built_in">console</span>.log(clipboard.has(<span class="hljs-string">'&lt;p&gt;selection&lt;/p&gt;'</span>))</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_2l5yo4nr">Copy</button></pre>
<h3 id="clipboardreadformat-experimental"><a href="#clipboardreadformat-experimental"><code>clipboard.read(format)</code> <em>Experimental</em></a><a class="header-link" href="#clipboardreadformat-experimental" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>format</code> String</li>
</ul>
<p>Returns <code>String</code> - Reads <code>format</code> type from the clipboard.</p>
<h3 id="clipboardreadbufferformat-experimental"><a href="#clipboardreadbufferformat-experimental"><code>clipboard.readBuffer(format)</code> <em>Experimental</em></a><a class="header-link" href="#clipboardreadbufferformat-experimental" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>format</code> String</li>
</ul>
<p>Returns <code>Buffer</code> - Reads <code>format</code> type from the clipboard.</p>
<h3 id="clipboardwritebufferformat-buffer-type-experimental"><a href="#clipboardwritebufferformat-buffer-type-experimental"><code>clipboard.writeBuffer(format, buffer[, type])</code> <em>Experimental</em></a><a class="header-link" href="#clipboardwritebufferformat-buffer-type-experimental" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>format</code> String</li>
<li><code>buffer</code> Buffer</li>
<li><code>type</code> String (optional)</li>
</ul>
<p>Writes the <code>buffer</code> into the clipboard as <code>format</code>.</p>
<h3 id="clipboardwritedata-type"><a href="#clipboardwritedata-type"><code>clipboard.write(data[, type])</code></a><a class="header-link" href="#clipboardwritedata-type" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>data</code> Object</p>
<ul>
<li><code>text</code> String (optional)</li>
<li><code>html</code> String (optional)</li>
<li><code>image</code> <a href="https://electronjs.org/docs/api/native-image">NativeImage</a> (optional)</li>
<li><code>rtf</code> String (optional)</li>
<li><code>bookmark</code> String (optional) - The title of the url at <code>text</code>.</li>
</ul>
</li>
<li><code>type</code> String (optional)</li>
</ul>
<pre><code class="hljs language-javascript" id="_73atwwns"><span class="hljs-keyword">const</span> {clipboard} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
clipboard.write({<span class="hljs-attr">text</span>: <span class="hljs-string">'test'</span>, <span class="hljs-attr">html</span>: <span class="hljs-string">'&lt;b&gt;test&lt;/b&gt;'</span>})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_73atwwns">Copy</button></pre>
<p>Writes <code>data</code> to the clipboard.</p>

  <hr>
  <h1 id="coding-style"><a href="#coding-style">Coding Style</a><a class="header-link" href="#coding-style" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>These are the style guidelines for coding in Electron.</p>
<p>You can run <code>npm run lint</code> to show any style issues detected by <code>cpplint</code> and
<code>eslint</code>.</p>
<h2 id="c-and-python"><a href="#c-and-python">C++ and Python</a><a class="header-link" href="#c-and-python" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>For C++ and Python, we follow Chromium's <a href="https://www.chromium.org/developers/coding-style">Coding
Style</a>. You can use
<a href="https://electronjs.org/docs/development/clang-format">clang-format</a> to format the C++ code automatically. There is
also a script <code>script/cpplint.py</code> to check whether all files conform.</p>
<p>The Python version we are using now is Python 2.7.</p>
<p>The C++ code uses a lot of Chromium's abstractions and types, so it's
recommended to get acquainted with them. A good place to start is
Chromium's <a href="https://www.chromium.org/developers/coding-style/important-abstractions-and-data-structures">Important Abstractions and Data Structures</a>
document. The document mentions some special types, scoped types (that
automatically release their memory when going out of scope), logging mechanisms
etc.</p>
<h2 id="javascript"><a href="#javascript">JavaScript</a><a class="header-link" href="#javascript" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<ul>
<li>Write <a href="https://npm.im/standard">standard</a> JavaScript style.</li>
<li>File names should be concatenated with <code>-</code> instead of <code>_</code>, e.g.
<code>file-name.js</code> rather than <code>file_name.js</code>, because in
<a href="https://github.com/github/atom">github/atom</a> module names are usually in
the <code>module-name</code> form. This rule only applies to <code>.js</code> files.</li>
<li>
<p>Use newer ES6/ES2015 syntax where appropriate</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const"><code>const</code></a>
for requires and other constants</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let"><code>let</code></a>
for defining variables</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">Arrow functions</a>
instead of <code>function () { }</code></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals">Template literals</a>
instead of string concatenation using <code>+</code></li>
</ul>
</li>
</ul>
<h2 id="naming-things"><a href="#naming-things">Naming Things</a><a class="header-link" href="#naming-things" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Electron APIs uses the same capitalization scheme as Node.js:</p>
<ul>
<li>When the module itself is a class like <code>BrowserWindow</code>, use <code>CamelCase</code>.</li>
<li>When the module is a set of APIs, like <code>globalShortcut</code>, use <code>mixedCase</code>.</li>
<li>When the API is a property of object, and it is complex enough to be in a
separate chapter like <code>win.webContents</code>, use <code>mixedCase</code>.</li>
<li>For other non-module APIs, use natural titles, like <code>&lt;webview&gt; Tag</code> or
<code>Process Object</code>.</li>
</ul>
<p>When creating a new API, it is preferred to use getters and setters instead of
jQuery's one-function style. For example, <code>.getText()</code> and <code>.setText(text)</code>
are preferred to <code>.text([text])</code>. There is a
<a href="https://github.com/electron/electron/issues/46">discussion</a> on this.</p>

  <hr>
  <h1 id="contenttracing"><a href="#contenttracing">contentTracing</a><a class="header-link" href="#contenttracing" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Collect tracing data from Chromium's content module for finding performance
bottlenecks and slow operations.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<p>This module does not include a web interface so you need to open
<code>chrome://tracing/</code> in a Chrome browser and load the generated file to view the
result.</p>
<p><strong>Note:</strong> You should not use this module until the <code>ready</code> event of the app
module is emitted.</p>
<pre><code class="hljs language-javascript" id="_xurpen5n"><span class="hljs-keyword">const</span> {app, contentTracing} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  <span class="hljs-keyword">const</span> options = {
    <span class="hljs-attr">categoryFilter</span>: <span class="hljs-string">'*'</span>,
    <span class="hljs-attr">traceOptions</span>: <span class="hljs-string">'record-until-full,enable-sampling'</span>
  }

  contentTracing.startRecording(options, () =&gt; {
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Tracing started'</span>)

    setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
      contentTracing.stopRecording(<span class="hljs-string">''</span>, (path) =&gt; {
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Tracing data recorded to '</span> + path)
      })
    }, <span class="hljs-number">5000</span>)
  })
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_xurpen5n">Copy</button></pre>
<h2 id="methods"><a href="#methods">Methods</a><a class="header-link" href="#methods" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>contentTracing</code> module has the following methods:</p>
<h3 id="contenttracinggetcategoriescallback"><a href="#contenttracinggetcategoriescallback"><code>contentTracing.getCategories(callback)</code></a><a class="header-link" href="#contenttracinggetcategoriescallback" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>categories</code> String[]</li>
</ul>
</li>
</ul>
<p>Get a set of category groups. The category groups can change as new code paths
are reached.</p>
<p>Once all child processes have acknowledged the <code>getCategories</code> request the
<code>callback</code> is invoked with an array of category groups.</p>
<h3 id="contenttracingstartrecordingoptions-callback"><a href="#contenttracingstartrecordingoptions-callback"><code>contentTracing.startRecording(options, callback)</code></a><a class="header-link" href="#contenttracingstartrecordingoptions-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>categoryFilter</code> String</li>
<li><code>traceOptions</code> String</li>
</ul>
</li>
<li><code>callback</code> Function</li>
</ul>
<p>Start recording on all processes.</p>
<p>Recording begins immediately locally and asynchronously on child processes
as soon as they receive the EnableRecording request. The <code>callback</code> will be
called once all child processes have acknowledged the <code>startRecording</code> request.</p>
<p><code>categoryFilter</code> is a filter to control what category groups should be
traced. A filter can have an optional <code>-</code> prefix to exclude category groups
that contain a matching category. Having both included and excluded
category patterns in the same list is not supported.</p>
<p>Examples:</p>
<ul>
<li><code>test_MyTest*</code>,</li>
<li><code>test_MyTest*,test_OtherStuff</code>,</li>
<li><code>"-excluded_category1,-excluded_category2</code></li>
</ul>
<p><code>traceOptions</code> controls what kind of tracing is enabled, it is a comma-delimited
list. Possible options are:</p>
<ul>
<li><code>record-until-full</code></li>
<li><code>record-continuously</code></li>
<li><code>trace-to-console</code></li>
<li><code>enable-sampling</code></li>
<li><code>enable-systrace</code></li>
</ul>
<p>The first 3 options are trace recording modes and hence mutually exclusive.
If more than one trace recording modes appear in the <code>traceOptions</code> string,
the last one takes precedence. If none of the trace recording modes are
specified, recording mode is <code>record-until-full</code>.</p>
<p>The trace option will first be reset to the default option (<code>record_mode</code> set to
<code>record-until-full</code>, <code>enable_sampling</code> and <code>enable_systrace</code> set to <code>false</code>)
before options parsed from <code>traceOptions</code> are applied on it.</p>
<h3 id="contenttracingstoprecordingresultfilepath-callback"><a href="#contenttracingstoprecordingresultfilepath-callback"><code>contentTracing.stopRecording(resultFilePath, callback)</code></a><a class="header-link" href="#contenttracingstoprecordingresultfilepath-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>resultFilePath</code> String</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>resultFilePath</code> String</li>
</ul>
</li>
</ul>
<p>Stop recording on all processes.</p>
<p>Child processes typically cache trace data and only rarely flush and send
trace data back to the main process. This helps to minimize the runtime overhead
of tracing since sending trace data over IPC can be an expensive operation. So,
to end tracing, we must asynchronously ask all child processes to flush any
pending trace data.</p>
<p>Once all child processes have acknowledged the <code>stopRecording</code> request,
<code>callback</code> will be called with a file that contains the traced data.</p>
<p>Trace data will be written into <code>resultFilePath</code> if it is not empty or into a
temporary file. The actual file path will be passed to <code>callback</code> if it's not
<code>null</code>.</p>
<h3 id="contenttracingstartmonitoringoptions-callback"><a href="#contenttracingstartmonitoringoptions-callback"><code>contentTracing.startMonitoring(options, callback)</code></a><a class="header-link" href="#contenttracingstartmonitoringoptions-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>categoryFilter</code> String</li>
<li><code>traceOptions</code> String</li>
</ul>
</li>
<li><code>callback</code> Function</li>
</ul>
<p>Start monitoring on all processes.</p>
<p>Monitoring begins immediately locally and asynchronously on child processes as
soon as they receive the <code>startMonitoring</code> request.</p>
<p>Once all child processes have acknowledged the <code>startMonitoring</code> request the
<code>callback</code> will be called.</p>
<h3 id="contenttracingstopmonitoringcallback"><a href="#contenttracingstopmonitoringcallback"><code>contentTracing.stopMonitoring(callback)</code></a><a class="header-link" href="#contenttracingstopmonitoringcallback" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>callback</code> Function</li>
</ul>
<p>Stop monitoring on all processes.</p>
<p>Once all child processes have acknowledged the <code>stopMonitoring</code> request the
<code>callback</code> is called.</p>
<h3 id="contenttracingcapturemonitoringsnapshotresultfilepath-callback"><a href="#contenttracingcapturemonitoringsnapshotresultfilepath-callback"><code>contentTracing.captureMonitoringSnapshot(resultFilePath, callback)</code></a><a class="header-link" href="#contenttracingcapturemonitoringsnapshotresultfilepath-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>resultFilePath</code> String</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>resultFilePath</code> String</li>
</ul>
</li>
</ul>
<p>Get the current monitoring traced data.</p>
<p>Child processes typically cache trace data and only rarely flush and send
trace data back to the main process. This is because it may be an expensive
operation to send the trace data over IPC and we would like to avoid unneeded
runtime overhead from tracing. So, to end tracing, we must asynchronously ask
all child processes to flush any pending trace data.</p>
<p>Once all child processes have acknowledged the <code>captureMonitoringSnapshot</code>
request the <code>callback</code> will be called with a file that contains the traced data.</p>
<h3 id="contenttracinggettracebufferusagecallback"><a href="#contenttracinggettracebufferusagecallback"><code>contentTracing.getTraceBufferUsage(callback)</code></a><a class="header-link" href="#contenttracinggettracebufferusagecallback" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>value</code> Number</li>
<li><code>percentage</code> Number</li>
</ul>
</li>
</ul>
<p>Get the maximum usage across processes of trace buffer as a percentage of the
full state. When the TraceBufferUsage value is determined the <code>callback</code> is
called.</p>

  <hr>
  <h1 id="cookie-object"><a href="#cookie-object">Cookie Object</a><a class="header-link" href="#cookie-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>name</code> String - The name of the cookie.</li>
<li><code>value</code> String - The value of the cookie.</li>
<li><code>domain</code> String (optional) - The domain of the cookie.</li>
<li><code>hostOnly</code> Boolean (optional) - Whether the cookie is a host-only cookie.</li>
<li><code>path</code> String (optional) - The path of the cookie.</li>
<li><code>secure</code> Boolean (optional) - Whether the cookie is marked as secure.</li>
<li><code>httpOnly</code> Boolean (optional) - Whether the cookie is marked as HTTP only.</li>
<li><code>session</code> Boolean (optional) - Whether the cookie is a session cookie or a persistent
cookie with an expiration date.</li>
<li><code>expirationDate</code> Double (optional) - The expiration date of the cookie as
the number of seconds since the UNIX epoch. Not provided for session
cookies.</li>
</ul>

  <hr>
  <h2 id="class-cookies"><a href="#class-cookies">Class: Cookies</a><a class="header-link" href="#class-cookies" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>Query and modify a session's cookies.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<p>Instances of the <code>Cookies</code> class are accessed by using <code>cookies</code> property of
a <code>Session</code>.</p>
<p>For example:</p>
<pre><code class="hljs language-javascript" id="_sjyf9n38"><span class="hljs-keyword">const</span> {session} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-comment">// Query all cookies.</span>
session.defaultSession.cookies.get({}, (error, cookies) =&gt; {
  <span class="hljs-built_in">console</span>.log(error, cookies)
})

<span class="hljs-comment">// Query all cookies associated with a specific url.</span>
session.defaultSession.cookies.get({<span class="hljs-attr">url</span>: <span class="hljs-string">'http://www.github.com'</span>}, (error, cookies) =&gt; {
  <span class="hljs-built_in">console</span>.log(error, cookies)
})

<span class="hljs-comment">// Set a cookie with the given cookie data;</span>
<span class="hljs-comment">// may overwrite equivalent cookies if they exist.</span>
<span class="hljs-keyword">const</span> cookie = {<span class="hljs-attr">url</span>: <span class="hljs-string">'http://www.github.com'</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">'dummy_name'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">'dummy'</span>}
session.defaultSession.cookies.set(cookie, (error) =&gt; {
  <span class="hljs-keyword">if</span> (error) <span class="hljs-built_in">console</span>.error(error)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_sjyf9n38">Copy</button></pre>
<h3 id="instance-events"><a href="#instance-events">Instance Events</a><a class="header-link" href="#instance-events" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The following events are available on instances of <code>Cookies</code>:</p>
<h4 id="event-changed"><a href="#event-changed">Event: 'changed'</a><a class="header-link" href="#event-changed" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>event</code> Event</li>
<li><code>cookie</code> <a href="https://electronjs.org/docs/api/structures/cookie">Cookie</a> - The cookie that was changed</li>
<li>
<p><code>cause</code> String - The cause of the change with one of the following values:</p>
<ul>
<li><code>explicit</code> - The cookie was changed directly by a consumer's action.</li>
<li><code>overwrite</code> - The cookie was automatically removed due to an insert
operation that overwrote it.</li>
<li><code>expired</code> - The cookie was automatically removed as it expired.</li>
<li><code>evicted</code> - The cookie was automatically evicted during garbage collection.</li>
<li><code>expired-overwrite</code> - The cookie was overwritten with an already-expired
expiration date.</li>
</ul>
</li>
<li><code>removed</code> Boolean - <code>true</code> if the cookie was removed, <code>false</code> otherwise.</li>
</ul>
<p>Emitted when a cookie is changed because it was added, edited, removed, or
expired.</p>
<h3 id="instance-methods"><a href="#instance-methods">Instance Methods</a><a class="header-link" href="#instance-methods" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The following methods are available on instances of <code>Cookies</code>:</p>
<h4 id="cookiesgetfilter-callback"><a href="#cookiesgetfilter-callback"><code>cookies.get(filter, callback)</code></a><a class="header-link" href="#cookiesgetfilter-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>filter</code> Object</p>
<ul>
<li><code>url</code> String (optional) - Retrieves cookies which are associated with
<code>url</code>. Empty implies retrieving cookies of all urls.</li>
<li><code>name</code> String (optional) - Filters cookies by name.</li>
<li><code>domain</code> String (optional) - Retrieves cookies whose domains match or are
subdomains of <code>domains</code></li>
<li><code>path</code> String (optional) - Retrieves cookies whose path matches <code>path</code>.</li>
<li><code>secure</code> Boolean (optional) - Filters cookies by their Secure property.</li>
<li><code>session</code> Boolean (optional) - Filters out session or persistent cookies.</li>
</ul>
</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>error</code> Error</li>
<li><code>cookies</code> <a href="https://electronjs.org/docs/api/structures/cookie">Cookie[]</a> - an array of cookie objects.</li>
</ul>
</li>
</ul>
<p>Sends a request to get all cookies matching <code>details</code>, <code>callback</code> will be called
with <code>callback(error, cookies)</code> on complete.</p>
<h4 id="cookiessetdetails-callback"><a href="#cookiessetdetails-callback"><code>cookies.set(details, callback)</code></a><a class="header-link" href="#cookiessetdetails-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>details</code> Object</p>
<ul>
<li><code>url</code> String - The url to associate the cookie with.</li>
<li><code>name</code> String (optional) - The name of the cookie. Empty by default if omitted.</li>
<li><code>value</code> String (optional) - The value of the cookie. Empty by default if omitted.</li>
<li><code>domain</code> String (optional) - The domain of the cookie. Empty by default if omitted.</li>
<li><code>path</code> String (optional) - The path of the cookie. Empty by default if omitted.</li>
<li><code>secure</code> Boolean (optional) - Whether the cookie should be marked as Secure. Defaults to
false.</li>
<li><code>httpOnly</code> Boolean (optional) - Whether the cookie should be marked as HTTP only.
Defaults to false.</li>
<li><code>expirationDate</code> Double (optional) - The expiration date of the cookie as the number of
seconds since the UNIX epoch. If omitted then the cookie becomes a session
cookie and will not be retained between sessions.</li>
</ul>
</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>error</code> Error</li>
</ul>
</li>
</ul>
<p>Sets a cookie with <code>details</code>, <code>callback</code> will be called with <code>callback(error)</code>
on complete.</p>
<h4 id="cookiesremoveurl-name-callback"><a href="#cookiesremoveurl-name-callback"><code>cookies.remove(url, name, callback)</code></a><a class="header-link" href="#cookiesremoveurl-name-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>url</code> String - The URL associated with the cookie.</li>
<li><code>name</code> String - The name of cookie to remove.</li>
<li><code>callback</code> Function</li>
</ul>
<p>Removes the cookies matching <code>url</code> and <code>name</code>, <code>callback</code> will called with
<code>callback()</code> on complete.</p>
<h4 id="cookiesflushstorecallback"><a href="#cookiesflushstorecallback"><code>cookies.flushStore(callback)</code></a><a class="header-link" href="#cookiesflushstorecallback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>callback</code> Function</li>
</ul>
<p>Writes any unwritten cookies data to disk.</p>

  <hr>
  <h1 id="cpuusage-object"><a href="#cpuusage-object">CPUUsage Object</a><a class="header-link" href="#cpuusage-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>percentCPUUsage</code> Number - Percentage of CPU used since the last call to getCPUUsage.
First call returns 0.</li>
<li><code>idleWakeupsPerSecond</code> Number - The number of average idle cpu wakeups per second
since the last call to getCPUUsage. First call returns 0. Will always return 0 on
Windows.</li>
</ul>

  <hr>
  <h1 id="crashreport-object"><a href="#crashreport-object">CrashReport Object</a><a class="header-link" href="#crashreport-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>date</code> String</li>
<li><code>ID</code> Integer</li>
</ul>

  <hr>
  <h1 id="crashreporter"><a href="#crashreporter">crashReporter</a><a class="header-link" href="#crashreporter" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Submit crash reports to a remote server.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a>, <a href="https://electronjs.org/docs/glossary#renderer-process">Renderer</a></p>
<p>The following is an example of automatically submitting a crash report to a
remote server:</p>
<pre><code class="hljs language-javascript" id="_yrechvfa"><span class="hljs-keyword">const</span> {crashReporter} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

crashReporter.start({
  <span class="hljs-attr">productName</span>: <span class="hljs-string">'YourName'</span>,
  <span class="hljs-attr">companyName</span>: <span class="hljs-string">'YourCompany'</span>,
  <span class="hljs-attr">submitURL</span>: <span class="hljs-string">'https://your-domain.com/url-to-submit'</span>,
  <span class="hljs-attr">uploadToServer</span>: <span class="hljs-literal">true</span>
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_yrechvfa">Copy</button></pre>
<p>For setting up a server to accept and process crash reports, you can use
following projects:</p>
<ul>
<li><a href="https://github.com/mozilla/socorro">socorro</a></li>
<li><a href="https://github.com/electron/mini-breakpad-server">mini-breakpad-server</a></li>
</ul>
<p>Crash reports are saved locally in an application-specific temp directory folder.
For a <code>productName</code> of <code>YourName</code>, crash reports will be stored in a folder
named <code>YourName Crashes</code> inside the temp directory. You can customize this temp
directory location for your app by calling the <code>app.setPath('temp', '/my/custom/temp')</code>
API before starting the crash reporter.</p>
<h2 id="methods"><a href="#methods">Methods</a><a class="header-link" href="#methods" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>crashReporter</code> module has the following methods:</p>
<h3 id="crashreporterstartoptions"><a href="#crashreporterstartoptions"><code>crashReporter.start(options)</code></a><a class="header-link" href="#crashreporterstartoptions" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>companyName</code> String (optional)</li>
<li><code>submitURL</code> String - URL that crash reports will be sent to as POST.</li>
<li><code>productName</code> String (optional) - Defaults to <code>app.getName()</code>.</li>
<li><code>uploadToServer</code> Boolean (optional) - Whether crash reports should be sent to the server
Default is <code>true</code>.</li>
<li><code>ignoreSystemCrashHandler</code> Boolean (optional) - Default is <code>false</code>.</li>
<li><code>extra</code> Object (optional) - An object you can define that will be sent along with the
report. Only string properties are sent correctly. Nested objects are not
supported and the property names and values must be less than 64 characters long.</li>
<li><code>crashesDirectory</code> String (optional) - Directory to store the crashreports temporarily (only used when the crash reporter is started via <code>process.crashReporter.start</code>)</li>
</ul>
</li>
</ul>
<p>You are required to call this method before using any other <code>crashReporter</code> APIs
and in each process (main/renderer) from which you want to collect crash reports.
You can pass different options to <code>crashReporter.start</code> when calling from different processes.</p>
<p><strong>Note</strong> Child processes created via the <code>child_process</code> module will not have access to the Electron modules.
Therefore, to collect crash reports from them, use <code>process.crashReporter.start</code> instead. Pass the same options as above
along with an additional one called <code>crashesDirectory</code> that should point to a directory to store the crash
reports temporarily. You can test this out by calling <code>process.crash()</code> to crash the child process.</p>
<p><strong>Note:</strong> To collect crash reports from child process in Windows, you need to add this extra code as well.
This will start the process that will monitor and send the crash reports. Replace <code>submitURL</code>, <code>productName</code>
and <code>crashesDirectory</code> with appropriate values.</p>
<p><strong>Note:</strong> If you need send additional/updated <code>extra</code> parameters after your
first call <code>start</code> you can call <code>setExtraParameter</code> on macOS or call <code>start</code>
again with the new/updated <code>extra</code> parameters on Linux and Windows.</p>
<pre><code class="hljs language-js" id="_r4fimyz9"> <span class="hljs-keyword">const</span> args = [
   <span class="hljs-string">`--reporter-url=<span class="hljs-subst">${submitURL}</span>`</span>,
   <span class="hljs-string">`--application-name=<span class="hljs-subst">${productName}</span>`</span>,
   <span class="hljs-string">`--crashes-directory=<span class="hljs-subst">${crashesDirectory}</span>`</span>
 ]
 <span class="hljs-keyword">const</span> env = {
   <span class="hljs-attr">ELECTRON_INTERNAL_CRASH_SERVICE</span>: <span class="hljs-number">1</span>
 }
 spawn(process.execPath, args, {
   <span class="hljs-attr">env</span>: env,
   <span class="hljs-attr">detached</span>: <span class="hljs-literal">true</span>
 })</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_r4fimyz9">Copy</button></pre>
<p><strong>Note:</strong> On macOS, Electron uses a new <code>crashpad</code> client for crash collection and reporting.
If you want to enable crash reporting, initializing <code>crashpad</code> from the main process using <code>crashReporter.start</code> is required
regardless of which process you want to collect crashes from. Once initialized this way, the crashpad handler collects
crashes from all processes. You still have to call <code>crashReporter.start</code> from the renderer or child process, otherwise crashes from
them will get reported without <code>companyName</code>, <code>productName</code> or any of the <code>extra</code> information.</p>
<h3 id="crashreportergetlastcrashreport"><a href="#crashreportergetlastcrashreport"><code>crashReporter.getLastCrashReport()</code></a><a class="header-link" href="#crashreportergetlastcrashreport" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <a href="https://electronjs.org/docs/api/structures/crash-report"><code>CrashReport</code></a>:</p>
<p>Returns the date and ID of the last crash report. If no crash reports have been
sent or the crash reporter has not been started, <code>null</code> is returned.</p>
<h3 id="crashreportergetuploadedreports"><a href="#crashreportergetuploadedreports"><code>crashReporter.getUploadedReports()</code></a><a class="header-link" href="#crashreportergetuploadedreports" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <a href="https://electronjs.org/docs/api/structures/crash-report"><code>CrashReport[]</code></a>:</p>
<p>Returns all uploaded crash reports. Each report contains the date and uploaded
ID.</p>
<h3 id="crashreportergetuploadtoserver-linux-macos"><a href="#crashreportergetuploadtoserver-linux-macos"><code>crashReporter.getUploadToServer()</code> <em class="platform-label">Linux</em> <em class="platform-label">macOS</em></a><a class="header-link" href="#crashreportergetuploadtoserver-linux-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Boolean</code> - Whether reports should be submitted to the server.  Set through
the <code>start</code> method or <code>setUploadToServer</code>.</p>
<p><strong>Note:</strong> This API can only be called from the main process.</p>
<h3 id="crashreportersetuploadtoserveruploadtoserver-linux-macos"><a href="#crashreportersetuploadtoserveruploadtoserver-linux-macos"><code>crashReporter.setUploadToServer(uploadToServer)</code> <em class="platform-label">Linux</em> <em class="platform-label">macOS</em></a><a class="header-link" href="#crashreportersetuploadtoserveruploadtoserver-linux-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>uploadToServer</code> Boolean <em class="platform-label">macOS</em> - Whether reports should be submitted to the server</li>
</ul>
<p>This would normally be controlled by user preferences. This has no effect if
called before <code>start</code> is called.</p>
<p><strong>Note:</strong> This API can only be called from the main process.</p>
<h3 id="crashreporteraddextraparameterkey-value-macos"><a href="#crashreporteraddextraparameterkey-value-macos"><code>crashReporter.addExtraParameter(key, value)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#crashreporteraddextraparameterkey-value-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>key</code> String - Parameter key, must be less than 64 characters long.</li>
<li><code>value</code> String - Parameter value, must be less than 64 characters long.</li>
</ul>
<p>Set an extra parameter to be sent with the crash report. The values
specified here will be sent in addition to any values set via the <code>extra</code> option when <code>start</code>
 was called. This API is only available on macOS, if you need to 
add/update extra parameters on Linux and Windows after your first call 
to <code>start</code> you can call <code>start</code> again with the updated <code>extra</code> options.</p>
<h3 id="crashreporterremoveextraparameterkey-macos"><a href="#crashreporterremoveextraparameterkey-macos"><code>crashReporter.removeExtraParameter(key)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#crashreporterremoveextraparameterkey-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>key</code> String - Parameter key, must be less than 64 characters long.</li>
</ul>
<p>Remove a extra parameter from the current set of parameters so that it will not be sent with the crash report.</p>
<h3 id="crashreportergetparameters"><a href="#crashreportergetparameters"><code>crashReporter.getParameters()</code></a><a class="header-link" href="#crashreportergetparameters" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>See all of the current parameters being passed to the crash reporter.</p>
<h2 id="crash-report-payload"><a href="#crash-report-payload">Crash Report Payload</a><a class="header-link" href="#crash-report-payload" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The crash reporter will send the following data to the <code>submitURL</code> as
a <code>multipart/form-data</code> <code>POST</code>:</p>
<ul>
<li><code>ver</code> String - The version of Electron.</li>
<li><code>platform</code> String - e.g. 'win32'.</li>
<li><code>process_type</code> String - e.g. 'renderer'.</li>
<li><code>guid</code> String - e.g. '<a href="https://github.com/electron/electron-i18n/commit/5e1286fc"><code>5e1286f</code></a>-da97-479e-918b-6bfb0c3d1c72'</li>
<li><code>_version</code> String - The version in <code>package.json</code>.</li>
<li><code>_productName</code> String - The product name in the <code>crashReporter</code> <code>options</code>
object.</li>
<li><code>prod</code> String - Name of the underlying product. In this case Electron.</li>
<li><code>_companyName</code> String - The company name in the <code>crashReporter</code> <code>options</code>
object.</li>
<li><code>upload_file_minidump</code> File - The crash report in the format of <code>minidump</code>.</li>
<li>All level one properties of the <code>extra</code> object in the <code>crashReporter</code>
<code>options</code> object.</li>
</ul>

  <hr>
  <h1 id="debugging-on-windows"><a href="#debugging-on-windows">Debugging on Windows</a><a class="header-link" href="#debugging-on-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>If you experience crashes or issues in Electron that you believe are not caused
by your JavaScript application, but instead by Electron itself, debugging can
be a little bit tricky, especially for developers not used to native/C++
debugging. However, using Visual Studio, GitHub's hosted Electron Symbol Server,
and the Electron source code, it is fairly easy to enable step-through debugging
with breakpoints inside Electron's source code.</p>
<h2 id="requirements"><a href="#requirements">Requirements</a><a class="header-link" href="#requirements" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<ul>
<li>
<p><strong>A debug build of Electron</strong>: The easiest way is usually building it
yourself, using the tools and prerequisites listed in the
<a href="https://electronjs.org/docs/development/build-instructions-windows">build instructions for Windows</a>. While you can
easily attach to and debug Electron as you can download it directly, you will
find that it is heavily optimized, making debugging substantially more
difficult: The debugger will not be able to show you the content of all
variables and the execution path can seem strange because of inlining,
tail calls, and other compiler optimizations.</p>
</li>
<li>
<p><strong>Visual Studio with C++ Tools</strong>: The free community editions of Visual
Studio 2013 and Visual Studio 2015 both work. Once installed,
<a href="https://electronjs.org/docs/development/setting-up-symbol-server">configure Visual Studio to use GitHub's Electron Symbol server</a>.
It will enable Visual Studio to gain a better understanding of what happens
inside Electron, making it easier to present variables in a human-readable
format.</p>
</li>
<li>
<p><strong>ProcMon</strong>: The <a href="https://technet.microsoft.com/en-us/sysinternals/processmonitor.aspx">free SysInternals tool</a> allows you to inspect
a processes parameters, file handles, and registry operations.</p>
</li>
</ul>
<h2 id="attaching-to-and-debugging-electron"><a href="#attaching-to-and-debugging-electron">Attaching to and Debugging Electron</a><a class="header-link" href="#attaching-to-and-debugging-electron" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>To start a debugging session, open up PowerShell/CMD and execute your debug
build of Electron, using the application to open as a parameter.</p>
<pre><code class="hljs language-powershell" id="_k1zwm179">$ ./out/D/electron.exe ~/my-electron-app/</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_k1zwm179">Copy</button></pre>
<h3 id="setting-breakpoints"><a href="#setting-breakpoints">Setting Breakpoints</a><a class="header-link" href="#setting-breakpoints" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Then, open up Visual Studio. Electron is not built with Visual Studio and hence
does not contain a project file - you can however open up the source code files
"As File", meaning that Visual Studio will open them up by themselves. You can
still set breakpoints - Visual Studio will automatically figure out that the
source code matches the code running in the attached process and break
accordingly.</p>
<p>Relevant code files can be found in <code>./atom/</code> as well as in Brightray, found in
<code>./brightray/browser</code> and <code>./brightray/common</code>. If you're hardcore,
you can also debug Chromium directly, which is obviously found in <code>chromium_src</code>.</p>
<h3 id="attaching"><a href="#attaching">Attaching</a><a class="header-link" href="#attaching" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>You can attach the Visual Studio debugger to a running process on a local or
remote computer. After the process is running, click Debug / Attach to Process
(or press <code>CTRL+ALT+P</code>) to open the "Attach to Process" dialog box. You can use
this capability to debug apps that are running on a local or remote computer,
debug multiple processes simultaneously.</p>
<p>If Electron is running under a different user account, select the
<code>Show processes from all users</code> check box. Notice that depending on how many
BrowserWindows your app opened, you will see multiple processes. A typical
one-window app will result in Visual Studio presenting you with two
<code>Electron.exe</code> entries - one for the main process and one for the renderer
process. Since the list only gives you names, there's currently no reliable
way of figuring out which is which.</p>
<h3 id="which-process-should-i-attach-to"><a href="#which-process-should-i-attach-to">Which Process Should I Attach to?</a><a class="header-link" href="#which-process-should-i-attach-to" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Code executed within the main process (that is, code found in or eventually run
by your main JavaScript file) as well as code called using the remote
(<code>require('electron').remote</code>) will run inside the main process, while other
code will execute inside its respective renderer process.</p>
<p>You can be attached to multiple programs when you are debugging, but only one
program is active in the debugger at any time. You can set the active program
in the <code>Debug Location</code> toolbar or the <code>Processes window</code>.</p>
<h2 id="using-procmon-to-observe-a-process"><a href="#using-procmon-to-observe-a-process">Using ProcMon to Observe a Process</a><a class="header-link" href="#using-procmon-to-observe-a-process" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>While Visual Studio is fantastic for inspecting specific code paths, ProcMon's
strength is really in observing everything your application is doing with the
operating system - it captures File, Registry, Network, Process, and Profiling
details of processes. It attempts to log <strong>all</strong> events occurring and can be
quite overwhelming, but if you seek to understand what and how your application
is doing to the operating system, it can be a valuable resource.</p>
<p>For an introduction to ProcMon's basic and advanced debugging features, go check
out <a href="https://channel9.msdn.com/shows/defrag-tools/defrag-tools-4-process-monitor">this video tutorial</a> provided by Microsoft.</p>

  <hr>
  <h2 id="class-debugger"><a href="#class-debugger">Class: Debugger</a><a class="header-link" href="#class-debugger" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>An alternate transport for Chrome's remote debugging protocol.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<p>Chrome Developer Tools has a <a href="https://developer.chrome.com/devtools/docs/debugger-protocol">special binding</a> available at JavaScript
runtime that allows interacting with pages and instrumenting them.</p>
<pre><code class="hljs language-javascript" id="_o0xaf0m"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow()

<span class="hljs-keyword">try</span> {
  win.webContents.debugger.attach(<span class="hljs-string">'1.1'</span>)
} <span class="hljs-keyword">catch</span> (err) {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Debugger attach failed : '</span>, err)
}

win.webContents.debugger.on(<span class="hljs-string">'detach'</span>, (event, reason) =&gt; {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Debugger detached due to : '</span>, reason)
})

win.webContents.debugger.on(<span class="hljs-string">'message'</span>, (event, method, params) =&gt; {
  <span class="hljs-keyword">if</span> (method === <span class="hljs-string">'Network.requestWillBeSent'</span>) {
    <span class="hljs-keyword">if</span> (params.request.url === <span class="hljs-string">'https://www.github.com'</span>) {
      win.webContents.debugger.detach()
    }
  }
})

win.webContents.debugger.sendCommand(<span class="hljs-string">'Network.enable'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_o0xaf0m">Copy</button></pre>
<h3 id="instance-methods"><a href="#instance-methods">Instance Methods</a><a class="header-link" href="#instance-methods" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<h4 id="debuggerattachprotocolversion"><a href="#debuggerattachprotocolversion"><code>debugger.attach([protocolVersion])</code></a><a class="header-link" href="#debuggerattachprotocolversion" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>protocolVersion</code> String (optional) - Requested debugging protocol version.</li>
</ul>
<p>Attaches the debugger to the <code>webContents</code>.</p>
<h4 id="debuggerisattached"><a href="#debuggerisattached"><code>debugger.isAttached()</code></a><a class="header-link" href="#debuggerisattached" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether a debugger is attached to the <code>webContents</code>.</p>
<h4 id="debuggerdetach"><a href="#debuggerdetach"><code>debugger.detach()</code></a><a class="header-link" href="#debuggerdetach" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Detaches the debugger from the <code>webContents</code>.</p>
<h4 id="debuggersendcommandmethod-commandparams-callback"><a href="#debuggersendcommandmethod-commandparams-callback"><code>debugger.sendCommand(method[, commandParams, callback])</code></a><a class="header-link" href="#debuggersendcommandmethod-commandparams-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>method</code> String - Method name, should be one of the methods defined by the
remote debugging protocol.</li>
<li><code>commandParams</code> Object (optional) - JSON object with request parameters.</li>
<li>
<p><code>callback</code> Function (optional) - Response</p>
<ul>
<li><code>error</code> Object - Error message indicating the failure of the command.</li>
<li><code>result</code> Any - Response defined by the 'returns' attribute of
the command description in the remote debugging protocol.</li>
</ul>
</li>
</ul>
<p>Send given command to the debugging target.</p>
<h3 id="instance-events"><a href="#instance-events">Instance Events</a><a class="header-link" href="#instance-events" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<h4 id="event-detach"><a href="#event-detach">Event: 'detach'</a><a class="header-link" href="#event-detach" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>event</code> Event</li>
<li><code>reason</code> String - Reason for detaching debugger.</li>
</ul>
<p>Emitted when debugging session is terminated. This happens either when
<code>webContents</code> is closed or devtools is invoked for the attached <code>webContents</code>.</p>
<h4 id="event-message"><a href="#event-message">Event: 'message'</a><a class="header-link" href="#event-message" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>event</code> Event</li>
<li><code>method</code> String - Method name.</li>
<li><code>params</code> Object - Event parameters defined by the 'parameters'
attribute in the remote debugging protocol.</li>
</ul>
<p>Emitted whenever debugging target issues instrumentation event.</p>

  <hr>
  <h1 id="debugging-on-macos"><a href="#debugging-on-macos">Debugging on macOS</a><a class="header-link" href="#debugging-on-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>If you experience crashes or issues in Electron that you believe are not caused
by your JavaScript application, but instead by Electron itself, debugging can
be a little bit tricky, especially for developers not used to native/C++
debugging. However, using lldb, and the Electron source code, it is fairly easy
to enable step-through debugging with breakpoints inside Electron's source code.</p>
<h2 id="requirements"><a href="#requirements">Requirements</a><a class="header-link" href="#requirements" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<ul>
<li>
<p><strong>A debug build of Electron</strong>: The easiest way is usually building it
yourself, using the tools and prerequisites listed in the
<a href="https://electronjs.org/docs/development/build-instructions-osx">build instructions for macOS</a>. While you can
easily attach to and debug Electron as you can download it directly, you will
find that it is heavily optimized, making debugging substantially more
difficult: The debugger will not be able to show you the content of all
variables and the execution path can seem strange because of inlining,
tail calls, and other compiler optimizations.</p>
</li>
<li>
<p><strong>Xcode</strong>: In addition to Xcode, also install the Xcode command line tools.
They include LLDB, the default debugger in Xcode on Mac OS X. It supports
debugging C, Objective-C and C++ on the desktop and iOS devices and simulator.</p>
</li>
</ul>
<h2 id="attaching-to-and-debugging-electron"><a href="#attaching-to-and-debugging-electron">Attaching to and Debugging Electron</a><a class="header-link" href="#attaching-to-and-debugging-electron" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>To start a debugging session, open up Terminal and start <code>lldb</code>, passing a debug
build of Electron as a parameter.</p>
<pre><code class="hljs language-sh" id="_mnnz9emn">$ lldb ./out/D/Electron.app
(lldb) target create <span class="hljs-string">"./out/D/Electron.app"</span>
Current executable <span class="hljs-built_in">set</span> to <span class="hljs-string">'./out/D/Electron.app'</span> (x86_64).</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_mnnz9emn">Copy</button></pre>
<h3 id="setting-breakpoints"><a href="#setting-breakpoints">Setting Breakpoints</a><a class="header-link" href="#setting-breakpoints" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>LLDB is a powerful tool and supports multiple strategies for code inspection. For
this basic introduction, let's assume that you're calling a command from JavaScript
that isn't behaving correctly - so you'd like to break on that command's C++
counterpart inside the Electron source.</p>
<p>Relevant code files can be found in <code>./atom/</code> as well as in Brightray, found in
<code>./brightray/browser</code> and <code>./brightray/common</code>. If you're hardcore,
you can also debug Chromium directly, which is obviously found in <code>chromium_src</code>.</p>
<p>Let's assume that you want to debug <code>app.setName()</code>, which is defined in <code>browser.cc</code>
as <code>Browser::SetName()</code>. Set the breakpoint using the <code>breakpoint</code> command, specifying
file and line to break on:</p>
<pre><code class="hljs language-sh" id="_fzrbxcp">(lldb) breakpoint <span class="hljs-built_in">set</span> --file browser.cc --line 117
Breakpoint 1: <span class="hljs-built_in">where</span> = Electron Framework`atom::Browser::SetName(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) + 20 at browser.cc:118, address = 0x000000000015fdb4</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_fzrbxcp">Copy</button></pre>
<p>Then, start Electron:</p>
<pre><code class="hljs language-sh" id="_tui3yxod">(lldb) run</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_tui3yxod">Copy</button></pre>
<p>The app will immediately be paused, since Electron sets the app's name on launch:</p>
<pre><code class="hljs language-sh" id="_gpysp9an">(lldb) run
Process 25244 launched: <span class="hljs-string">'/Users/fr/Code/electron/out/D/Electron.app/Contents/MacOS/Electron'</span> (x86_64)
Process 25244 stopped
* thread <span class="hljs-comment">#1: tid = 0x839a4c, 0x0000000100162db4 Electron Framework`atom::Browser::SetName(this=0x0000000108b14f20, name="Electron") + 20 at browser.cc:118, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1</span>
    frame <span class="hljs-comment">#0: 0x0000000100162db4 Electron Framework`atom::Browser::SetName(this=0x0000000108b14f20, name="Electron") + 20 at browser.cc:118</span>
   115 	}
   116
   117 	void Browser::SetName(const std::string&amp; name) {
-&gt; 118 	  name_override_ = name;
   119 	}
   120
   121 	int Browser::<span class="hljs-function"><span class="hljs-title">GetBadgeCount</span></span>() {
(lldb)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_gpysp9an">Copy</button></pre>
<p>To show the arguments and local variables for the current frame, run <code>frame variable</code> (or <code>fr v</code>),
which will show you that the app is currently setting the name to "Electron".</p>
<pre><code class="hljs language-sh" id="_o9x4juj">(lldb) frame variable
(atom::Browser *) this = 0x0000000108b14f20
(const string &amp;) name = <span class="hljs-string">"Electron"</span>: {
    [...]
}</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_o9x4juj">Copy</button></pre>
<p>To do a source level single step in the currently selected thread, execute <code>step</code> (or <code>s</code>).
This would take you into <code>name_override_.empty()</code>. To proceed and do a step over,
run <code>next</code> (or <code>n</code>).</p>
<pre><code class="hljs language-sh" id="_xtahowoi">(lldb) step
Process 25244 stopped
* thread <span class="hljs-comment">#1: tid = 0x839a4c, 0x0000000100162dcc Electron Framework`atom::Browser::SetName(this=0x0000000108b14f20, name="Electron") + 44 at browser.cc:119, queue = 'com.apple.main-thread', stop reason = step in</span>
    frame <span class="hljs-comment">#0: 0x0000000100162dcc Electron Framework`atom::Browser::SetName(this=0x0000000108b14f20, name="Electron") + 44 at browser.cc:119</span>
   116
   117 	void Browser::SetName(const std::string&amp; name) {
   118 	  name_override_ = name;
-&gt; 119 	}
   120
   121 	int Browser::<span class="hljs-function"><span class="hljs-title">GetBadgeCount</span></span>() {
   122 	  <span class="hljs-built_in">return</span> badge_count_;</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_xtahowoi">Copy</button></pre>
<p>To finish debugging at this point, run <code>process continue</code>. You can also continue until a certain
line is hit in this thread (<code>thread until 100</code>). This command will run the thread in the current
frame till it reaches line 100 in this frame or stops if it leaves the current frame.</p>
<p>Now, if you open up Electron's developer tools and call <code>setName</code>, you will once again hit the
breakpoint.</p>
<h3 id="further-reading"><a href="#further-reading">Further Reading</a><a class="header-link" href="#further-reading" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>LLDB is a powerful tool with a great documentation. To learn more about it, consider
Apple's debugging documentation, for instance the <a href="https://developer.apple.com/library/mac/documentation/IDEs/Conceptual/gdb_to_lldb_transition_guide/document/lldb-basics.html#//apple_ref/doc/uid/TP40012917-CH2-SW2">LLDB Command Structure Reference</a>
or the introduction to <a href="https://developer.apple.com/library/mac/documentation/IDEs/Conceptual/gdb_to_lldb_transition_guide/document/lldb-terminal-workflow-tutorial.html">Using LLDB as a Standalone Debugger</a>.</p>
<p>You can also check out LLDB's fantastic <a href="http://lldb.llvm.org/tutorial.html">manual and tutorial</a>, which
will explain more complex debugging scenarios.</p>

  <hr>
  <h1 id="debugging-the-main-process"><a href="#debugging-the-main-process">Debugging the Main Process</a><a class="header-link" href="#debugging-the-main-process" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>The DevTools in an Electron browser window can only debug JavaScript that's
executed in that window (i.e. the web pages). To debug JavaScript that's
executed in the main process you will need to use an external debugger and
launch Electron with the <code>--inspect</code> or <code>--inspect-brk</code> switch.</p>
<h2 id="command-line-switches"><a href="#command-line-switches">Command Line Switches</a><a class="header-link" href="#command-line-switches" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Use one of the following command line switches to enable debugging of the main
process:</p>
<h3 id="--inspectport"><a href="#--inspectport"><code>--inspect=[port]</code></a><a class="header-link" href="#--inspectport" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Electron will listen for V8 inspector protocol messages on the specified <code>port</code>,
an external debugger will need to connect on this port. The default <code>port</code> is
<code>5858</code>.</p>
<pre><code class="hljs language-shell" id="_kfpi8aa">electron --inspect=5858 your/app</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_kfpi8aa">Copy</button></pre>
<h3 id="--inspect-brkport"><a href="#--inspect-brkport"><code>--inspect-brk=[port]</code></a><a class="header-link" href="#--inspect-brkport" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Like <code>--inspect</code> but pauses execution on the first line of JavaScript.</p>
<h2 id="external-debuggers"><a href="#external-debuggers">External Debuggers</a><a class="header-link" href="#external-debuggers" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>You will need to use a debugger that supports the V8 inspector protocol.</p>
<ul>
<li>Connect Chrome by visiting <code>chrome://inspect</code> and selecting to inspect the
launched Electron app present there.</li>
<li><a href="https://electronjs.org/docs/tutorial/debugging-main-process-vscode">Debugging the Main Process in VSCode</a></li>
</ul>

  <hr>
  <h1 id="debugging-the-main-process-in-vscode"><a href="#debugging-the-main-process-in-vscode">Debugging the Main Process in VSCode</a><a class="header-link" href="#debugging-the-main-process-in-vscode" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<h3 id="1-open-an-electron-project-in-vscode"><a href="#1-open-an-electron-project-in-vscode">1. Open an Electron project in VSCode.</a><a class="header-link" href="#1-open-an-electron-project-in-vscode" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-sh" id="_ffpcnuhl">$ git <span class="hljs-built_in">clone</span> git@github.com:electron/electron-quick-start.git
$ code electron-quick-start</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_ffpcnuhl">Copy</button></pre>
<h3 id="2-add-a-file-vscodelaunchjson-with-the-following-configuration"><a href="#2-add-a-file-vscodelaunchjson-with-the-following-configuration">2. Add a file <code>.vscode/launch.json</code> with the following configuration:</a><a class="header-link" href="#2-add-a-file-vscodelaunchjson-with-the-following-configuration" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-json" id="_vwhj8tgc">{
  <span class="hljs-attr">"version"</span>: <span class="hljs-string">"0.2.0"</span>,
  <span class="hljs-attr">"configurations"</span>: [
    {
      <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Debug Main Process"</span>,
      <span class="hljs-attr">"type"</span>: <span class="hljs-string">"node"</span>,
      <span class="hljs-attr">"request"</span>: <span class="hljs-string">"launch"</span>,
      <span class="hljs-attr">"cwd"</span>: <span class="hljs-string">"${workspaceRoot}"</span>,
      <span class="hljs-attr">"runtimeExecutable"</span>: <span class="hljs-string">"${workspaceRoot}/node_modules/.bin/electron"</span>,
      <span class="hljs-attr">"windows"</span>: {
        <span class="hljs-attr">"runtimeExecutable"</span>: <span class="hljs-string">"${workspaceRoot}/node_modules/.bin/electron.cmd"</span>
      },
      <span class="hljs-attr">"args"</span> : [<span class="hljs-string">"."</span>]
    }
  ]
}</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_vwhj8tgc">Copy</button></pre>
<p><strong>Note:</strong> For Windows, use <code>"${workspaceRoot}/node_modules/.bin/electron.cmd"</code> for <code>runtimeExecutable</code>.</p>
<h3 id="3-debugging"><a href="#3-debugging">3. Debugging</a><a class="header-link" href="#3-debugging" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Set some breakpoints in <code>main.js</code>, and start debugging in the <a href="https://code.visualstudio.com/docs/editor/debugging">Debug View</a>. You should be able to hit the breakpoints.</p>
<p>Here is a pre-configured project that you can download and directly debug in VSCode: <a href="https://github.com/octref/vscode-electron-debug/tree/master/electron-quick-start">github.com/octref/vscode-electron-debug/tree/master/electron-quick-start</a></p>

  <hr>
  <h1 id="desktopcapturer"><a href="#desktopcapturer">desktopCapturer</a><a class="header-link" href="#desktopcapturer" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Access information about media sources that can be used to capture audio and
video from the desktop using the <a href="https://developer.mozilla.org/en/docs/Web/API/MediaDevices/getUserMedia"><code>navigator.mediaDevices.getUserMedia</code></a> API.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#renderer-process">Renderer</a></p>
<p>The following example shows how to capture video from a desktop window whose
title is <code>Electron</code>:</p>
<pre><code class="hljs language-javascript" id="_hqr762ra"><span class="hljs-comment">// In the renderer process.</span>
<span class="hljs-keyword">const</span> {desktopCapturer} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

desktopCapturer.getSources({<span class="hljs-attr">types</span>: [<span class="hljs-string">'window'</span>, <span class="hljs-string">'screen'</span>]}, (error, sources) =&gt; {
  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; sources.length; ++i) {
    <span class="hljs-keyword">if</span> (sources[i].name === <span class="hljs-string">'Electron'</span>) {
      navigator.mediaDevices.getUserMedia({
        <span class="hljs-attr">audio</span>: <span class="hljs-literal">false</span>,
        <span class="hljs-attr">video</span>: {
          <span class="hljs-attr">mandatory</span>: {
            <span class="hljs-attr">chromeMediaSource</span>: <span class="hljs-string">'desktop'</span>,
            <span class="hljs-attr">chromeMediaSourceId</span>: sources[i].id,
            <span class="hljs-attr">minWidth</span>: <span class="hljs-number">1280</span>,
            <span class="hljs-attr">maxWidth</span>: <span class="hljs-number">1280</span>,
            <span class="hljs-attr">minHeight</span>: <span class="hljs-number">720</span>,
            <span class="hljs-attr">maxHeight</span>: <span class="hljs-number">720</span>
          }
        }
      })
      .then(<span class="hljs-function">(<span class="hljs-params">stream</span>) =&gt;</span> handleStream(stream))
      .catch(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> handleError(e))
      <span class="hljs-keyword">return</span>
    }
  }
})

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleStream</span> (<span class="hljs-params">stream</span>) </span>{
  <span class="hljs-keyword">const</span> video = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'video'</span>)
  video.srcObject = stream
  video.onloadedmetadata = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> video.play()
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleError</span> (<span class="hljs-params">e</span>) </span>{
  <span class="hljs-built_in">console</span>.log(e)
}</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_hqr762ra">Copy</button></pre>
<p>To capture video from a source provided by <code>desktopCapturer</code> the constraints
passed to <a href="https://developer.mozilla.org/en/docs/Web/API/MediaDevices/getUserMedia"><code>navigator.mediaDevices.getUserMedia</code></a> must include
<code>chromeMediaSource: 'desktop'</code>, and <code>audio: false</code>.</p>
<p>To capture both audio and video from the entire desktop the constraints passed
to <a href="https://developer.mozilla.org/en/docs/Web/API/MediaDevices/getUserMedia"><code>navigator.mediaDevices.getUserMedia</code></a> must include <code>chromeMediaSource: 'desktop'</code>,
for both <code>audio</code> and <code>video</code>, but should not include a <code>chromeMediaSourceId</code> constraint.</p>
<pre><code class="hljs language-javascript" id="_xyf2030j"><span class="hljs-keyword">const</span> constraints = {
  <span class="hljs-attr">audio</span>: {
    <span class="hljs-attr">mandatory</span>: {
      <span class="hljs-attr">chromeMediaSource</span>: <span class="hljs-string">'desktop'</span>
    }
  },
  <span class="hljs-attr">video</span>: {
    <span class="hljs-attr">mandatory</span>: {
      <span class="hljs-attr">chromeMediaSource</span>: <span class="hljs-string">'desktop'</span>
    }
  }
}</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_xyf2030j">Copy</button></pre>
<h2 id="methods"><a href="#methods">Methods</a><a class="header-link" href="#methods" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>desktopCapturer</code> module has the following methods:</p>
<h3 id="desktopcapturergetsourcesoptions-callback"><a href="#desktopcapturergetsourcesoptions-callback"><code>desktopCapturer.getSources(options, callback)</code></a><a class="header-link" href="#desktopcapturergetsourcesoptions-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>types</code> String[] - An array of Strings that lists the types of desktop sources
to be captured, available types are <code>screen</code> and <code>window</code>.</li>
<li><code>thumbnailSize</code> <a href="https://electronjs.org/docs/api/structures/size">Size</a> (optional) - The size that the media source thumbnail
should be scaled to. Default is <code>150</code> x <code>150</code>.</li>
</ul>
</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>error</code> Error</li>
<li><code>sources</code> <a href="https://electronjs.org/docs/api/structures/desktop-capturer-source">DesktopCapturerSource[]</a></li>
</ul>
</li>
</ul>
<p>Starts gathering information about all available desktop media sources,
and calls <code>callback(error, sources)</code> when finished.</p>
<p><code>sources</code> is an array of <a href="https://electronjs.org/docs/api/structures/desktop-capturer-source"><code>DesktopCapturerSource</code></a>
objects, each <code>DesktopCapturerSource</code> represents a screen or an individual window that can be
captured.</p>

  <hr>
  <h1 id="desktopcapturersource-object"><a href="#desktopcapturersource-object">DesktopCapturerSource Object</a><a class="header-link" href="#desktopcapturersource-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>id</code> String - The identifier of a window or screen that can be used as a
<code>chromeMediaSourceId</code> constraint when calling
[<code>navigator.webkitGetUserMedia</code>]. The format of the identifier will be
<code>window:XX</code> or <code>screen:XX</code>, where <code>XX</code> is a random generated number.</li>
<li><code>name</code> String - A screen source will be named either <code>Entire Screen</code> or
<code>Screen &lt;index&gt;</code>, while the name of a window source will match the window
title.</li>
<li><code>thumbnail</code> <a href="https://electronjs.org/docs/api/native-image">NativeImage</a> - A thumbnail image. <strong>Note:</strong>
There is no guarantee that the size of the thumbnail is the same as the
<code>thumbnailSize</code> specified in the <code>options</code> passed to
<code>desktopCapturer.getSources</code>. The actual size depends on the scale of the
screen or window.</li>
</ul>

  <hr>
  <h1 id="desktop-environment-integration"><a href="#desktop-environment-integration">Desktop Environment Integration</a><a class="header-link" href="#desktop-environment-integration" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>Different operating systems provide different features for integrating desktop
applications into their desktop environments. For example, on Windows,
applications can put shortcuts in the JumpList of task bar, and on Mac,
applications can put a custom menu in the dock menu.</p>
<p>This guide explains how to integrate your application into those desktop
environments with Electron APIs.</p>
<h2 id="notifications"><a href="#notifications">Notifications</a><a class="header-link" href="#notifications" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>See <a href="https://electronjs.org/docs/tutorial/notifications">Notifications</a></p>
<h2 id="recent-documents-windows--macos"><a href="#recent-documents-windows--macos">Recent documents (Windows &amp; macOS)</a><a class="header-link" href="#recent-documents-windows--macos" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Windows and macOS provide easy access to a list of recent documents opened by
the application via JumpList or dock menu, respectively.</p>
<p><strong>JumpList:</strong></p>
<p><img src="All%20the%20Electron%20Docs!%20%20%20Electron_files/11a27b98-fdfc-11e6-8485-cc3b1e86b80a.png" alt="JumpList Recent Files"></p>
<p><strong>Application dock menu:</strong></p>
<img src="All%20the%20Electron%20Docs!%20%20%20Electron_files/2aa80758-6e97-11e4-8cfb-c1a414a10774.png" width="428" height="353">
<p>To add a file to recent documents, you can use the
<a href="https://electronjs.org/docs/api/app#appaddrecentdocumentpath-macos-windows">app.addRecentDocument</a> API:</p>
<pre><code class="hljs language-javascript" id="_ubz29a0k"><span class="hljs-keyword">const</span> {app} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
app.addRecentDocument(<span class="hljs-string">'/Users/USERNAME/Desktop/work.type'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_ubz29a0k">Copy</button></pre>
<p>And you can use <a href="https://electronjs.org/docs/api/app#appclearrecentdocuments-macos-windows">app.clearRecentDocuments</a> API to empty
the recent documents list:</p>
<pre><code class="hljs language-javascript" id="_6h9jp3mj"><span class="hljs-keyword">const</span> {app} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
app.clearRecentDocuments()</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_6h9jp3mj">Copy</button></pre>
<h3 id="windows-notes"><a href="#windows-notes">Windows Notes</a><a class="header-link" href="#windows-notes" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>In order to be able to use this feature on Windows, your application has to be
registered as a handler of the file type of the document, otherwise the file
won't appear in JumpList even after you have added it. You can find everything
on registering your application in <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ee872121(v=vs.85).aspx">Application Registration</a>.</p>
<p>When a user clicks a file from the JumpList, a new instance of your application
will be started with the path of the file added as a command line argument.</p>
<h3 id="macos-notes"><a href="#macos-notes">macOS Notes</a><a class="header-link" href="#macos-notes" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>When a file is requested from the recent documents menu, the <code>open-file</code> event
of <code>app</code> module will be emitted for it.</p>
<h2 id="custom-dock-menu-macos"><a href="#custom-dock-menu-macos">Custom Dock Menu (macOS)</a><a class="header-link" href="#custom-dock-menu-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>macOS enables developers to specify a custom menu for the dock, which usually
contains some shortcuts for commonly used features of your application:</p>
<p><strong>Dock menu of Terminal.app:</strong></p>
<img src="All%20the%20Electron%20Docs!%20%20%20Electron_files/6032658a-6e9c-11e4-9953-aa84006bdfff.png" width="341" height="354">
<p>To set your custom dock menu, you can use the <code>app.dock.setMenu</code> API, which is
only available on macOS:</p>
<pre><code class="hljs language-javascript" id="_2p59bos"><span class="hljs-keyword">const</span> {app, Menu} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-keyword">const</span> dockMenu = Menu.buildFromTemplate([
  {<span class="hljs-attr">label</span>: <span class="hljs-string">'New Window'</span>, click () { <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'New Window'</span>) }},
  {<span class="hljs-attr">label</span>: <span class="hljs-string">'New Window with Settings'</span>,
    <span class="hljs-attr">submenu</span>: [
      {<span class="hljs-attr">label</span>: <span class="hljs-string">'Basic'</span>},
      {<span class="hljs-attr">label</span>: <span class="hljs-string">'Pro'</span>}
    ]
  },
  {<span class="hljs-attr">label</span>: <span class="hljs-string">'New Command...'</span>}
])
app.dock.setMenu(dockMenu)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_2p59bos">Copy</button></pre>
<h2 id="user-tasks-windows"><a href="#user-tasks-windows">User Tasks (Windows)</a><a class="header-link" href="#user-tasks-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>On Windows you can specify custom actions in the <code>Tasks</code> category of JumpList,
as quoted from MSDN:</p>
<blockquote>
<p>Applications define tasks based on both the program's features and the key
things a user is expected to do with them. Tasks should be context-free, in
that the application does not need to be running for them to work. They
should also be the statistically most common actions that a normal user would
perform in an application, such as compose an email message or open the
calendar in a mail program, create a new document in a word processor, launch
an application in a certain mode, or launch one of its subcommands. An
application should not clutter the menu with advanced features that standard
users won't need or one-time actions such as registration. Do not use tasks
for promotional items such as upgrades or special offers.</p>
<p>It is strongly recommended that the task list be static. It should remain the
same regardless of the state or status of the application. While it is
possible to vary the list dynamically, you should consider that this could
confuse the user who does not expect that portion of the destination list to
change.</p>
</blockquote>
<p><strong>Tasks of Internet Explorer:</strong></p>
<p><img src="All%20the%20Electron%20Docs!%20%20%20Electron_files/IC420539.png" alt="IE"></p>
<p>Unlike the dock menu in macOS which is a real menu, user tasks in Windows work
like application shortcuts such that when user clicks a task, a program will be
executed with specified arguments.</p>
<p>To set user tasks for your application, you can use
<a href="https://electronjs.org/docs/api/app#appsetusertaskstasks-windows">app.setUserTasks</a> API:</p>
<pre><code class="hljs language-javascript" id="_om67msm"><span class="hljs-keyword">const</span> {app} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
app.setUserTasks([
  {
    <span class="hljs-attr">program</span>: process.execPath,
    <span class="hljs-attr">arguments</span>: <span class="hljs-string">'--new-window'</span>,
    <span class="hljs-attr">iconPath</span>: process.execPath,
    <span class="hljs-attr">iconIndex</span>: <span class="hljs-number">0</span>,
    <span class="hljs-attr">title</span>: <span class="hljs-string">'New Window'</span>,
    <span class="hljs-attr">description</span>: <span class="hljs-string">'Create a new window'</span>
  }
])</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_om67msm">Copy</button></pre>
<p>To clean your tasks list, just call <code>app.setUserTasks</code> with an empty array:</p>
<pre><code class="hljs language-javascript" id="_7rsnzs4l"><span class="hljs-keyword">const</span> {app} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
app.setUserTasks([])</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_7rsnzs4l">Copy</button></pre>
<p>The user tasks will still show even after your application closes, so the icon
and program path specified for a task should exist until your application is
uninstalled.</p>
<h2 id="thumbnail-toolbars"><a href="#thumbnail-toolbars">Thumbnail Toolbars</a><a class="header-link" href="#thumbnail-toolbars" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>On Windows you can add a thumbnail toolbar with specified buttons in a taskbar
layout of an application window. It provides users a way to access to a
particular window's command without restoring or activating the window.</p>
<p>From MSDN, it's illustrated:</p>
<blockquote>
<p>This toolbar is simply the familiar standard toolbar common control. It has a
maximum of seven buttons. Each button's ID, image, tooltip, and state are defined
in a structure, which is then passed to the taskbar. The application can show,
enable, disable, or hide buttons from the thumbnail toolbar as required by its
current state.</p>
<p>For example, Windows Media Player might offer standard media transport controls
such as play, pause, mute, and stop.</p>
</blockquote>
<p><strong>Thumbnail toolbar of Windows Media Player:</strong></p>
<p><img src="All%20the%20Electron%20Docs!%20%20%20Electron_files/IC420540.png" alt="player"></p>
<p>You can use <a href="https://electronjs.org/docs/api/browser-window#winsetthumbarbuttonsbuttons-windows">BrowserWindow.setThumbarButtons</a> to set
thumbnail toolbar in your application:</p>
<pre><code class="hljs language-javascript" id="_n9c1mgrcl"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>)

<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow({
  <span class="hljs-attr">width</span>: <span class="hljs-number">800</span>,
  <span class="hljs-attr">height</span>: <span class="hljs-number">600</span>
})

win.setThumbarButtons([
  {
    <span class="hljs-attr">tooltip</span>: <span class="hljs-string">'button1'</span>,
    <span class="hljs-attr">icon</span>: path.join(__dirname, <span class="hljs-string">'button1.png'</span>),
    click () { <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'button1 clicked'</span>) }
  },
  {
    <span class="hljs-attr">tooltip</span>: <span class="hljs-string">'button2'</span>,
    <span class="hljs-attr">icon</span>: path.join(__dirname, <span class="hljs-string">'button2.png'</span>),
    <span class="hljs-attr">flags</span>: [<span class="hljs-string">'enabled'</span>, <span class="hljs-string">'dismissonclick'</span>],
    click () { <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'button2 clicked.'</span>) }
  }
])</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_n9c1mgrcl">Copy</button></pre>
<p>To clean thumbnail toolbar buttons, just call <code>BrowserWindow.setThumbarButtons</code>
with an empty array:</p>
<pre><code class="hljs language-javascript" id="_h4tijhfv"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow()
win.setThumbarButtons([])</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_h4tijhfv">Copy</button></pre>
<h2 id="unity-launcher-shortcuts-linux"><a href="#unity-launcher-shortcuts-linux">Unity Launcher Shortcuts (Linux)</a><a class="header-link" href="#unity-launcher-shortcuts-linux" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>In Unity, you can add custom entries to its launcher via modifying the
<code>.desktop</code> file, see <a href="https://help.ubuntu.com/community/UnityLaunchersAndDesktopFiles#Adding_shortcuts_to_a_launcher">Adding Shortcuts to a Launcher</a>.</p>
<p><strong>Launcher shortcuts of Audacious:</strong></p>
<p><img src="All%20the%20Electron%20Docs!%20%20%20Electron_files/UnityLaunchersAndDesktopFiles.png" alt="audacious"></p>
<h2 id="progress-bar-in-taskbar-windows-macos-unity"><a href="#progress-bar-in-taskbar-windows-macos-unity">Progress Bar in Taskbar (Windows, macOS, Unity)</a><a class="header-link" href="#progress-bar-in-taskbar-windows-macos-unity" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>On Windows a taskbar button can be used to display a progress bar. This enables
a window to provide progress information to the user without the user having to
switch to the window itself.</p>
<p>On macOS the progress bar will be displayed as a part of the dock icon.</p>
<p>The Unity DE also has a similar feature that allows you to specify the progress
bar in the launcher.</p>
<p><strong>Progress bar in taskbar button:</strong></p>
<p><img src="All%20the%20Electron%20Docs!%20%20%20Electron_files/16691fda-6f0e-11e4-9676-49b6418f1264.png" alt="Taskbar Progress Bar"></p>
<p>To set the progress bar for a Window, you can use the
<a href="https://electronjs.org/docs/api/browser-window#winsetprogressbarprogress">BrowserWindow.setProgressBar</a> API:</p>
<pre><code class="hljs language-javascript" id="_rb1pw0xc"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow()
win.setProgressBar(<span class="hljs-number">0.5</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_rb1pw0xc">Copy</button></pre>
<h2 id="icon-overlays-in-taskbar-windows"><a href="#icon-overlays-in-taskbar-windows">Icon Overlays in Taskbar (Windows)</a><a class="header-link" href="#icon-overlays-in-taskbar-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>On Windows a taskbar button can use a small overlay to display application
status, as quoted from MSDN:</p>
<blockquote>
<p>Icon overlays serve as a contextual notification of status, and are intended
to negate the need for a separate notification area status icon to communicate
that information to the user. For instance, the new mail status in Microsoft
Outlook, currently shown in the notification area, can now be indicated
through an overlay on the taskbar button. Again, you must decide during your
development cycle which method is best for your application. Overlay icons are
intended to supply important, long-standing status or notifications such as
network status, messenger status, or new mail. The user should not be
presented with constantly changing overlays or animations.</p>
</blockquote>
<p><strong>Overlay on taskbar button:</strong></p>
<p><img src="All%20the%20Electron%20Docs!%20%20%20Electron_files/IC420441.png" alt="Overlay on taskbar button"></p>
<p>To set the overlay icon for a window, you can use the
<a href="https://electronjs.org/docs/api/browser-window#winsetoverlayiconoverlay-description-windows">BrowserWindow.setOverlayIcon</a> API:</p>
<pre><code class="hljs language-javascript" id="_bq4wxtpx"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow()
win.setOverlayIcon(<span class="hljs-string">'path/to/overlay.png'</span>, <span class="hljs-string">'Description for overlay'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_bq4wxtpx">Copy</button></pre>
<h2 id="flash-frame-windows"><a href="#flash-frame-windows">Flash Frame (Windows)</a><a class="header-link" href="#flash-frame-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>On Windows you can highlight the taskbar button to get the user's attention.
This is similar to bouncing the dock icon on macOS.
From the MSDN reference documentation:</p>
<blockquote>
<p>Typically, a window is flashed to inform the user that the window requires
attention but that it does not currently have the keyboard focus.</p>
</blockquote>
<p>To flash the BrowserWindow taskbar button, you can use the
<a href="https://electronjs.org/docs/api/browser-window#winflashframeflag">BrowserWindow.flashFrame</a> API:</p>
<pre><code class="hljs language-javascript" id="_z6x6gycm"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow()
win.once(<span class="hljs-string">'focus'</span>, () =&gt; win.flashFrame(<span class="hljs-literal">false</span>))
win.flashFrame(<span class="hljs-literal">true</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_z6x6gycm">Copy</button></pre>
<p>Don't forget to call the <code>flashFrame</code> method with <code>false</code> to turn off the flash. In
the above example, it is called when the window comes into focus, but you might
use a timeout or some other event to disable it.</p>
<h2 id="represented-file-of-window-macos"><a href="#represented-file-of-window-macos">Represented File of Window (macOS)</a><a class="header-link" href="#represented-file-of-window-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>On macOS a window can set its represented file, so the file's icon can show in
the title bar and when users Command-Click or Control-Click on the title a path
popup will show.</p>
<p>You can also set the edited state of a window so that the file icon can indicate
whether the document in this window has been modified.</p>
<p><strong>Represented file popup menu:</strong></p>
<img src="All%20the%20Electron%20Docs!%20%20%20Electron_files/670a949a-6f14-11e4-987a-9aaa04b23c1d.png" width="663" height="232">
<p>To set the represented file of window, you can use the
<a href="https://electronjs.org/docs/api/browser-window#winsetrepresentedfilenamefilename-macos">BrowserWindow.setRepresentedFilename</a> and
<a href="https://electronjs.org/docs/api/browser-window#winsetdocumenteditededited-macos">BrowserWindow.setDocumentEdited</a> APIs:</p>
<pre><code class="hljs language-javascript" id="_63kc7t9k"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow()
win.setRepresentedFilename(<span class="hljs-string">'/etc/passwd'</span>)
win.setDocumentEdited(<span class="hljs-literal">true</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_63kc7t9k">Copy</button></pre>
<h2 id="dragging-files-out-of-the-window"><a href="#dragging-files-out-of-the-window">Dragging files out of the window</a><a class="header-link" href="#dragging-files-out-of-the-window" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>For certain kinds of apps that manipulate on files, it is important to be able
to drag files from Electron to other apps. To implement this feature in your
app, you need to call <code>webContents.startDrag(item)</code> API on <code>ondragstart</code> event.</p>
<p>In web page:</p>
<pre><code class="hljs language-html" id="_iuussj1k"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"drag"</span>&gt;</span>item<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span><span class="javascript">
  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'drag'</span>).ondragstart = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {
    event.preventDefault()
    ipcRenderer.send(<span class="hljs-string">'ondragstart'</span>, <span class="hljs-string">'/path/to/item'</span>)
  }
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_iuussj1k">Copy</button></pre>
<p>In the main process:</p>
<pre><code class="hljs language-javascript" id="_gmaeu5d"><span class="hljs-keyword">const</span> {ipcMain} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
ipcMain.on(<span class="hljs-string">'ondragstart'</span>, (event, filePath) =&gt; {
  event.sender.startDrag({
    <span class="hljs-attr">file</span>: filePath,
    <span class="hljs-attr">icon</span>: <span class="hljs-string">'/path/to/icon.png'</span>
  })
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_gmaeu5d">Copy</button></pre>

  <hr>
  <h1 id="devtools-extension"><a href="#devtools-extension">DevTools Extension</a><a class="header-link" href="#devtools-extension" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>Electron supports the <a href="https://developer.chrome.com/extensions/devtools">Chrome DevTools Extension</a>, which can
be used to extend the ability of devtools for debugging popular web frameworks.</p>
<h2 id="how-to-load-a-devtools-extension"><a href="#how-to-load-a-devtools-extension">How to load a DevTools Extension</a><a class="header-link" href="#how-to-load-a-devtools-extension" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>This document outlines the process for manually loading an extension.
You may also try
<a href="https://github.com/GPMDP/electron-devtools-installer">electron-devtools-installer</a>,
a third-party tool that downloads extensions directly from the Chrome WebStore.</p>
<p>To load an extension in Electron, you need to download it in Chrome browser,
locate its filesystem path, and then load it by calling the
<code>BrowserWindow.addDevToolsExtension(extension)</code> API.</p>
<p>Using the <a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi">React Developer Tools</a> as example:</p>
<ol>
<li>Install it in Chrome browser.</li>
<li>Navigate to <code>chrome://extensions</code>, and find its extension ID, which is a hash
string like <code>fmkadmapgofadopljbjfkapdkoienihi</code>.</li>
<li>
<p>Find out filesystem location used by Chrome for storing extensions:</p>
<ul>
<li>on Windows it is <code>%LOCALAPPDATA%\Google\Chrome\User Data\Default\Extensions</code>;</li>
<li>
<p>on Linux it could be:</p>
<ul>
<li><code>~/.config/google-chrome/Default/Extensions/</code></li>
<li><code>~/.config/google-chrome-beta/Default/Extensions/</code></li>
<li><code>~/.config/google-chrome-canary/Default/Extensions/</code></li>
<li><code>~/.config/chromium/Default/Extensions/</code></li>
</ul>
</li>
<li>on macOS it is <code>~/Library/Application Support/Google/Chrome/Default/Extensions</code>.</li>
</ul>
</li>
<li>Pass the location of the extension to <code>BrowserWindow.addDevToolsExtension</code>
API, for the React Developer Tools, it is something like:
<code>~/Library/Application Support/Google/Chrome/Default/Extensions/fmkadmapgofadopljbjfkapdkoienihi/0.15.0_0</code></li>
</ol>
<p><strong>Note:</strong> The <code>BrowserWindow.addDevToolsExtension</code> API cannot be called before the
ready event of the app module is emitted.</p>
<p>The name of the extension is returned by <code>BrowserWindow.addDevToolsExtension</code>,
and you can pass the name of the extension to the <code>BrowserWindow.removeDevToolsExtension</code>
API to unload it.</p>
<h2 id="supported-devtools-extensions"><a href="#supported-devtools-extensions">Supported DevTools Extensions</a><a class="header-link" href="#supported-devtools-extensions" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Electron only supports a limited set of <code>chrome.*</code> APIs, so some extensions
using unsupported <code>chrome.*</code> APIs for chrome extension features may not work.
Following Devtools Extensions are tested and guaranteed to work in Electron:</p>
<ul>
<li><a href="https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi">Ember Inspector</a></li>
<li><a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi">React Developer Tools</a></li>
<li><a href="https://chrome.google.com/webstore/detail/backbone-debugger/bhljhndlimiafopmmhjlgfpnnchjjbhd">Backbone Debugger</a></li>
<li><a href="https://chrome.google.com/webstore/detail/jquery-debugger/dbhhnnnpaeobfddmlalhnehgclcmjimi">jQuery Debugger</a></li>
<li><a href="https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk">AngularJS Batarang</a></li>
<li><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd">Vue.js devtools</a></li>
<li><a href="https://cerebraljs.com/docs/introduction/debugger.html">Cerebral Debugger</a></li>
<li><a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd">Redux DevTools Extension</a></li>
<li><a href="https://chrome.google.com/webstore/detail/mobx-developer-tools/pfgnfdagidkfgccljigdamigbcnndkod">MobX Developer Tools</a></li>
</ul>
<h3 id="what-should-i-do-if-a-devtools-extension-is-not-working"><a href="#what-should-i-do-if-a-devtools-extension-is-not-working">What should I do if a DevTools Extension is not working?</a><a class="header-link" href="#what-should-i-do-if-a-devtools-extension-is-not-working" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>First please make sure the extension is still being maintained, some extensions
can not even work for recent versions of Chrome browser, and we are not able to
do anything for them.</p>
<p>Then file a bug at Electron's issues list, and describe which part of the
extension is not working as expected.</p>

  <hr>
  <h1 id="dialog"><a href="#dialog">dialog</a><a class="header-link" href="#dialog" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Display native system dialogs for opening and saving files, alerting, etc.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<p>An example of showing a dialog to select multiple files and directories:</p>
<pre><code class="hljs language-javascript" id="_kdih9hcf"><span class="hljs-keyword">const</span> {dialog} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-built_in">console</span>.log(dialog.showOpenDialog({<span class="hljs-attr">properties</span>: [<span class="hljs-string">'openFile'</span>, <span class="hljs-string">'openDirectory'</span>, <span class="hljs-string">'multiSelections'</span>]}))</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_kdih9hcf">Copy</button></pre>
<p>The Dialog is opened from Electron's main thread. If you want to use the dialog
object from a renderer process, remember to access it using the remote:</p>
<pre><code class="hljs language-javascript" id="_7efro13r"><span class="hljs-keyword">const</span> {dialog} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>).remote
<span class="hljs-built_in">console</span>.log(dialog)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_7efro13r">Copy</button></pre>
<h2 id="methods"><a href="#methods">Methods</a><a class="header-link" href="#methods" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>dialog</code> module has the following methods:</p>
<h3 id="dialogshowopendialogbrowserwindow-options-callback"><a href="#dialogshowopendialogbrowserwindow-options-callback"><code>dialog.showOpenDialog([browserWindow, ]options[, callback])</code></a><a class="header-link" href="#dialogshowopendialogbrowserwindow-options-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>browserWindow</code> BrowserWindow (optional)</li>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>title</code> String (optional)</li>
<li><code>defaultPath</code> String (optional)</li>
<li><code>buttonLabel</code> String (optional) - Custom label for the confirmation button, when
left empty the default label will be used.</li>
<li><code>filters</code> <a href="https://electronjs.org/docs/api/structures/file-filter">FileFilter[]</a> (optional)</li>
<li>
<p><code>properties</code> String<a href="https://electronjs.org/docs/api/optional"></a> - Contains which features the dialog should
use. The following values are supported:</p>
<ul>
<li><code>openFile</code> - Allow files to be selected.</li>
<li><code>openDirectory</code> - Allow directories to be selected.</li>
<li><code>multiSelections</code> - Allow multiple paths to be selected.</li>
<li><code>showHiddenFiles</code> - Show hidden files in dialog.</li>
<li><code>createDirectory</code> - Allow creating new directories from dialog. <em class="platform-label">macOS</em></li>
<li><code>promptToCreate</code> - Prompt for creation if the file path entered
in the dialog does not exist. This does not actually create the file at
the path but allows non-existent paths to be returned that should be
created by the application. <em class="platform-label">Windows</em></li>
<li><code>noResolveAliases</code> - Disable the automatic alias (symlink) path
resolution.  Selected aliases will now return the alias path instead of
their target path. <em class="platform-label">macOS</em></li>
<li><code>treatPackageAsDirectory</code> - Treat packages, such as <code>.app</code> folders,
as a directory instead of a file. <em class="platform-label">macOS</em></li>
</ul>
</li>
<li><code>message</code> String (optional) <em class="platform-label">macOS</em> - Message to display above input
boxes.</li>
</ul>
</li>
<li>
<p><code>callback</code> Function (optional)</p>
<ul>
<li><code>filePaths</code> String[] - An array of file paths chosen by the user</li>
</ul>
</li>
</ul>
<p>Returns <code>String[]</code>, an array of file paths chosen by the user,
if the callback is provided it returns <code>undefined</code>.</p>
<p>The <code>browserWindow</code> argument allows the dialog to attach itself to a parent window, making it modal.</p>
<p>The <code>filters</code> specifies an array of file types that can be displayed or
selected when you want to limit the user to a specific type. For example:</p>
<pre><code class="hljs language-javascript" id="_kigw1fss">{
  <span class="hljs-attr">filters</span>: [
    {<span class="hljs-attr">name</span>: <span class="hljs-string">'Images'</span>, <span class="hljs-attr">extensions</span>: [<span class="hljs-string">'jpg'</span>, <span class="hljs-string">'png'</span>, <span class="hljs-string">'gif'</span>]},
    {<span class="hljs-attr">name</span>: <span class="hljs-string">'Movies'</span>, <span class="hljs-attr">extensions</span>: [<span class="hljs-string">'mkv'</span>, <span class="hljs-string">'avi'</span>, <span class="hljs-string">'mp4'</span>]},
    {<span class="hljs-attr">name</span>: <span class="hljs-string">'Custom File Type'</span>, <span class="hljs-attr">extensions</span>: [<span class="hljs-string">'as'</span>]},
    {<span class="hljs-attr">name</span>: <span class="hljs-string">'All Files'</span>, <span class="hljs-attr">extensions</span>: [<span class="hljs-string">'*'</span>]}
  ]
}</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_kigw1fss">Copy</button></pre>
<p>The <code>extensions</code> array should contain extensions without wildcards or dots (e.g.
<code>'png'</code> is good but <code>'.png'</code> and <code>'*.png'</code> are bad). To show all files, use the
<code>'*'</code> wildcard (no other wildcard is supported).</p>
<p>If a <code>callback</code> is passed, the API call will be asynchronous and the result
will be passed via <code>callback(filenames)</code></p>
<p><strong>Note:</strong> On Windows and Linux an open dialog can not be both a file selector
and a directory selector, so if you set <code>properties</code> to
<code>['openFile', 'openDirectory']</code> on these platforms, a directory selector will be
shown.</p>
<h3 id="dialogshowsavedialogbrowserwindow-options-callback"><a href="#dialogshowsavedialogbrowserwindow-options-callback"><code>dialog.showSaveDialog([browserWindow, ]options[, callback])</code></a><a class="header-link" href="#dialogshowsavedialogbrowserwindow-options-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>browserWindow</code> BrowserWindow (optional)</li>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>title</code> String (optional)</li>
<li><code>defaultPath</code> String (optional) - Absolute directory path, absolute file
path, or file name to use by default.</li>
<li><code>buttonLabel</code> String (optional) - Custom label for the confirmation button, when
left empty the default label will be used.</li>
<li><code>filters</code> <a href="https://electronjs.org/docs/api/structures/file-filter">FileFilter[]</a> (optional)</li>
<li><code>message</code> String (optional) <em class="platform-label">macOS</em> - Message to display above text fields.</li>
<li><code>nameFieldLabel</code> String (optional) <em class="platform-label">macOS</em> - Custom label for the text
displayed in front of the filename text field.</li>
<li><code>showsTagField</code> Boolean (optional) <em class="platform-label">macOS</em> - Show the tags input box,
defaults to <code>true</code>.</li>
</ul>
</li>
<li>
<p><code>callback</code> Function (optional)</p>
<ul>
<li><code>filename</code> String</li>
</ul>
</li>
</ul>
<p>Returns <code>String</code>, the path of the file chosen by the user,
if a callback is provided it returns <code>undefined</code>.</p>
<p>The <code>browserWindow</code> argument allows the dialog to attach itself to a parent window, making it modal.</p>
<p>The <code>filters</code> specifies an array of file types that can be displayed, see
<code>dialog.showOpenDialog</code> for an example.</p>
<p>If a <code>callback</code> is passed, the API call will be asynchronous and the result
will be passed via <code>callback(filename)</code></p>
<h3 id="dialogshowmessageboxbrowserwindow-options-callback"><a href="#dialogshowmessageboxbrowserwindow-options-callback"><code>dialog.showMessageBox([browserWindow, ]options[, callback])</code></a><a class="header-link" href="#dialogshowmessageboxbrowserwindow-options-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>browserWindow</code> BrowserWindow (optional)</li>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>type</code> String (optional) - Can be <code>"none"</code>, <code>"info"</code>, <code>"error"</code>, <code>"question"</code> or
<code>"warning"</code>. On Windows, <code>"question"</code> displays the same icon as <code>"info"</code>, unless
you set an icon using the <code>"icon"</code> option. On macOS, both <code>"warning"</code> and
<code>"error"</code> display the same warning icon.</li>
<li><code>buttons</code> String<a href="https://electronjs.org/docs/api/optional"></a> - Array of texts for buttons. On Windows, an empty array
will result in one button labeled "OK".</li>
<li><code>defaultId</code> Integer (optional) - Index of the button in the buttons array which will
be selected by default when the message box opens.</li>
<li><code>title</code> String (optional) - Title of the message box, some platforms will not show it.</li>
<li><code>message</code> String - Content of the message box.</li>
<li><code>detail</code> String (optional) - Extra information of the message.</li>
<li><code>checkboxLabel</code> String (optional) - If provided, the message box will
include a checkbox with the given label. The checkbox state can be
inspected only when using <code>callback</code>.</li>
<li><code>checkboxChecked</code> Boolean (optional) - Initial checked state of the
checkbox. <code>false</code> by default.</li>
<li><code>icon</code> <a href="https://electronjs.org/docs/api/native-image">NativeImage</a> (optional)</li>
<li><code>cancelId</code> Integer (optional) - The index of the button to be used to cancel the dialog, via
the <code>Esc</code> key. By default this is assigned to the first button with "cancel" or "no" as the
label. If no such labeled buttons exist and this option is not set, <code>0</code> will be used as the
return value or callback response. This option is ignored on Windows.</li>
<li><code>noLink</code> Boolean (optional) - On Windows Electron will try to figure out which one of
the <code>buttons</code> are common buttons (like "Cancel" or "Yes"), and show the
others as command links in the dialog. This can make the dialog appear in
the style of modern Windows apps. If you don't like this behavior, you can
set <code>noLink</code> to <code>true</code>.</li>
<li><code>normalizeAccessKeys</code> Boolean (optional) - Normalize the keyboard access keys
across platforms. Default is <code>false</code>. Enabling this assumes <code>&amp;</code> is used in
the button labels for the placement of the keyboard shortcut access key
and labels will be converted so they work correctly on each platform, <code>&amp;</code>
characters are removed on macOS, converted to <code>_</code> on Linux, and left
untouched on Windows. For example, a button label of <code>Vie&amp;w</code> will be
converted to <code>Vie_w</code> on Linux and <code>View</code> on macOS and can be selected
via <code>Alt-W</code> on Windows and Linux.</li>
</ul>
</li>
<li>
<p><code>callback</code> Function (optional)</p>
<ul>
<li><code>response</code> Number - The index of the button that was clicked</li>
<li><code>checkboxChecked</code> Boolean - The checked state of the checkbox if
<code>checkboxLabel</code> was set. Otherwise <code>false</code>.</li>
</ul>
</li>
</ul>
<p>Returns <code>Integer</code>, the index of the clicked button, if a callback is provided
it returns undefined.</p>
<p>Shows a message box, it will block the process until the message box is closed.
It returns the index of the clicked button.</p>
<p>The <code>browserWindow</code> argument allows the dialog to attach itself to a parent window, making it modal.</p>
<p>If a <code>callback</code> is passed, the dialog will not block the process. The API call
will be asynchronous and the result will be passed via <code>callback(response)</code>.</p>
<h3 id="dialogshowerrorboxtitle-content"><a href="#dialogshowerrorboxtitle-content"><code>dialog.showErrorBox(title, content)</code></a><a class="header-link" href="#dialogshowerrorboxtitle-content" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>title</code> String - The title to display in the error box</li>
<li><code>content</code> String - The text content to display in the error box</li>
</ul>
<p>Displays a modal dialog that shows an error message.</p>
<p>This API can be called safely before the <code>ready</code> event the <code>app</code> module emits,
it is usually used to report errors in early stage of startup.  If called
before the app <code>ready</code>event on Linux, the message will be emitted to stderr,
and no GUI dialog will appear.</p>
<h3 id="dialogshowcertificatetrustdialogbrowserwindow-options-callback-macos-windows"><a href="#dialogshowcertificatetrustdialogbrowserwindow-options-callback-macos-windows"><code>dialog.showCertificateTrustDialog([browserWindow, ]options, callback)</code> <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#dialogshowcertificatetrustdialogbrowserwindow-options-callback-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>browserWindow</code> BrowserWindow (optional)</li>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>certificate</code> <a href="https://electronjs.org/docs/api/structures/certificate">Certificate</a> - The certificate to trust/import.</li>
<li><code>message</code> String - The message to display to the user.</li>
</ul>
</li>
<li><code>callback</code> Function</li>
</ul>
<p>On macOS, this displays a modal dialog that shows a message and certificate
information, and gives the user the option of trusting/importing the
certificate. If you provide a <code>browserWindow</code> argument the dialog will be
attached to the parent window, making it modal.</p>
<p>On Windows the options are more limited, due to the Win32 APIs used:</p>
<ul>
<li>The <code>message</code> argument is not used, as the OS provides its own confirmation
dialog.</li>
<li>The <code>browserWindow</code> argument is ignored since it is not possible to make
this confirmation dialog modal.</li>
</ul>
<h2 id="sheets"><a href="#sheets">Sheets</a><a class="header-link" href="#sheets" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>On macOS, dialogs are presented as sheets attached to a window if you provide
a <code>BrowserWindow</code> reference in the <code>browserWindow</code> parameter, or modals if no
window is provided.</p>
<p>You can call <code>BrowserWindow.getCurrentWindow().setSheetOffset(offset)</code> to change
the offset from the window frame where sheets are attached.</p>

  <hr>
  <h1 id="display-object"><a href="#display-object">Display Object</a><a class="header-link" href="#display-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>id</code> Number - Unique identifier associated with the display.</li>
<li><code>rotation</code> Number - Can be 0, 90, 180, 270, represents screen rotation in
clock-wise degrees.</li>
<li><code>scaleFactor</code> Number - Output device's pixel scale factor.</li>
<li><code>touchSupport</code> String - Can be <code>available</code>, <code>unavailable</code>, <code>unknown</code>.</li>
<li><code>bounds</code> <a href="https://electronjs.org/docs/api/structures/rectangle">Rectangle</a></li>
<li><code>size</code> <a href="https://electronjs.org/docs/api/structures/size">Size</a></li>
<li><code>workArea</code> <a href="https://electronjs.org/docs/api/structures/rectangle">Rectangle</a></li>
<li><code>workAreaSize</code> <a href="https://electronjs.org/docs/api/structures/size">Size</a></li>
</ul>
<p>The <code>Display</code> object represents a physical display connected to the system. A
fake <code>Display</code> may exist on a headless system, or a <code>Display</code> may correspond to
a remote, virtual display.</p>

  <hr>
  <h2 id="class-downloaditem"><a href="#class-downloaditem">Class: DownloadItem</a><a class="header-link" href="#class-downloaditem" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>Control file downloads from remote sources.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<p><code>DownloadItem</code> is an <code>EventEmitter</code> that represents a download item in Electron.
It is used in <code>will-download</code> event of <code>Session</code> class, and allows users to
control the download item.</p>
<pre><code class="hljs language-javascript" id="_61bjyuof"><span class="hljs-comment">// In the main process.</span>
<span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow()
win.webContents.session.on(<span class="hljs-string">'will-download'</span>, (event, item, webContents) =&gt; {
  <span class="hljs-comment">// Set the save path, making Electron not to prompt a save dialog.</span>
  item.setSavePath(<span class="hljs-string">'/tmp/save.pdf'</span>)

  item.on(<span class="hljs-string">'updated'</span>, (event, state) =&gt; {
    <span class="hljs-keyword">if</span> (state === <span class="hljs-string">'interrupted'</span>) {
      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Download is interrupted but can be resumed'</span>)
    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (state === <span class="hljs-string">'progressing'</span>) {
      <span class="hljs-keyword">if</span> (item.isPaused()) {
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Download is paused'</span>)
      } <span class="hljs-keyword">else</span> {
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Received bytes: <span class="hljs-subst">${item.getReceivedBytes()}</span>`</span>)
      }
    }
  })
  item.once(<span class="hljs-string">'done'</span>, (event, state) =&gt; {
    <span class="hljs-keyword">if</span> (state === <span class="hljs-string">'completed'</span>) {
      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Download successfully'</span>)
    } <span class="hljs-keyword">else</span> {
      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Download failed: <span class="hljs-subst">${state}</span>`</span>)
    }
  })
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_61bjyuof">Copy</button></pre>
<h3 id="instance-events"><a href="#instance-events">Instance Events</a><a class="header-link" href="#instance-events" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<h4 id="event-updated"><a href="#event-updated">Event: 'updated'</a><a class="header-link" href="#event-updated" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>state</code> String</li>
</ul>
<p>Emitted when the download has been updated and is not done.</p>
<p>The <code>state</code> can be one of following:</p>
<ul>
<li><code>progressing</code> - The download is in-progress.</li>
<li><code>interrupted</code> - The download has interrupted and can be resumed.</li>
</ul>
<h4 id="event-done"><a href="#event-done">Event: 'done'</a><a class="header-link" href="#event-done" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>state</code> String</li>
</ul>
<p>Emitted when the download is in a terminal state. This includes a completed
download, a cancelled download (via <code>downloadItem.cancel()</code>), and interrupted
download that can't be resumed.</p>
<p>The <code>state</code> can be one of following:</p>
<ul>
<li><code>completed</code> - The download completed successfully.</li>
<li><code>cancelled</code> - The download has been cancelled.</li>
<li><code>interrupted</code> - The download has interrupted and can not resume.</li>
</ul>
<h3 id="instance-methods"><a href="#instance-methods">Instance Methods</a><a class="header-link" href="#instance-methods" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The <code>downloadItem</code> object has the following methods:</p>
<h4 id="downloaditemsetsavepathpath"><a href="#downloaditemsetsavepathpath"><code>downloadItem.setSavePath(path)</code></a><a class="header-link" href="#downloaditemsetsavepathpath" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>path</code> String - Set the save file path of the download item.</li>
</ul>
<p>The API is only available in session's <code>will-download</code> callback function.
If user doesn't set the save path via the API, Electron will use the original
routine to determine the save path(Usually prompts a save dialog).</p>
<h4 id="downloaditemgetsavepath"><a href="#downloaditemgetsavepath"><code>downloadItem.getSavePath()</code></a><a class="header-link" href="#downloaditemgetsavepath" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>String</code> - The save path of the download item. This will be either the path
set via <code>downloadItem.setSavePath(path)</code> or the path selected from the shown
save dialog.</p>
<h4 id="downloaditempause"><a href="#downloaditempause"><code>downloadItem.pause()</code></a><a class="header-link" href="#downloaditempause" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Pauses the download.</p>
<h4 id="downloaditemispaused"><a href="#downloaditemispaused"><code>downloadItem.isPaused()</code></a><a class="header-link" href="#downloaditemispaused" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the download is paused.</p>
<h4 id="downloaditemresume"><a href="#downloaditemresume"><code>downloadItem.resume()</code></a><a class="header-link" href="#downloaditemresume" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Resumes the download that has been paused.</p>
<p><strong>Note:</strong> To enable resumable downloads the server you are downloading from must support range requests and provide both <code>Last-Modified</code> and <code>ETag</code> header values. Otherwise <code>resume()</code> will dismiss previously received bytes and restart the download from the beginning.</p>
<h4 id="downloaditemcanresume"><a href="#downloaditemcanresume"><code>downloadItem.canResume()</code></a><a class="header-link" href="#downloaditemcanresume" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the download can resume.</p>
<h4 id="downloaditemcancel"><a href="#downloaditemcancel"><code>downloadItem.cancel()</code></a><a class="header-link" href="#downloaditemcancel" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Cancels the download operation.</p>
<h4 id="downloaditemgeturl"><a href="#downloaditemgeturl"><code>downloadItem.getURL()</code></a><a class="header-link" href="#downloaditemgeturl" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>String</code> - The origin url where the item is downloaded from.</p>
<h4 id="downloaditemgetmimetype"><a href="#downloaditemgetmimetype"><code>downloadItem.getMimeType()</code></a><a class="header-link" href="#downloaditemgetmimetype" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>String</code> - The files mime type.</p>
<h4 id="downloaditemhasusergesture"><a href="#downloaditemhasusergesture"><code>downloadItem.hasUserGesture()</code></a><a class="header-link" href="#downloaditemhasusergesture" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the download has user gesture.</p>
<h4 id="downloaditemgetfilename"><a href="#downloaditemgetfilename"><code>downloadItem.getFilename()</code></a><a class="header-link" href="#downloaditemgetfilename" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>String</code> - The file name of the download item.</p>
<p><strong>Note:</strong> The file name is not always the same as the actual one saved in local
disk. If user changes the file name in a prompted download saving dialog, the
actual name of saved file will be different.</p>
<h4 id="downloaditemgettotalbytes"><a href="#downloaditemgettotalbytes"><code>downloadItem.getTotalBytes()</code></a><a class="header-link" href="#downloaditemgettotalbytes" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Integer</code> - The total size in bytes of the download item.</p>
<p>If the size is unknown, it returns 0.</p>
<h4 id="downloaditemgetreceivedbytes"><a href="#downloaditemgetreceivedbytes"><code>downloadItem.getReceivedBytes()</code></a><a class="header-link" href="#downloaditemgetreceivedbytes" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Integer</code> - The received bytes of the download item.</p>
<h4 id="downloaditemgetcontentdisposition"><a href="#downloaditemgetcontentdisposition"><code>downloadItem.getContentDisposition()</code></a><a class="header-link" href="#downloaditemgetcontentdisposition" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>String</code> - The Content-Disposition field from the response
header.</p>
<h4 id="downloaditemgetstate"><a href="#downloaditemgetstate"><code>downloadItem.getState()</code></a><a class="header-link" href="#downloaditemgetstate" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>String</code> - The current state.  Can be <code>progressing</code>, <code>completed</code>, <code>cancelled</code> or <code>interrupted</code>.</p>
<p><strong>Note:</strong> The following methods are useful specifically to resume a
<code>cancelled</code> item when session is restarted.</p>
<h4 id="downloaditemgeturlchain"><a href="#downloaditemgeturlchain"><code>downloadItem.getURLChain()</code></a><a class="header-link" href="#downloaditemgeturlchain" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>String[]</code> - The complete url chain of the item including any redirects.</p>
<h4 id="downloaditemgetlastmodifiedtime"><a href="#downloaditemgetlastmodifiedtime"><code>downloadItem.getLastModifiedTime()</code></a><a class="header-link" href="#downloaditemgetlastmodifiedtime" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>String</code> - Last-Modified header value.</p>
<h4 id="downloaditemgetetag"><a href="#downloaditemgetetag"><code>downloadItem.getETag()</code></a><a class="header-link" href="#downloaditemgetetag" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>String</code> - ETag header value.</p>
<h4 id="downloaditemgetstarttime"><a href="#downloaditemgetstarttime"><code>downloadItem.getStartTime()</code></a><a class="header-link" href="#downloaditemgetstarttime" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Double</code> - Number of seconds since the UNIX epoch when the download was
started.</p>

  <hr>
  <h1 id="electron-versioning"><a href="#electron-versioning">Electron Versioning</a><a class="header-link" href="#electron-versioning" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>A detailed look at our versioning policy and implementation.</p>
</blockquote>
<p>As of version 2.0.0, Electron follows <a href="#semver">semver</a>. The following command will install the most recent stable build of Electron:</p>
<pre><code class="hljs language-sh" id="_kuawt6eo">npm install --save-dev electron</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_kuawt6eo">Copy</button></pre>
<p>To update an existing project to use the latest stable version:</p>
<pre><code class="hljs language-sh" id="_7xhj422">npm install --save-dev electron@latest</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_7xhj422">Copy</button></pre>
<h2 id="version-1x"><a href="#version-1x">Version 1.x</a><a class="header-link" href="#version-1x" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Electron versions <em>&lt; 2.0</em> did not conform to the <a href="http://semver.org/">semver</a>
 spec. Major versions corresponded to end-user API changes. Minor 
versions corresponded to Chromium major releases. Patch versions 
corresponded to new features and bug fixes. While convenient for 
developers merging features, it creates problems for developers of 
client-facing applications. The QA testing cycles of major apps like 
Slack, Stride, Teams, Skype, VS Code, Atom, and Desktop can be lengthy 
and stability is a highly desired outcome. There is a high risk in 
adopting new features while trying to absorb bug fixes.</p>
<p>Here is an example of the 1.x strategy:</p>
<p><img src="All%20the%20Electron%20Docs!%20%20%20Electron_files/versioning-sketch-0.png"></p>
<p>An app developed with <code>1.8.1</code> cannot take the <code>1.8.3</code> bug fix without either absorbing the <code>1.8.2</code> feature, or by backporting the fix and maintaining a new release line.</p>
<h2 id="version-20-and-beyond"><a href="#version-20-and-beyond">Version 2.0 and Beyond</a><a class="header-link" href="#version-20-and-beyond" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>There are several major changes from our 1.x strategy outlined below.
 Each change is intended to satisfy the needs and priorities of 
developers/maintainers and app developers.</p>
<ol>
<li>Strict use of semver</li>
<li>Introduction of semver-compliant <code>-beta</code> tags</li>
<li>Introduction of <a href="https://conventionalcommits.org/">conventional commit messages</a></li>
<li>Clearly defined stabilization branches</li>
<li>The <code>master</code> branch is versionless; only stability branches contain version information</li>
</ol>
<p>We will cover in detail how git branching works, how npm tagging 
works, what developers should expect to see, and how one can backport 
changes.</p>
<h1 id="semver"><a href="#semver">semver</a><a class="header-link" href="#semver" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>From 2.0 onward, Electron will follow semver.</p>
<p>Below is a table explicitly mapping types of changes to their corresponding category of semver (e.g. Major, Minor, Patch).</p>
<ul>
<li><strong>Major Version Increments</strong>
<em> Chromium version updates
</em> node.js major version updates
* Electron breaking API changes</li>
<li><strong>Minor Version Increments</strong>
<em> node.js minor version updates
</em> Electron non-breaking API changes</li>
<li><strong>Patch Version Increments</strong>
<em> node.js patch version updates
</em> fix-related chromium patches
* electron bug fixes</li>
</ul>
<p>Note that most chromium updates will be considered breaking. Fixes 
that can be backported will likely be cherry-picked as patches.</p>
<h1 id="stabilization-branches"><a href="#stabilization-branches">Stabilization Branches</a><a class="header-link" href="#stabilization-branches" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>Stabilization branches are branches that run parallel to master, 
taking in only cherry-picked commits that are related to security or 
stability. These branches are never merged back to master.</p>
<p><img src="All%20the%20Electron%20Docs!%20%20%20Electron_files/versioning-sketch-1.png"></p>
<p>Stabilization branches are always either <strong>major</strong> or <strong>minor</strong> version lines, and named against the following template <code>$MAJOR-$MINOR-x</code> e.g. <code>2-0-x</code>.</p>
<p>We allow for multiple stabilization branches to exist simultaneously,
 and intend to support at least two in parallel at all times, 
backporting security fixes as necessary.
<img src="All%20the%20Electron%20Docs!%20%20%20Electron_files/versioning-sketch-2.png"></p>
<p>Older lines will not be supported by GitHub, but other groups can 
take ownership and backport stability and security fixes on their own. 
We discourage this, but recognize that it makes life easier for many app
 developers.</p>
<h1 id="beta-releases-and-bug-fixes"><a href="#beta-releases-and-bug-fixes">Beta Releases and Bug Fixes</a><a class="header-link" href="#beta-releases-and-bug-fixes" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>Developers want to know which releases are <em>safe</em> to use. Even
 seemingly innocent features can introduce regressions in complex 
applications. At the same time, locking to a fixed version is dangerous 
because you’re ignoring security patches and bug fixes that may have 
come out since your version. Our goal is to allow the following standard
 semver ranges in <code>package.json</code> :</p>
<ul>
<li>Use <code>~2.0.0</code> to admit only stability or security related fixes to your <code>2.0.0</code> release.</li>
<li>Use <code>^2.0.0</code> to admit non-breaking <em>reasonably stable</em> feature work as well as security and bug fixes.</li>
</ul>
<p>What’s important about the second point is that apps using <code>^</code> should still be able to expect a reasonable level of stability. To accomplish this, semver allows for a <em>pre-release identifier</em> to indicate a particular version is not yet <em>safe</em> or <em>stable</em>.</p>
<p>Whatever you choose, you will periodically have to bump the version in your <code>package.json</code> as breaking changes are a fact of Chromium life.</p>
<p>The process is as follows:</p>
<ol>
<li>All new major and minor releases lines begin with a <code>-beta.N</code> tag for <code>N &gt;= 1</code>. At that point, the feature set is <strong>locked</strong>. That release line admits no further features, and focuses only on security and stability.
e.g. <code>2.0.0-beta.1</code>.</li>
<li>Bug fixes, regression fixes, and security patches can be admitted. Upon doing so, a new beta is released incrementing <code>N</code>.
e.g. <code>2.0.0-beta.2</code></li>
<li>If a particular beta release is <em>generally regarded</em> as stable, it will be re-released as a stable build, changing only the version information.
e.g. <code>2.0.0</code>.</li>
<li>If future bug fixes or security patches need to be made once a release is stable, they are applied and the <em>patch</em> version is incremented accordingly
e.g. <code>2.0.1</code>.</li>
</ol>
<p>For each major and minor bump, you should expect too see something like the following:</p>
<pre><code class="hljs language-text" id="_yi24vmit">2<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0-beta</span><span class="hljs-selector-class">.1</span>
2<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0-beta</span><span class="hljs-selector-class">.2</span>
2<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0-beta</span><span class="hljs-selector-class">.3</span>
2<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span>
2<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.1</span>
2<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.2</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_yi24vmit">Copy</button></pre>
<p>An example lifecycle in pictures:</p>
<ul>
<li>A new release branch is created that includes the latest set of features. It is published as <code>2.0.0-beta.1</code>.
<img src="All%20the%20Electron%20Docs!%20%20%20Electron_files/versioning-sketch-3.png"></li>
<li>A bug fix comes into master that can be pack-ported to the release branch. The patch is applied, and a new beta is published as <code>2.0.0-beta.2</code>.
<img src="All%20the%20Electron%20Docs!%20%20%20Electron_files/versioning-sketch-4.png"></li>
<li>The beta is considered <em>generally stable</em> and it is published again as a non-beta under <code>2.0.0</code>.
<img src="All%20the%20Electron%20Docs!%20%20%20Electron_files/versioning-sketch-5.png"></li>
<li>Later, a zero-day exploit is revealed and a fix is applied to master. We pack-port the fix to the <code>2-0-x</code> line and release <code>2.0.1</code>.
<img src="All%20the%20Electron%20Docs!%20%20%20Electron_files/versioning-sketch-6.png"></li>
</ul>
<p>A few examples of how various semver ranges will pick up new releases:</p>
<p><img src="All%20the%20Electron%20Docs!%20%20%20Electron_files/versioning-sketch-7.png"></p>
<h1 id="missing-features-alphas-and-nightly"><a href="#missing-features-alphas-and-nightly">Missing Features: Alphas, and Nightly</a><a class="header-link" href="#missing-features-alphas-and-nightly" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>Our strategy has a few tradeoffs, which for now we feel are 
appropriate. Most importantly that new features in master may take a 
while before reaching a stable release line. If you want to try a new 
feature immediately, you will have to build Electron yourself.</p>
<p>As a future consideration, we may introduce one or both of the following:</p>
<ul>
<li>nightly builds off of master; these would allow folks to test new features quickly and give feedback</li>
<li>alpha releases that have looser stability constraints to betas; for 
example it would be allowable to admit new features while a stability 
channel is in <em>alpha</em></li>
</ul>
<h1 id="feature-flags"><a href="#feature-flags">Feature Flags</a><a class="header-link" href="#feature-flags" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>Feature flags are a common practice in Chromium, and are 
well-established in the web-development ecosystem. In the context of 
Electron, a feature flag or <strong>soft branch</strong> must have the following properties:</p>
<ul>
<li>is is enabled/disabled either at runtime, or build-time; we do not support the concept of a request-scoped feature flag</li>
<li>it completely segments new and old code paths; refactoring old code to support a new feature <em>violates</em> the feature-flag contract</li>
<li>feature flags are eventually removed after the soft-branch is merged</li>
</ul>
<p>We reconcile flagged code with our versioning strategy as follows:</p>
<ol>
<li>we do not consider iterating on feature-flagged code in a stability 
branch; even judicious use of feature flags is not without risk</li>
<li>you may break API contracts in feature-flagged code without bumping the major version. Flagged code does not adhere to semver</li>
</ol>
<h1 id="semantic-commits"><a href="#semantic-commits">Semantic Commits</a><a class="header-link" href="#semantic-commits" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>We seek to increase clarity at all levels of the update and releases process. Starting with <code>2.0.0</code> we will require pull requests adhere to the <a href="https://conventionalcommits.org/">Conventional Commits</a> spec, which can be summarized as follows:</p>
<ul>
<li>
<p>Commits that would result in a semver <strong>major</strong> bump must start with <code>BREAKING CHANGE:</code>.</p>
</li>
<li>
<p>Commits that would result in a semver <strong>minor</strong> bump must start with <code>feat:</code>.</p>
</li>
<li>
<p>Commits that would result in a semver <strong>patch</strong> bump must start with <code>fix:</code>.</p>
</li>
<li>
<p>We allow squashing of commits, provided that the squashed message adheres the the above message format.</p>
</li>
<li>
<p>It is acceptable for some commits in a pull request to not include a 
semantic prefix, as long as a later commit in the same pull request 
contains a meaningful encompassing semantic message.</p>
</li>
</ul>
<h1 id="versionless-master"><a href="#versionless-master">Versionless <code>master</code></a><a class="header-link" href="#versionless-master" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li>The <code>master</code> branch will always contain <code>0.0.0-dev</code> in its <code>package.json</code></li>
<li>Release branches are never merged back to master</li>
<li>Release branches <em>do</em> contain the correct version in their <code>package.json</code></li>
</ul>

  <hr>
  <h1 id="environment-variables"><a href="#environment-variables">Environment Variables</a><a class="header-link" href="#environment-variables" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Control application configuration and behavior without changing code.</p>
</blockquote>
<p>Certain Electron behaviors are controlled by environment variables because they
are initialized earlier than the command line flags and the app's code.</p>
<p>POSIX shell example:</p>
<pre><code class="hljs language-bash" id="_b4o9cr8tr">$ <span class="hljs-built_in">export</span> ELECTRON_ENABLE_LOGGING=<span class="hljs-literal">true</span>
$ electron</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_b4o9cr8tr">Copy</button></pre>
<p>Windows console example:</p>
<pre><code class="hljs language-powershell" id="_3dup1cz1">&gt; set ELECTRON_ENABLE_LOGGING=true
&gt; electron</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_3dup1cz1">Copy</button></pre>
<h2 id="production-variables"><a href="#production-variables">Production Variables</a><a class="header-link" href="#production-variables" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The following environment variables are intended primarily for use at runtime
in packaged Electron applications.</p>
<h3 id="google_api_key"><a href="#google_api_key"><code>GOOGLE_API_KEY</code></a><a class="header-link" href="#google_api_key" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Electron includes a hardcoded API key for making requests to Google's geocoding
webservice. Because this API key is included in every version of Electron, it
often exceeds its usage quota. To work around this, you can supply your own
Google API key in the environment. Place the following code in your main process
file, before opening any browser windows that will make geocoding requests:</p>
<pre><code class="hljs language-javascript" id="_y31h0b9">process.env.GOOGLE_API_KEY = <span class="hljs-string">'YOUR_KEY_HERE'</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_y31h0b9">Copy</button></pre>
<p>For instructions on how to acquire a Google API key, visit <a href="https://www.chromium.org/developers/how-tos/api-keys">this page</a>.</p>
<p>By default, a newly generated Google API key may not be allowed to make
geocoding requests. To enable geocoding requests, visit <a href="https://console.developers.google.com/apis/api/geolocation/overview">this page</a>.</p>
<h3 id="electron_no_asar"><a href="#electron_no_asar"><code>ELECTRON_NO_ASAR</code></a><a class="header-link" href="#electron_no_asar" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Disables ASAR support. This variable is only supported in forked child processes
and spawned child processes that set <code>ELECTRON_RUN_AS_NODE</code>.</p>
<h3 id="electron_run_as_node"><a href="#electron_run_as_node"><code>ELECTRON_RUN_AS_NODE</code></a><a class="header-link" href="#electron_run_as_node" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Starts the process as a normal Node.js process.</p>
<h3 id="electron_no_attach_console-windows"><a href="#electron_no_attach_console-windows"><code>ELECTRON_NO_ATTACH_CONSOLE</code> <em class="platform-label">Windows</em></a><a class="header-link" href="#electron_no_attach_console-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Don't attach to the current console session.</p>
<h3 id="electron_force_window_menu_bar-linux"><a href="#electron_force_window_menu_bar-linux"><code>ELECTRON_FORCE_WINDOW_MENU_BAR</code> <em class="platform-label">Linux</em></a><a class="header-link" href="#electron_force_window_menu_bar-linux" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Don't use the global menu bar on Linux.</p>
<h2 id="development-variables"><a href="#development-variables">Development Variables</a><a class="header-link" href="#development-variables" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The following environment variables are intended primarily for development and
debugging purposes.</p>
<h3 id="electron_enable_logging"><a href="#electron_enable_logging"><code>ELECTRON_ENABLE_LOGGING</code></a><a class="header-link" href="#electron_enable_logging" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Prints Chrome's internal logging to the console.</p>
<h3 id="electron_log_asar_reads"><a href="#electron_log_asar_reads"><code>ELECTRON_LOG_ASAR_READS</code></a><a class="header-link" href="#electron_log_asar_reads" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>When Electron reads from an ASAR file, log the read offset and file path to
the system <code>tmpdir</code>. The resulting file can be provided to the ASAR module
to optimize file ordering.</p>
<h3 id="electron_enable_stack_dumping"><a href="#electron_enable_stack_dumping"><code>ELECTRON_ENABLE_STACK_DUMPING</code></a><a class="header-link" href="#electron_enable_stack_dumping" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Prints the stack trace to the console when Electron crashes.</p>
<p>This environment variable will not work if the <code>crashReporter</code> is started.</p>
<h3 id="electron_default_error_mode-windows"><a href="#electron_default_error_mode-windows"><code>ELECTRON_DEFAULT_ERROR_MODE</code> <em class="platform-label">Windows</em></a><a class="header-link" href="#electron_default_error_mode-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Shows the Windows's crash dialog when Electron crashes.</p>
<p>This environment variable will not work if the <code>crashReporter</code> is started.</p>

  <hr>
  <h1 id="electron-faq"><a href="#electron-faq">Electron FAQ</a><a class="header-link" href="#electron-faq" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<h2 id="why-am-i-having-trouble-installing-electron"><a href="#why-am-i-having-trouble-installing-electron">Why am I having trouble installing Electron?</a><a class="header-link" href="#why-am-i-having-trouble-installing-electron" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>When running <code>npm install electron</code>, some users occasionally encounter
installation errors.</p>
<p>In almost all cases, these errors are the result of network problems and not
actual issues with the <code>electron</code> npm package. Errors like <code>ELIFECYCLE</code>,
<code>EAI_AGAIN</code>, <code>ECONNRESET</code>, and <code>ETIMEDOUT</code> are all indications of such
network problems. The best resolution is to try switching networks, or
just wait a bit and try installing again.</p>
<p>You can also attempt to download Electron directly from
<a href="https://github.com/electron/electron/releases">electron/electron/releases</a>
if installing via <code>npm</code> is failing.</p>
<h2 id="when-will-electron-upgrade-to-latest-chrome"><a href="#when-will-electron-upgrade-to-latest-chrome">When will Electron upgrade to latest Chrome?</a><a class="header-link" href="#when-will-electron-upgrade-to-latest-chrome" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The Chrome version of Electron is usually bumped within one or two weeks after
a new stable Chrome version gets released. This estimate is not guaranteed and
depends on the amount of work involved with upgrading.</p>
<p>Only the stable channel of Chrome is used. If an important fix is in beta or dev
channel, we will back-port it.</p>
<p>For more information, please see the <a href="https://electronjs.org/docs/tutorial/security">security introduction</a>.</p>
<h2 id="when-will-electron-upgrade-to-latest-nodejs"><a href="#when-will-electron-upgrade-to-latest-nodejs">When will Electron upgrade to latest Node.js?</a><a class="header-link" href="#when-will-electron-upgrade-to-latest-nodejs" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>When a new version of Node.js gets released, we usually wait for about a month
before upgrading the one in Electron. So we can avoid getting affected by bugs
introduced in new Node.js versions, which happens very often.</p>
<p>New features of Node.js are usually brought by V8 upgrades, since Electron is
using the V8 shipped by Chrome browser, the shiny new JavaScript feature of a
new Node.js version is usually already in Electron.</p>
<h2 id="how-to-share-data-between-web-pages"><a href="#how-to-share-data-between-web-pages">How to share data between web pages?</a><a class="header-link" href="#how-to-share-data-between-web-pages" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>To share data between web pages (the renderer processes) the simplest way is to
use HTML5 APIs which are already available in browsers. Good candidates are
<a href="https://developer.mozilla.org/en-US/docs/Web/API/Storage">Storage API</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"><code>localStorage</code></a>,
<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage"><code>sessionStorage</code></a>, and <a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API">IndexedDB</a>.</p>
<p>Or you can use the IPC system, which is specific to Electron, to store objects
in the main process as a global variable, and then to access them from the
renderers through the <code>remote</code> property of <code>electron</code> module:</p>
<pre><code class="hljs language-javascript" id="_s7qcks2d"><span class="hljs-comment">// In the main process.</span>
global.sharedObject = {
  <span class="hljs-attr">someProperty</span>: <span class="hljs-string">'default value'</span>
}</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_s7qcks2d">Copy</button></pre>
<pre><code class="hljs language-javascript" id="_tlv1ba3v"><span class="hljs-comment">// In page 1.</span>
<span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>).remote.getGlobal(<span class="hljs-string">'sharedObject'</span>).someProperty = <span class="hljs-string">'new value'</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_tlv1ba3v">Copy</button></pre>
<pre><code class="hljs language-javascript" id="_93ctyxemj"><span class="hljs-comment">// In page 2.</span>
<span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>).remote.getGlobal(<span class="hljs-string">'sharedObject'</span>).someProperty)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_93ctyxemj">Copy</button></pre>
<h2 id="my-apps-windowtray-disappeared-after-a-few-minutes"><a href="#my-apps-windowtray-disappeared-after-a-few-minutes">My app's window/tray disappeared after a few minutes.</a><a class="header-link" href="#my-apps-windowtray-disappeared-after-a-few-minutes" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>This happens when the variable which is used to store the window/tray gets
garbage collected.</p>
<p>If you encounter this problem, the following articles may prove helpful:</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management">Memory Management</a></li>
<li><a href="https://msdn.microsoft.com/library/bzt2dkta(v=vs.94).aspx">Variable Scope</a></li>
</ul>
<p>If you want a quick fix, you can make the variables global by changing your
code from this:</p>
<pre><code class="hljs language-javascript" id="_5j6jh08l"><span class="hljs-keyword">const</span> {app, Tray} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  <span class="hljs-keyword">const</span> tray = <span class="hljs-keyword">new</span> Tray(<span class="hljs-string">'/path/to/icon.png'</span>)
  tray.setTitle(<span class="hljs-string">'hello world'</span>)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_5j6jh08l">Copy</button></pre>
<p>to this:</p>
<pre><code class="hljs language-javascript" id="_js48c23"><span class="hljs-keyword">const</span> {app, Tray} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> tray = <span class="hljs-literal">null</span>
app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  tray = <span class="hljs-keyword">new</span> Tray(<span class="hljs-string">'/path/to/icon.png'</span>)
  tray.setTitle(<span class="hljs-string">'hello world'</span>)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_js48c23">Copy</button></pre>
<h2 id="i-can-not-use-jqueryrequirejsmeteorangularjs-in-electron"><a href="#i-can-not-use-jqueryrequirejsmeteorangularjs-in-electron">I can not use jQuery/RequireJS/Meteor/AngularJS in Electron.</a><a class="header-link" href="#i-can-not-use-jqueryrequirejsmeteorangularjs-in-electron" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Due to the Node.js integration of Electron, there are some extra symbols
inserted into the DOM like <code>module</code>, <code>exports</code>, <code>require</code>. This causes problems
for some libraries since they want to insert the symbols with the same names.</p>
<p>To solve this, you can turn off node integration in Electron:</p>
<pre><code class="hljs language-javascript" id="_nmr2i0ts"><span class="hljs-comment">// In the main process.</span>
<span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow({
  <span class="hljs-attr">webPreferences</span>: {
    <span class="hljs-attr">nodeIntegration</span>: <span class="hljs-literal">false</span>
  }
})
win.show()</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_nmr2i0ts">Copy</button></pre>
<p>But if you want to keep the abilities of using Node.js and Electron APIs, you
have to rename the symbols in the page before including other libraries:</p>
<pre><code class="hljs language-html" id="_8mvhgil"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
<span class="hljs-built_in">window</span>.nodeRequire = <span class="hljs-built_in">require</span>;
<span class="hljs-keyword">delete</span> <span class="hljs-built_in">window</span>.require;
<span class="hljs-keyword">delete</span> <span class="hljs-built_in">window</span>.exports;
<span class="hljs-keyword">delete</span> <span class="hljs-built_in">window</span>.module;
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"jquery.js"</span>&gt;</span><span class="null"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_8mvhgil">Copy</button></pre>
<h2 id="requireelectronxxx-is-undefined"><a href="#requireelectronxxx-is-undefined"><code>require('electron').xxx</code> is undefined.</a><a class="header-link" href="#requireelectronxxx-is-undefined" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>When using Electron's built-in module you might encounter an error like this:</p>
<pre><code class="hljs language-sh" id="_tnopqunc">&gt; require(<span class="hljs-string">'electron'</span>).webFrame.setZoomFactor(1.0)
Uncaught TypeError: Cannot <span class="hljs-built_in">read</span> property <span class="hljs-string">'setZoomLevel'</span> of undefined</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_tnopqunc">Copy</button></pre>
<p>This is because you have the <a href="https://www.npmjs.com/package/electron">npm <code>electron</code> module</a> installed
either locally or globally, which overrides Electron's built-in module.</p>
<p>To verify whether you are using the correct built-in module, you can print the
path of the <code>electron</code> module:</p>
<pre><code class="hljs language-javascript" id="_g9btyjja"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">require</span>.resolve(<span class="hljs-string">'electron'</span>))</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_g9btyjja">Copy</button></pre>
<p>and then check if it is in the following form:</p>
<pre><code class="hljs language-sh" id="_zedd58xj"><span class="hljs-string">"/path/to/Electron.app/Contents/Resources/atom.asar/renderer/api/lib/exports/electron.js"</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_zedd58xj">Copy</button></pre>
<p>If it is something like <code>node_modules/electron/index.js</code>, then you have to
either remove the npm <code>electron</code> module, or rename it.</p>
<pre><code class="hljs language-sh" id="_t6xacclg">npm uninstall electron
npm uninstall -g electron</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_t6xacclg">Copy</button></pre>
<p>However if you are using the built-in module but still getting this error, it
is very likely you are using the module in the wrong process. For example
<code>electron.app</code> can only be used in the main process, while <code>electron.webFrame</code>
is only available in renderer processes.</p>

  <hr>
  <h1 id="filefilter-object"><a href="#filefilter-object">FileFilter Object</a><a class="header-link" href="#filefilter-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>name</code> String</li>
<li><code>extensions</code> String[]</li>
</ul>

  <hr>
  <h1 id="file-object"><a href="#file-object"><code>File</code> Object</a><a class="header-link" href="#file-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Use the HTML5 <code>File</code> API to work natively with files on the filesystem.</p>
</blockquote>
<p>The DOM's File interface provides abstraction around native files in order to
let users work on native files directly with the HTML5 file API. Electron has
added a <code>path</code> attribute to the <code>File</code> interface which exposes the file's real
path on filesystem.</p>
<p>Example of getting a real path from a dragged-onto-the-app file:</p>
<pre><code class="hljs language-html" id="_o8pjthn6"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"holder"</span>&gt;</span>
  Drag your file here
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
  <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'drop'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>{
    e.preventDefault();
    e.stopPropagation();
    
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> f <span class="hljs-keyword">of</span> e.dataTransfer.files) {
      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'File(s) you dragged here: '</span>, f.path)
    }
  });
  <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'dragover'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>{
    e.preventDefault();
    e.stopPropagation();
  });
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_o8pjthn6">Copy</button></pre>

  <hr>
  <h1 id="frameless-window"><a href="#frameless-window">Frameless Window</a><a class="header-link" href="#frameless-window" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Open a window without toolbars, borders, or other graphical "chrome".</p>
</blockquote>
<p>A frameless window is a window that has no
<a href="https://developer.mozilla.org/en-US/docs/Glossary/Chrome">chrome</a>, the parts of
the window, like toolbars, that are not a part of the web page. These are
options on the <a href="https://electronjs.org/docs/api/browser-window"><code>BrowserWindow</code></a> class.</p>
<h2 id="create-a-frameless-window"><a href="#create-a-frameless-window">Create a frameless window</a><a class="header-link" href="#create-a-frameless-window" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>To create a frameless window, you need to set <code>frame</code> to <code>false</code> in
<a href="https://electronjs.org/docs/api/browser-window">BrowserWindow</a>'s <code>options</code>:</p>
<pre><code class="hljs language-javascript" id="_beafn4p"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">width</span>: <span class="hljs-number">800</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">600</span>, <span class="hljs-attr">frame</span>: <span class="hljs-literal">false</span>})
win.show()</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_beafn4p">Copy</button></pre>
<h3 id="alternatives-on-macos"><a href="#alternatives-on-macos">Alternatives on macOS</a><a class="header-link" href="#alternatives-on-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>On macOS 10.9 Mavericks and newer, there's an alternative way to specify
a chromeless window. Instead of setting <code>frame</code> to <code>false</code> which disables
both the titlebar and window controls, you may want to have the title bar
hidden and your content extend to the full window size, yet still preserve
the window controls ("traffic lights") for standard window actions.
You can do so by specifying the <code>titleBarStyle</code> option:</p>
<h4 id="hidden"><a href="#hidden"><code>hidden</code></a><a class="header-link" href="#hidden" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Results in a hidden title bar and a full size content window, yet the
 title bar still has the standard window controls (“traffic lights”) in 
the top left.</p>
<pre><code class="hljs language-javascript" id="_f7vkzw8r"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">titleBarStyle</span>: <span class="hljs-string">'hidden'</span>})
win.show()</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_f7vkzw8r">Copy</button></pre>
<h4 id="hiddeninset"><a href="#hiddeninset"><code>hiddenInset</code></a><a class="header-link" href="#hiddeninset" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Results in a hidden title bar with an alternative look where the 
traffic light buttons are slightly more inset from the window edge.</p>
<pre><code class="hljs language-javascript" id="_qfdmvue8"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">titleBarStyle</span>: <span class="hljs-string">'hiddenInset'</span>})
win.show()</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_qfdmvue8">Copy</button></pre>
<h4 id="custombuttonsonhover"><a href="#custombuttonsonhover"><code>customButtonsOnHover</code></a><a class="header-link" href="#custombuttonsonhover" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Uses custom drawn close, miniaturize, and fullscreen buttons that display
when hovering in the top left of the window. These custom buttons prevent issues
with mouse events that occur with the standard window toolbar buttons. This
option is only applicable for frameless windows.</p>
<pre><code class="hljs language-javascript" id="_mf8gwab"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">titleBarStyle</span>: <span class="hljs-string">'customButtonsOnHover'</span>, <span class="hljs-attr">frame</span>: <span class="hljs-literal">false</span>})
win.show()</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_mf8gwab">Copy</button></pre>
<h2 id="transparent-window"><a href="#transparent-window">Transparent window</a><a class="header-link" href="#transparent-window" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>By setting the <code>transparent</code> option to <code>true</code>, you can also make the frameless
window transparent:</p>
<pre><code class="hljs language-javascript" id="_qqr07kla"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">transparent</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">frame</span>: <span class="hljs-literal">false</span>})
win.show()</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_qqr07kla">Copy</button></pre>
<h3 id="limitations"><a href="#limitations">Limitations</a><a class="header-link" href="#limitations" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>You can not click through the transparent area. We are going to introduce an
API to set window shape to solve this, see
<a href="https://github.com/electron/electron/issues/1335">our issue</a> for details.</li>
<li>Transparent windows are not resizable. Setting <code>resizable</code> to <code>true</code> may make
a transparent window stop working on some platforms.</li>
<li>The <code>blur</code> filter only applies to the web page, so there is no way to apply
blur effect to the content below the window (i.e. other applications open on
the user's system).</li>
<li>On Windows operating systems, transparent windows will not work when DWM is
disabled.</li>
<li>On Linux users have to put <code>--enable-transparent-visuals --disable-gpu</code> in
the command line to disable GPU and allow ARGB to make transparent window,
this is caused by an upstream bug that <a href="https://code.google.com/p/chromium/issues/detail?id=369209">alpha channel doesn't work on some
NVidia drivers</a> on
Linux.</li>
<li>On Mac the native window shadow will not be shown on a transparent window.</li>
</ul>
<h2 id="click-through-window"><a href="#click-through-window">Click-through window</a><a class="header-link" href="#click-through-window" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>To create a click-through window, i.e. making the window ignore all mouse
events, you can call the <a href="https://electronjs.org/docs/api/browser-window#winsetignoremouseeventsignore">win.setIgnoreMouseEvents(ignore)</a>
API:</p>
<pre><code class="hljs language-javascript" id="_koiz6hu"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow()
win.setIgnoreMouseEvents(<span class="hljs-literal">true</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_koiz6hu">Copy</button></pre>
<h3 id="forwarding"><a href="#forwarding">Forwarding</a><a class="header-link" href="#forwarding" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Ignoring mouse messages makes the web page oblivious to mouse movement, meaning
that mouse movement events will not be emitted. On Windows operating systems an
optional parameter can be used to forward mouse move messages to the web page,
allowing events such as <code>mouseleave</code> to be emitted:</p>
<pre><code class="hljs language-javascript" id="_n744p5r9"><span class="hljs-keyword">let</span> win = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>).remote.getCurrentWindow()
<span class="hljs-keyword">let</span> el = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'clickThroughElement'</span>)
el.addEventListener(<span class="hljs-string">'mouseenter'</span>, () =&gt; {
  win.setIgnoreMouseEvents(<span class="hljs-literal">true</span>, {<span class="hljs-attr">forward</span>: <span class="hljs-literal">true</span>})
})
el.addEventListener(<span class="hljs-string">'mouseleave'</span>, () =&gt; {
  win.setIgnoreMouseEvents(<span class="hljs-literal">false</span>)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_n744p5r9">Copy</button></pre>
<p>This makes the web page click-through when over <code>el</code>, and returns to normal
outside it.</p>
<h2 id="draggable-region"><a href="#draggable-region">Draggable region</a><a class="header-link" href="#draggable-region" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>By default, the frameless window is non-draggable. Apps need to specify
<code>-webkit-app-region: drag</code> in CSS to tell Electron which regions are draggable
(like the OS's standard titlebar), and apps can also use
<code>-webkit-app-region: no-drag</code> to exclude the non-draggable area from the
draggable region. Note that only rectangular shapes are currently supported.</p>
<p>Note: <code>-webkit-app-region: drag</code> is known to have problems while the developer tools are open. See this <a href="https://github.com/electron/electron/issues/3647">GitHub issue</a> for more information including a workaround.</p>
<p>To make the whole window draggable, you can add <code>-webkit-app-region: drag</code> as
<code>body</code>'s style:</p>
<pre><code class="hljs language-html" id="_olmsuigu"><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"-webkit-app-region: drag"</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_olmsuigu">Copy</button></pre>
<p>And note that if you have made the whole window draggable, you must also mark
buttons as non-draggable, otherwise it would be impossible for users to click on
them:</p>
<pre><code class="hljs language-css" id="_78tnblt"><span class="hljs-selector-tag">button</span> {
  <span class="hljs-attribute">-webkit-app-region</span>: no-drag;
}</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_78tnblt">Copy</button></pre>
<p>If you're setting just a custom titlebar as draggable, you also need to make all
buttons in titlebar non-draggable.</p>
<h2 id="text-selection"><a href="#text-selection">Text selection</a><a class="header-link" href="#text-selection" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>In a frameless window the dragging behaviour may conflict with selecting text.
For example, when you drag the titlebar you may accidentally select the text on
the titlebar. To prevent this, you need to disable text selection within a
draggable area like this:</p>
<pre><code class="hljs language-css" id="_f5oyvgrr"><span class="hljs-selector-class">.titlebar</span> {
  <span class="hljs-attribute">-webkit-user-select</span>: none;
  <span class="hljs-attribute">-webkit-app-region</span>: drag;
}</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_f5oyvgrr">Copy</button></pre>
<h2 id="context-menu"><a href="#context-menu">Context menu</a><a class="header-link" href="#context-menu" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>On some platforms, the draggable area will be treated as a non-client frame, so
when you right click on it a system menu will pop up. To make the context menu
behave correctly on all platforms you should never use a custom context menu on
draggable areas.</p>

  <hr>
  <h1 id="globalshortcut"><a href="#globalshortcut">globalShortcut</a><a class="header-link" href="#globalshortcut" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Detect keyboard events when the application does not have keyboard focus.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<p>The <code>globalShortcut</code> module can register/unregister a global keyboard shortcut
with the operating system so that you can customize the operations for various
shortcuts.</p>
<p><strong>Note:</strong> The shortcut is global; it will work even if the app does
not have the keyboard focus. You should not use this module until the <code>ready</code>
event of the app module is emitted.</p>
<pre><code class="hljs language-javascript" id="_ia037wt"><span class="hljs-keyword">const</span> {app, globalShortcut} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  <span class="hljs-comment">// Register a 'CommandOrControl+X' shortcut listener.</span>
  <span class="hljs-keyword">const</span> ret = globalShortcut.register(<span class="hljs-string">'CommandOrControl+X'</span>, () =&gt; {
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'CommandOrControl+X is pressed'</span>)
  })

  <span class="hljs-keyword">if</span> (!ret) {
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'registration failed'</span>)
  }

  <span class="hljs-comment">// Check whether a shortcut is registered.</span>
  <span class="hljs-built_in">console</span>.log(globalShortcut.isRegistered(<span class="hljs-string">'CommandOrControl+X'</span>))
})

app.on(<span class="hljs-string">'will-quit'</span>, () =&gt; {
  <span class="hljs-comment">// Unregister a shortcut.</span>
  globalShortcut.unregister(<span class="hljs-string">'CommandOrControl+X'</span>)

  <span class="hljs-comment">// Unregister all shortcuts.</span>
  globalShortcut.unregisterAll()
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_ia037wt">Copy</button></pre>
<h2 id="methods"><a href="#methods">Methods</a><a class="header-link" href="#methods" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>globalShortcut</code> module has the following methods:</p>
<h3 id="globalshortcutregisteraccelerator-callback"><a href="#globalshortcutregisteraccelerator-callback"><code>globalShortcut.register(accelerator, callback)</code></a><a class="header-link" href="#globalshortcutregisteraccelerator-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>accelerator</code> <a href="https://electronjs.org/docs/api/accelerator">Accelerator</a></li>
<li><code>callback</code> Function</li>
</ul>
<p>Registers a global shortcut of <code>accelerator</code>. The <code>callback</code> is called when
the registered shortcut is pressed by the user.</p>
<p>When the accelerator is already taken by other applications, this call will
silently fail. This behavior is intended by operating systems, since they don't
want applications to fight for global shortcuts.</p>
<h3 id="globalshortcutisregisteredaccelerator"><a href="#globalshortcutisregisteredaccelerator"><code>globalShortcut.isRegistered(accelerator)</code></a><a class="header-link" href="#globalshortcutisregisteredaccelerator" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>accelerator</code> <a href="https://electronjs.org/docs/api/accelerator">Accelerator</a></li>
</ul>
<p>Returns <code>Boolean</code> - Whether this application has registered <code>accelerator</code>.</p>
<p>When the accelerator is already taken by other applications, this call will
still return <code>false</code>. This behavior is intended by operating systems, since they
don't want applications to fight for global shortcuts.</p>
<h3 id="globalshortcutunregisteraccelerator"><a href="#globalshortcutunregisteraccelerator"><code>globalShortcut.unregister(accelerator)</code></a><a class="header-link" href="#globalshortcutunregisteraccelerator" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>accelerator</code> <a href="https://electronjs.org/docs/api/accelerator">Accelerator</a></li>
</ul>
<p>Unregisters the global shortcut of <code>accelerator</code>.</p>
<h3 id="globalshortcutunregisterall"><a href="#globalshortcutunregisterall"><code>globalShortcut.unregisterAll()</code></a><a class="header-link" href="#globalshortcutunregisterall" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Unregisters all of the global shortcuts.</p>

  <hr>
  <h1 id="glossary"><a href="#glossary">Glossary</a><a class="header-link" href="#glossary" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>This page defines some terminology that is commonly used in Electron development.</p>
<h3 id="asar"><a href="#asar">ASAR</a><a class="header-link" href="#asar" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>ASAR stands for Atom Shell Archive Format. An <a href="https://github.com/electron/asar">asar</a> archive is a simple
<code>tar</code>-like format that concatenates files into a single file. Electron can read
arbitrary files from it without unpacking the whole file.</p>
<p>The ASAR format was created primarily to improve performance on Windows... TODO</p>
<h3 id="brightray"><a href="#brightray">Brightray</a><a class="header-link" href="#brightray" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Brightray <a href="https://github.com/electron-archive/brightray">was</a> a static library
that made <a href="#libchromiumcontent">libchromiumcontent</a> easier to use in applications. It is now
deprecated and has been merged into Electron's codebase.</p>
<h3 id="crt"><a href="#crt">CRT</a><a class="header-link" href="#crt" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The C Run-time Library (CRT) is the part of the C++ Standard Library that
incorporates the ISO C99 standard library. The Visual C++ libraries that
implement the CRT support native code development, and both mixed native and
managed code, and pure managed code for .NET development.</p>
<h3 id="dmg"><a href="#dmg">DMG</a><a class="header-link" href="#dmg" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>An Apple Disk Image is a packaging format used by macOS. DMG files are
commonly used for distributing application "installers". <a href="https://github.com/electron-userland/electron-builder">electron-builder</a>
supports <code>dmg</code> as a build target.</p>
<h3 id="ime"><a href="#ime">IME</a><a class="header-link" href="#ime" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Input Method Editor. A program that allows users to enter characters and
symbols not found on their keyboard. For example, this allows users of Latin
keyboards to input Chinese, Japanese, Korean and Indic characters.</p>
<h3 id="ipc"><a href="#ipc">IPC</a><a class="header-link" href="#ipc" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>IPC stands for Inter-Process Communication. Electron uses IPC to send
serialized JSON messages between the <a href="#main-process">main</a> and <a href="#renderer-process">renderer</a> processes.</p>
<h3 id="libchromiumcontent"><a href="#libchromiumcontent">libchromiumcontent</a><a class="header-link" href="#libchromiumcontent" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>A shared library that includes the <a href="https://www.chromium.org/developers/content-module">Chromium Content module</a> and all its
dependencies (e.g., Blink, <a href="#v8">V8</a>, etc.). Also referred to as "libcc".</p>
<ul>
<li><a href="https://github.com/electron/libchromiumcontent">github.com/electron/libchromiumcontent</a></li>
</ul>
<h3 id="main-process"><a href="#main-process">main process</a><a class="header-link" href="#main-process" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The main process, commonly a file named <code>main.js</code>, is the entry point to every
Electron app. It controls the life of the app, from open to close. It also
manages native elements such as the Menu, Menu Bar, Dock, Tray, etc. The
main process is responsible for creating each new renderer process in the app.
The full Node API is built in.</p>
<p>Every app's main process file is specified in the <code>main</code> property in
<code>package.json</code>. This is how <code>electron .</code> knows what file to execute at startup.</p>
<p>In Chromium, this process is referred to as the "browser process". It is
renamed in Electron to avoid confusion with renderer processes.</p>
<p>See also: <a href="#process">process</a>, <a href="#renderer-process">renderer process</a></p>
<h3 id="mas"><a href="#mas">MAS</a><a class="header-link" href="#mas" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Acronym for Apple's Mac App Store. For details on submitting your app to the
MAS, see the <a href="https://electronjs.org/docs/tutorial/mac-app-store-submission-guide">Mac App Store Submission Guide</a>.</p>
<h3 id="native-modules"><a href="#native-modules">native modules</a><a class="header-link" href="#native-modules" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Native modules (also called <a href="https://nodejs.org/api/addons.html">addons</a> in
Node.js) are modules written in C or C++ that can be loaded into Node.js or
Electron using the require() function, and used just as if they were an
ordinary Node.js module. They are used primarily to provide an interface
between JavaScript running in Node.js and C/C++ libraries.</p>
<p>Native Node modules are supported by Electron, but since Electron is very
likely to use a different V8 version from the Node binary installed in your
system, you have to manually specify the location of Electron’s headers when
building native modules.</p>
<p>See also <a href="https://electronjs.org/docs/tutorial/using-native-node-modules">Using Native Node Modules</a>.</p>
<h3 id="nsis"><a href="#nsis">NSIS</a><a class="header-link" href="#nsis" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Nullsoft Scriptable Install System is a script-driven Installer
authoring tool for Microsoft Windows. It is released under a combination of
free software licenses, and is a widely-used alternative to commercial
proprietary products like InstallShield. <a href="https://github.com/electron-userland/electron-builder">electron-builder</a> supports NSIS
as a build target.</p>
<h3 id="osr"><a href="#osr">OSR</a><a class="header-link" href="#osr" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>OSR (Off-screen rendering) can be used for loading heavy page in
background and then displaying it after (it will be much faster).
It allows you to render page without showing it on screen.</p>
<h3 id="process"><a href="#process">process</a><a class="header-link" href="#process" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>A process is an instance of a computer program that is being executed. Electron
apps that make use of the <a href="#main-process">main</a> and one or many <a href="#renderer-process">renderer</a> process are
actually running several programs simultaneously.</p>
<p>In Node.js and Electron, each running process has a <code>process</code> object. This
object is a global that provides information about, and control over, the
current process. As a global, it is always available to applications without
using require().</p>
<p>See also: <a href="#main-process">main process</a>, <a href="#renderer-process">renderer process</a></p>
<h3 id="renderer-process"><a href="#renderer-process">renderer process</a><a class="header-link" href="#renderer-process" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The renderer process is a browser window in your app. Unlike the main process,
there can be multiple of these and each is run in a separate process.
They can also be hidden.</p>
<p>In normal browsers, web pages usually run in a sandboxed environment and are not
allowed access to native resources. Electron users, however, have the power to
use Node.js APIs in web pages allowing lower level operating system
interactions.</p>
<p>See also: <a href="#process">process</a>, <a href="#main-process">main process</a></p>
<h3 id="squirrel"><a href="#squirrel">Squirrel</a><a class="header-link" href="#squirrel" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Squirrel is an open-source framework that enables Electron apps to update
automatically as new versions are released. See the <a href="https://electronjs.org/docs/api/auto-updater">autoUpdater</a> API for
info about getting started with Squirrel.</p>
<h3 id="userland"><a href="#userland">userland</a><a class="header-link" href="#userland" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>This term originated in the Unix community, where "userland" or "userspace"
referred to programs that run outside of the operating system kernel. More
recently, the term has been popularized in the Node and npm community to
distinguish between the features available in "Node core" versus packages
published to the npm registry by the much larger "user" community.</p>
<p>Like Node, Electron is focused on having a small set of APIs that provide
all the necessary primitives for developing multi-platform desktop applications.
This design philosophy allows Electron to remain a flexible tool without being
overly prescriptive about how it should be used. Userland enables users to
create and share tools that provide additional functionality on top of what is
available in "core".</p>
<h3 id="v8"><a href="#v8">V8</a><a class="header-link" href="#v8" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>V8 is Google's open source JavaScript engine. It is written in C++ and is
used in Google Chrome. V8 can run standalone, or can be embedded into any C++ application.</p>
<p>Electron builds V8 as part of Chromium and then points Node to that V8 when
building it.</p>
<p>V8's version numbers always correspond to those of Google Chrome. Chrome 59
includes V8 5.9, Chrome 58 includes V8 5.8, etc.</p>
<ul>
<li><a href="https://developers.google.com/v8">developers.google.com/v8</a></li>
<li><a href="https://nodejs.org/api/v8.html">nodejs.org/api/v8.html</a></li>
<li><a href="https://electronjs.org/docs/development/v8-development">docs/development/v8-development.md</a></li>
</ul>
<h3 id="webview"><a href="#webview">webview</a><a class="header-link" href="#webview" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p><code>webview</code> tags are used to embed 'guest' content (such as external web pages) in
your Electron app. They are similar to <code>iframe</code>s, but differ in that each
webview runs in a separate process. It doesn't have the same
permissions as your web page and all interactions between your app and
embedded content will be asynchronous. This keeps your app safe from the
embedded content.</p>

  <hr>
  <h1 id="gpufeaturestatus-object"><a href="#gpufeaturestatus-object">GPUFeatureStatus Object</a><a class="header-link" href="#gpufeaturestatus-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>2d_canvas</code> String - Canvas</li>
<li><code>flash_3d</code> String - Flash</li>
<li><code>flash_stage3d</code> String - Flash Stage3D</li>
<li><code>flash_stage3d_baseline</code> String - Flash Stage3D Baseline profile</li>
<li><code>gpu_compositing</code> String - Compositing</li>
<li><code>multiple_raster_threads</code> String - Multiple Raster Threads</li>
<li><code>native_gpu_memory_buffers</code> String - Native GpuMemoryBuffers</li>
<li><code>rasterization</code> String - Rasterization</li>
<li><code>video_decode</code> String - Video Decode</li>
<li><code>video_encode</code> String - Video Encode</li>
<li><code>vpx_decode</code> String - VPx Video Decode</li>
<li><code>webgl</code> String - WebGL</li>
<li><code>webgl2</code> String - WebGL2</li>
</ul>
<p>Possible values:</p>
<ul>
<li><code>disabled_software</code> - Software only. Hardware acceleration disabled (yellow)</li>
<li><code>disabled_off</code> - Disabled (red)</li>
<li><code>disabled_off_ok</code> - Disabled (yellow)</li>
<li><code>unavailable_software</code> - Software only, hardware acceleration unavailable (yellow)</li>
<li><code>unavailable_off</code> - Unavailable (red)</li>
<li><code>unavailable_off_ok</code> - Unavailable (yellow)</li>
<li><code>enabled_readback</code> - Hardware accelerated but at reduced performance (yellow)</li>
<li><code>enabled_force</code> - Hardware accelerated on all pages (green)</li>
<li><code>enabled</code> - Hardware accelerated (green)</li>
<li><code>enabled_on</code> - Enabled (green)</li>
<li><code>enabled_force_on</code> - Force enabled (green)</li>
</ul>

  <hr>
  <h2 id="class-incomingmessage"><a href="#class-incomingmessage">Class: IncomingMessage</a><a class="header-link" href="#class-incomingmessage" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>Handle responses to HTTP/HTTPS requests.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<p><code>IncomingMessage</code> implements the <a href="https://nodejs.org/api/stream.html#stream_readable_streams">Readable Stream</a>
interface and is therefore an <a href="https://nodejs.org/api/events.html#events_class_eventemitter">EventEmitter</a>.</p>
<h3 id="instance-events"><a href="#instance-events">Instance Events</a><a class="header-link" href="#instance-events" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<h4 id="event-data"><a href="#event-data">Event: 'data'</a><a class="header-link" href="#event-data" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>chunk</code> Buffer - A chunk of response body's data.</li>
</ul>
<p>The <code>data</code> event is the usual method of transferring response data into
applicative code.</p>
<h4 id="event-end"><a href="#event-end">Event: 'end'</a><a class="header-link" href="#event-end" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Indicates that response body has ended.</p>
<h4 id="event-aborted"><a href="#event-aborted">Event: 'aborted'</a><a class="header-link" href="#event-aborted" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when a request has been canceled during an ongoing HTTP transaction.</p>
<h4 id="event-error"><a href="#event-error">Event: 'error'</a><a class="header-link" href="#event-error" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<p><code>error</code> Error - Typically holds an error string identifying failure root cause.</p>
<p>Emitted when an error was encountered while streaming response data events. For
instance, if the server closes the underlying while the response is still
streaming, an <code>error</code> event will be emitted on the response object and a <code>close</code>
event will subsequently follow on the request object.</p>
<h3 id="instance-properties"><a href="#instance-properties">Instance Properties</a><a class="header-link" href="#instance-properties" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>An <code>IncomingMessage</code> instance has the following readable properties:</p>
<h4 id="responsestatuscode"><a href="#responsestatuscode"><code>response.statusCode</code></a><a class="header-link" href="#responsestatuscode" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>An <code>Integer</code> indicating the HTTP response status code.</p>
<h4 id="responsestatusmessage"><a href="#responsestatusmessage"><code>response.statusMessage</code></a><a class="header-link" href="#responsestatusmessage" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>String</code> representing the HTTP status message.</p>
<h4 id="responseheaders"><a href="#responseheaders"><code>response.headers</code></a><a class="header-link" href="#responseheaders" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>An <code>Object</code> representing the response HTTP headers. The <code>headers</code> object is
formatted as follows:</p>
<ul>
<li>All header names are lowercased.</li>
<li>Each header name produces an array-valued property on the headers object.</li>
<li>Each header value is pushed into the array associated with its header name.</li>
</ul>
<h4 id="responsehttpversion"><a href="#responsehttpversion"><code>response.httpVersion</code></a><a class="header-link" href="#responsehttpversion" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>String</code> indicating the HTTP protocol version number. Typical values are '1.0'
or '1.1'. Additionally <code>httpVersionMajor</code> and <code>httpVersionMinor</code> are two
Integer-valued readable properties that return respectively the HTTP major and
minor version numbers.</p>
<h4 id="responsehttpversionmajor"><a href="#responsehttpversionmajor"><code>response.httpVersionMajor</code></a><a class="header-link" href="#responsehttpversionmajor" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>An <code>Integer</code> indicating the HTTP protocol major version number.</p>
<h4 id="responsehttpversionminor"><a href="#responsehttpversionminor"><code>response.httpVersionMinor</code></a><a class="header-link" href="#responsehttpversionminor" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>An <code>Integer</code> indicating the HTTP protocol minor version number.</p>

  <hr>
  <h1 id="installation"><a href="#installation">Installation</a><a class="header-link" href="#installation" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Tips for installing Electron</p>
</blockquote>
<p>To install prebuilt Electron binaries, use <a href="https://docs.npmjs.com/"><code>npm</code></a>.
The preferred method is to install Electron as a development dependency in your
app:</p>
<pre><code class="hljs language-sh" id="_2jn4rz8">npm install electron --save-dev</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_2jn4rz8">Copy</button></pre>
<p>See the
<a href="https://electronjs.org/docs/tutorial/electron-versioning">Electron versioning doc</a>
for info on how to manage Electron versions in your apps.</p>
<h2 id="global-installation"><a href="#global-installation">Global Installation</a><a class="header-link" href="#global-installation" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>You can also install the <code>electron</code> command globally in your <code>$PATH</code>:</p>
<pre><code class="hljs language-sh" id="_vw2wo1">npm install electron -g</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_vw2wo1">Copy</button></pre>
<h2 id="customization"><a href="#customization">Customization</a><a class="header-link" href="#customization" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>If you want to change the architecture that is downloaded (e.g., <code>ia32</code> on an
<code>x64</code> machine), you can use the <code>--arch</code> flag with npm install or set the
<code>npm_config_arch</code> environment variable:</p>
<pre><code class="hljs language-shell" id="_k8e2g9l">npm install --arch=ia32 electron</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_k8e2g9l">Copy</button></pre>
<p>In addition to changing the architecture, you can also specify the platform
(e.g., <code>win32</code>, <code>linux</code>, etc.) using the <code>--platform</code> flag:</p>
<pre><code class="hljs language-shell" id="_dnrmoq7o">npm install --platform=win32 electron</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_dnrmoq7o">Copy</button></pre>
<h2 id="proxies"><a href="#proxies">Proxies</a><a class="header-link" href="#proxies" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>If you need to use an HTTP proxy you can <a href="https://github.com/request/request/tree/f0c4ec061141051988d1216c24936ad2e7d5c45d#controlling-proxy-behaviour-using-environment-variables">set these environment variables</a>.</p>
<h2 id="custom-mirrors-and-caches"><a href="#custom-mirrors-and-caches">Custom Mirrors and Caches</a><a class="header-link" href="#custom-mirrors-and-caches" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>During installation, the <code>electron</code> module will call out to <a href="https://github.com/electron-userland/electron-download"><code>electron-download</code></a> to download prebuilt
binaries of Electron for your platform. It will do so by contacting GitHub's
release download page (<code>https://github.com/electron/electron/releases/tag/v$VERSION</code>,
where <code>$VERSION</code> is the exact version of Electron).</p>
<p>If you are unable to access GitHub or you need to provide a custom build, you
can do so by either providing a mirror or an existing cache directory.</p>
<h4 id="mirror"><a href="#mirror">Mirror</a><a class="header-link" href="#mirror" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>You can use environment variables to override the base URL, the path at which to
look for Electron binaries, and the binary filename. The url used by <code>electron-download</code>
is composed as follows:</p>
<pre><code class="hljs language-txt" id="_lrwepgaq"><span class="hljs-attr">url</span> = ELECTRON_MIRROR + ELECTRON_CUSTOM_DIR + <span class="hljs-string">'/'</span> + ELECTRON_CUSTOM_FILENAME</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_lrwepgaq">Copy</button></pre>
<p>For instance, to use the China mirror:</p>
<pre><code class="hljs language-txt" id="_5k88gy"><span class="hljs-attr">ELECTRON_MIRROR</span>=<span class="hljs-string">"https://npm.taobao.org/mirrors/electron/"</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_5k88gy">Copy</button></pre>
<h4 id="cache"><a href="#cache">Cache</a><a class="header-link" href="#cache" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Alternatively, you can override the local cache. <code>electron-download</code> will cache
downloaded binaries in a local directory to not stress your network. You can use
that cache folder to provide custom builds of Electron or to avoid making contact
with the network at all.</p>
<ul>
<li>Linux: <code>$XDG_CACHE_HOME</code> or <code>~/.cache/electron/</code></li>
<li>MacOS: <code>~/Library/Caches/electron/</code></li>
<li>Windows: <code>$LOCALAPPDATA/electron/Cache</code> or <code>~/AppData/Local/electron/Cache/</code></li>
</ul>
<p>On environments that have been using older versions of Electron, you might find the
cache also in <code>~/.electron</code>.</p>
<p>You can also override the local cache location by providing a <code>ELECTRON_CACHE</code>
environment variable.</p>
<p>The cache contains the version's official zip file as well as a checksum, stored as
a text file. A typical cache might look like this:</p>
<pre><code class="hljs language-sh" id="_s4jw1t7">├── electron-v1.7.9-darwin-x64.zip
├── electron-v1.8.1-darwin-x64.zip
├── electron-v1.8.2-beta.1-darwin-x64.zip
├── electron-v1.8.2-beta.2-darwin-x64.zip
├── electron-v1.8.2-beta.3-darwin-x64.zip
├── SHASUMS256.txt-1.7.9
├── SHASUMS256.txt-1.8.1
├── SHASUMS256.txt-1.8.2-beta.1
├── SHASUMS256.txt-1.8.2-beta.2
├── SHASUMS256.txt-1.8.2-beta.3</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_s4jw1t7">Copy</button></pre>
<h2 id="troubleshooting"><a href="#troubleshooting">Troubleshooting</a><a class="header-link" href="#troubleshooting" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>When running <code>npm install electron</code>, some users occasionally encounter
installation errors.</p>
<p>In almost all cases, these errors are the result of network problems and not
actual issues with the <code>electron</code> npm package. Errors like <code>ELIFECYCLE</code>,
<code>EAI_AGAIN</code>, <code>ECONNRESET</code>, and <code>ETIMEDOUT</code> are all indications of such
network problems. The best resolution is to try switching networks, or
just wait a bit and try installing again.</p>
<p>You can also attempt to download Electron directly from
<a href="https://github.com/electron/electron/releases">electron/electron/releases</a>
if installing via <code>npm</code> is failing.</p>
<p>If installation fails with an <code>EACCESS</code> error you may need to
<a href="https://docs.npmjs.com/getting-started/fixing-npm-permissions">fix your npm permissions</a>.</p>
<p>If the above error persists, the <a href="https://docs.npmjs.com/misc/config#unsafe-perm">unsafe-perm</a> flag may need to be set to true:</p>
<pre><code class="hljs language-sh" id="_bjbpa1nb">sudo npm install electron --unsafe-perm=<span class="hljs-literal">true</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_bjbpa1nb">Copy</button></pre>
<p>On slower networks, it may be advisable to use the <code>--verbose</code> flag in order to show download progress:</p>
<pre><code class="hljs language-sh" id="_pooe4s4">npm install --verbose electron</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_pooe4s4">Copy</button></pre>
<p>If you need to force a re-download of the asset and the SHASUM file set the
<code>force_no_cache</code> enviroment variable to <code>true</code>.</p>

  <hr>
  <h1 id="iocounters-object"><a href="#iocounters-object">IOCounters Object</a><a class="header-link" href="#iocounters-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>readOperationCount</code> Number - The number of I/O read operations.</li>
<li><code>writeOperationCount</code> Number - The number of I/O write operations.</li>
<li><code>otherOperationCount</code> Number - Then number of I/O other operations.</li>
<li><code>readTransferCount</code> Number - The number of I/O read transfers.</li>
<li><code>writeTransferCount</code> Number - The number of I/O write transfers.</li>
<li><code>otherTransferCount</code> Number - Then number of I/O other transfers.</li>
</ul>

  <hr>
  <h1 id="ipcmain"><a href="#ipcmain">ipcMain</a><a class="header-link" href="#ipcmain" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Communicate asynchronously from the main process to renderer processes.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<p>The <code>ipcMain</code> module is an instance of the
<a href="https://nodejs.org/api/events.html#events_class_eventemitter">EventEmitter</a> class. When used in the main
process, it handles asynchronous and synchronous messages sent from a renderer
process (web page). Messages sent from a renderer will be emitted to this
module.</p>
<h2 id="sending-messages"><a href="#sending-messages">Sending Messages</a><a class="header-link" href="#sending-messages" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>It is also possible to send messages from the main process to the renderer
process, see <a href="https://electronjs.org/docs/api/web-contents#webcontentssendchannel-arg1-arg2-">webContents.send</a> for more information.</p>
<ul>
<li>When sending a message, the event name is the <code>channel</code>.</li>
<li>To reply to a synchronous message, you need to set <code>event.returnValue</code>.</li>
<li>To send an asynchronous message back to the sender, you can use
<code>event.sender.send(...)</code>.</li>
</ul>
<p>An example of sending and handling messages between the render and main
processes:</p>
<pre><code class="hljs language-javascript" id="_q31m80f"><span class="hljs-comment">// In main process.</span>
<span class="hljs-keyword">const</span> {ipcMain} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
ipcMain.on(<span class="hljs-string">'asynchronous-message'</span>, (event, arg) =&gt; {
  <span class="hljs-built_in">console</span>.log(arg)  <span class="hljs-comment">// prints "ping"</span>
  event.sender.send(<span class="hljs-string">'asynchronous-reply'</span>, <span class="hljs-string">'pong'</span>)
})

ipcMain.on(<span class="hljs-string">'synchronous-message'</span>, (event, arg) =&gt; {
  <span class="hljs-built_in">console</span>.log(arg)  <span class="hljs-comment">// prints "ping"</span>
  event.returnValue = <span class="hljs-string">'pong'</span>
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_q31m80f">Copy</button></pre>
<pre><code class="hljs language-javascript" id="_ars5a1z2k"><span class="hljs-comment">// In renderer process (web page).</span>
<span class="hljs-keyword">const</span> {ipcRenderer} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-built_in">console</span>.log(ipcRenderer.sendSync(<span class="hljs-string">'synchronous-message'</span>, <span class="hljs-string">'ping'</span>)) <span class="hljs-comment">// prints "pong"</span>

ipcRenderer.on(<span class="hljs-string">'asynchronous-reply'</span>, (event, arg) =&gt; {
  <span class="hljs-built_in">console</span>.log(arg) <span class="hljs-comment">// prints "pong"</span>
})
ipcRenderer.send(<span class="hljs-string">'asynchronous-message'</span>, <span class="hljs-string">'ping'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_ars5a1z2k">Copy</button></pre>
<h2 id="methods"><a href="#methods">Methods</a><a class="header-link" href="#methods" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>ipcMain</code> module has the following method to listen for events:</p>
<h3 id="ipcmainonchannel-listener"><a href="#ipcmainonchannel-listener"><code>ipcMain.on(channel, listener)</code></a><a class="header-link" href="#ipcmainonchannel-listener" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>channel</code> String</li>
<li><code>listener</code> Function</li>
</ul>
<p>Listens to <code>channel</code>, when a new message arrives <code>listener</code> would be called with
<code>listener(event, args...)</code>.</p>
<h3 id="ipcmainoncechannel-listener"><a href="#ipcmainoncechannel-listener"><code>ipcMain.once(channel, listener)</code></a><a class="header-link" href="#ipcmainoncechannel-listener" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>channel</code> String</li>
<li><code>listener</code> Function</li>
</ul>
<p>Adds a one time <code>listener</code> function for the event. This <code>listener</code> is invoked
only the next time a message is sent to <code>channel</code>, after which it is removed.</p>
<h3 id="ipcmainremovelistenerchannel-listener"><a href="#ipcmainremovelistenerchannel-listener"><code>ipcMain.removeListener(channel, listener)</code></a><a class="header-link" href="#ipcmainremovelistenerchannel-listener" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>channel</code> String</li>
<li><code>listener</code> Function</li>
</ul>
<p>Removes the specified <code>listener</code> from the listener array for the specified
<code>channel</code>.</p>
<h3 id="ipcmainremovealllistenerschannel"><a href="#ipcmainremovealllistenerschannel"><code>ipcMain.removeAllListeners([channel])</code></a><a class="header-link" href="#ipcmainremovealllistenerschannel" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>channel</code> String</li>
</ul>
<p>Removes listeners of the specified <code>channel</code>.</p>
<h2 id="event-object"><a href="#event-object">Event object</a><a class="header-link" href="#event-object" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>event</code> object passed to the <code>callback</code> has the following methods:</p>
<h3 id="eventreturnvalue"><a href="#eventreturnvalue"><code>event.returnValue</code></a><a class="header-link" href="#eventreturnvalue" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Set this to the value to be returned in a synchronous message.</p>
<h3 id="eventsender"><a href="#eventsender"><code>event.sender</code></a><a class="header-link" href="#eventsender" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns the <code>webContents</code> that sent the message, you can call
<code>event.sender.send</code> to reply to the asynchronous message, see
<a href="https://electronjs.org/docs/api/web-contents#webcontentssendchannel-arg1-arg2-">webContents.send</a> for more information.</p>

  <hr>
  <h1 id="ipcrenderer"><a href="#ipcrenderer">ipcRenderer</a><a class="header-link" href="#ipcrenderer" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Communicate asynchronously from a renderer process to the main process.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#renderer-process">Renderer</a></p>
<p>The <code>ipcRenderer</code> module is an instance of the
<a href="https://nodejs.org/api/events.html#events_class_eventemitter">EventEmitter</a> class. It provides a few
methods so you can send synchronous and asynchronous messages from the render
process (web page) to the main process.  You can also receive replies from the
main process.</p>
<p>See <a href="https://electronjs.org/docs/api/ipc-main">ipcMain</a> for code examples.</p>
<h2 id="methods"><a href="#methods">Methods</a><a class="header-link" href="#methods" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>ipcRenderer</code> module has the following method to listen for events and send messages:</p>
<h3 id="ipcrendereronchannel-listener"><a href="#ipcrendereronchannel-listener"><code>ipcRenderer.on(channel, listener)</code></a><a class="header-link" href="#ipcrendereronchannel-listener" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>channel</code> String</li>
<li><code>listener</code> Function</li>
</ul>
<p>Listens to <code>channel</code>, when a new message arrives <code>listener</code> would be called with
<code>listener(event, args...)</code>.</p>
<h3 id="ipcrendereroncechannel-listener"><a href="#ipcrendereroncechannel-listener"><code>ipcRenderer.once(channel, listener)</code></a><a class="header-link" href="#ipcrendereroncechannel-listener" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>channel</code> String</li>
<li><code>listener</code> Function</li>
</ul>
<p>Adds a one time <code>listener</code> function for the event. This <code>listener</code> is invoked
only the next time a message is sent to <code>channel</code>, after which it is removed.</p>
<h3 id="ipcrendererremovelistenerchannel-listener"><a href="#ipcrendererremovelistenerchannel-listener"><code>ipcRenderer.removeListener(channel, listener)</code></a><a class="header-link" href="#ipcrendererremovelistenerchannel-listener" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>channel</code> String</li>
<li><code>listener</code> Function</li>
</ul>
<p>Removes the specified <code>listener</code> from the listener array for the specified
<code>channel</code>.</p>
<h3 id="ipcrendererremovealllistenerschannel"><a href="#ipcrendererremovealllistenerschannel"><code>ipcRenderer.removeAllListeners(channel)</code></a><a class="header-link" href="#ipcrendererremovealllistenerschannel" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>channel</code> String</li>
</ul>
<p>Removes all listeners, or those of the specified <code>channel</code>.</p>
<h3 id="ipcrenderersendchannel-arg1-arg2-"><a href="#ipcrenderersendchannel-arg1-arg2-"><code>ipcRenderer.send(channel[, arg1][, arg2][, ...])</code></a><a class="header-link" href="#ipcrenderersendchannel-arg1-arg2-" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>channel</code> String</li>
<li><code>...args</code> any[]</li>
</ul>
<p>Send a message to the main process asynchronously via <code>channel</code>, you can also
send arbitrary arguments. Arguments will be serialized in JSON internally and
hence no functions or prototype chain will be included.</p>
<p>The main process handles it by listening for <code>channel</code> with <code>ipcMain</code> module.</p>
<h3 id="ipcrenderersendsyncchannel-arg1-arg2-"><a href="#ipcrenderersendsyncchannel-arg1-arg2-"><code>ipcRenderer.sendSync(channel[, arg1][, arg2][, ...])</code></a><a class="header-link" href="#ipcrenderersendsyncchannel-arg1-arg2-" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>channel</code> String</li>
<li><code>...args</code> any[]</li>
</ul>
<p>Returns <code>any</code> - The value sent back by the <a href="https://electronjs.org/docs/api/ipc-main"><code>ipcMain</code></a> handler.</p>
<p>Send a message to the main process synchronously via <code>channel</code>, you can also
send arbitrary arguments. Arguments will be serialized in JSON internally and
hence no functions or prototype chain will be included.</p>
<p>The main process handles it by listening for <code>channel</code> with <code>ipcMain</code> module,
and replies by setting <code>event.returnValue</code>.</p>
<p><strong>Note:</strong> Sending a synchronous message will block the whole renderer process,
unless you know what you are doing you should never use it.</p>
<h3 id="ipcrenderersendtowindowid-channel--arg1-arg2-"><a href="#ipcrenderersendtowindowid-channel--arg1-arg2-"><code>ipcRenderer.sendTo(windowId, channel, [, arg1][, arg2][, ...])</code></a><a class="header-link" href="#ipcrenderersendtowindowid-channel--arg1-arg2-" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>windowId</code> Number</li>
<li><code>channel</code> String</li>
<li><code>...args</code> any[]</li>
</ul>
<p>Sends a message to a window with <code>windowid</code> via <code>channel</code></p>
<h3 id="ipcrenderersendtohostchannel-arg1-arg2-"><a href="#ipcrenderersendtohostchannel-arg1-arg2-"><code>ipcRenderer.sendToHost(channel[, arg1][, arg2][, ...])</code></a><a class="header-link" href="#ipcrenderersendtohostchannel-arg1-arg2-" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>channel</code> String</li>
<li><code>...args</code> any[]</li>
</ul>
<p>Like <code>ipcRenderer.send</code> but the event will be sent to the <code>&lt;webview&gt;</code> element in
the host page instead of the main process.</p>

  <hr>
  <h1 id="jumplistcategory-object"><a href="#jumplistcategory-object">JumpListCategory Object</a><a class="header-link" href="#jumplistcategory-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li>
<p><code>type</code> String (optional) - One of the following:</p>
<ul>
<li><code>tasks</code> - Items in this category will be placed into the standard <code>Tasks</code>
category. There can be only one such category, and it will always be
displayed at the bottom of the Jump List.</li>
<li><code>frequent</code> - Displays a list of files frequently opened by the app, the
name of the category and its items are set by Windows.</li>
<li><code>recent</code> - Displays a list of files recently opened by the app, the name
of the category and its items are set by Windows. Items may be added to
this category indirectly using <code>app.addRecentDocument(path)</code>.</li>
<li><code>custom</code> - Displays tasks or file links, <code>name</code> must be set by the app.</li>
</ul>
</li>
<li><code>name</code> String (optional) - Must be set if <code>type</code> is <code>custom</code>, otherwise it should be
omitted.</li>
<li><code>items</code> JumpListItem<a href="https://electronjs.org/docs/api/structures/optional"></a> - Array of <a href="https://electronjs.org/docs/api/structures/jump-list-item"><code>JumpListItem</code></a> objects if <code>type</code> is <code>tasks</code> or
<code>custom</code>, otherwise it should be omitted.</li>
</ul>
<p><strong>Note:</strong> If a <code>JumpListCategory</code> object has neither the <code>type</code> nor the <code>name</code>
property set then its <code>type</code> is assumed to be <code>tasks</code>. If the <code>name</code> property
is set but the <code>type</code> property is omitted then the <code>type</code> is assumed to be
<code>custom</code>.</p>

  <hr>
  <h1 id="jumplistitem-object"><a href="#jumplistitem-object">JumpListItem Object</a><a class="header-link" href="#jumplistitem-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li>
<p><code>type</code> String (optional) - One of the following:</p>
<ul>
<li><code>task</code> - A task will launch an app with specific arguments.</li>
<li><code>separator</code> - Can be used to separate items in the standard <code>Tasks</code>
category.</li>
<li><code>file</code> - A file link will open a file using the app that created the
Jump List, for this to work the app must be registered as a handler for
the file type (though it doesn't have to be the default handler).</li>
</ul>
</li>
<li><code>path</code> String (optional) - Path of the file to open, should only be set if <code>type</code> is
<code>file</code>.</li>
<li><code>program</code> String (optional) - Path of the program to execute, usually you should
specify <code>process.execPath</code> which opens the current program. Should only be
set if <code>type</code> is <code>task</code>.</li>
<li><code>args</code> String (optional) - The command line arguments when <code>program</code> is executed. Should
only be set if <code>type</code> is <code>task</code>.</li>
<li><code>title</code> String (optional) - The text to be displayed for the item in the Jump List.
Should only be set if <code>type</code> is <code>task</code>.</li>
<li><code>description</code> String (optional) - Description of the task (displayed in a tooltip).
Should only be set if <code>type</code> is <code>task</code>.</li>
<li><code>iconPath</code> String (optional) - The absolute path to an icon to be displayed in a
Jump List, which can be an arbitrary resource file that contains an icon
(e.g. <code>.ico</code>, <code>.exe</code>, <code>.dll</code>). You can usually specify <code>process.execPath</code> to
show the program icon.</li>
<li><code>iconIndex</code> Number (optional) - The index of the icon in the resource file. If a
resource file contains multiple icons this value can be used to specify the
zero-based index of the icon that should be displayed for this task. If a
resource file contains only one icon, this property should be set to zero.</li>
</ul>

  <hr>
  <h1 id="keyboard-shortcuts"><a href="#keyboard-shortcuts">Keyboard Shortcuts</a><a class="header-link" href="#keyboard-shortcuts" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Configure local and global keyboard shortcuts</p>
</blockquote>
<h2 id="local-shortcuts"><a href="#local-shortcuts">Local Shortcuts</a><a class="header-link" href="#local-shortcuts" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>You can use the <a href="https://electronjs.org/docs/api/menu">Menu</a> module to configure keyboard shortcuts that will
be triggered only when the app is focused. To do so, specify an
<a href="https://electronjs.org/docs/api/accelerator"><code>accelerator</code></a> property when creating a <a href="https://electronjs.org/docs/api/menu-item">MenuItem</a>.</p>
<pre><code class="hljs language-js" id="_nau5u4ht"><span class="hljs-keyword">const</span> {Menu, MenuItem} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">const</span> menu = <span class="hljs-keyword">new</span> Menu()

menu.append(<span class="hljs-keyword">new</span> MenuItem({
  <span class="hljs-attr">label</span>: <span class="hljs-string">'Print'</span>,
  <span class="hljs-attr">accelerator</span>: <span class="hljs-string">'CmdOrCtrl+P'</span>,
  <span class="hljs-attr">click</span>: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> { <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'time to print stuff'</span>) }
}))</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_nau5u4ht">Copy</button></pre>
<p>It's easy to configure different key combinations based on the user's operating system.</p>
<pre><code class="hljs language-js" id="_byiza29">{
  <span class="hljs-attr">accelerator</span>: process.platform === <span class="hljs-string">'darwin'</span> ? <span class="hljs-string">'Alt+Cmd+I'</span> : <span class="hljs-string">'Ctrl+Shift+I'</span>
}</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_byiza29">Copy</button></pre>
<h2 id="global-shortcuts"><a href="#global-shortcuts">Global Shortcuts</a><a class="header-link" href="#global-shortcuts" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>You can use the <a href="https://electronjs.org/docs/api/global-shortcut">globalShortcut</a> module to detect keyboard events even when
the application does not have keyboard focus.</p>
<pre><code class="hljs language-js" id="_mtmn80c"><span class="hljs-keyword">const</span> {app, globalShortcut} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  globalShortcut.register(<span class="hljs-string">'CommandOrControl+X'</span>, () =&gt; {
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'CommandOrControl+X is pressed'</span>)
  })
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_mtmn80c">Copy</button></pre>
<h2 id="shortcuts-within-a-browserwindow"><a href="#shortcuts-within-a-browserwindow">Shortcuts within a BrowserWindow</a><a class="header-link" href="#shortcuts-within-a-browserwindow" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>If you want to handle keyboard shortcuts for a <a href="https://electronjs.org/docs/api/browser-window">BrowserWindow</a>, you can use the <code>keyup</code> and <code>keydown</code> event listeners on the window object inside the renderer process.</p>
<pre><code class="hljs language-js" id="_e0n60kk4"><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'keyup'</span>, doSomething, <span class="hljs-literal">true</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_e0n60kk4">Copy</button></pre>
<p>Note the third parameter <code>true</code> which means the listener will always receive key presses before other listeners so they can't have <code>stopPropagation()</code> called on them.</p>
<p>The <a href="https://electronjs.org/docs/api/web-contents#event-before-input-event"><code>before-input-event</code></a> event
is emitted before dispatching <code>keydown</code> and <code>keyup</code> events in the page. It can
be used to catch and handle custom shortcuts that are not visible in the menu.</p>
<p>If you don't want to do manual shortcut parsing there are libraries that do advanced key detection such as <a href="https://github.com/ccampbell/mousetrap">mousetrap</a>.</p>
<pre><code class="hljs language-js" id="_w7l8ibuq">Mousetrap.bind(<span class="hljs-string">'4'</span>, () =&gt; { <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'4'</span>) })
Mousetrap.bind(<span class="hljs-string">'?'</span>, () =&gt; { <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'show shortcuts!'</span>) })
Mousetrap.bind(<span class="hljs-string">'esc'</span>, () =&gt; { <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'escape'</span>) }, <span class="hljs-string">'keyup'</span>)

<span class="hljs-comment">// combinations</span>
Mousetrap.bind(<span class="hljs-string">'command+shift+k'</span>, () =&gt; { <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'command shift k'</span>) })

<span class="hljs-comment">// map multiple combinations to the same callback</span>
Mousetrap.bind([<span class="hljs-string">'command+k'</span>, <span class="hljs-string">'ctrl+k'</span>], () =&gt; {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'command k or control k'</span>)

  <span class="hljs-comment">// return false to prevent default behavior and stop event from bubbling</span>
  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>
})

<span class="hljs-comment">// gmail style sequences</span>
Mousetrap.bind(<span class="hljs-string">'g i'</span>, () =&gt; { <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'go to inbox'</span>) })
Mousetrap.bind(<span class="hljs-string">'* a'</span>, () =&gt; { <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'select all'</span>) })

<span class="hljs-comment">// konami code!</span>
Mousetrap.bind(<span class="hljs-string">'up up down down left right left right b a enter'</span>, () =&gt; {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'konami code'</span>)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_w7l8ibuq">Copy</button></pre>

  <hr>
  <h1 id="locales"><a href="#locales">Locales</a><a class="header-link" href="#locales" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Locale values returned by <code>app.getLocale()</code>.</p>
</blockquote>
<p>Electron uses Chromium's <code>l10n_util</code> library to fetch the locale. Possible
values are listed below:</p>
<table>
<thead>
<tr>
<th>Language Code</th>
<th>Language Name</th>
</tr>
</thead>
<tbody>
<tr>
<td>af</td>
<td>Afrikaans</td>
</tr>
<tr>
<td>am</td>
<td>Amharic</td>
</tr>
<tr>
<td>ar</td>
<td>Arabic</td>
</tr>
<tr>
<td>az</td>
<td>Azerbaijani</td>
</tr>
<tr>
<td>be</td>
<td>Belarusian</td>
</tr>
<tr>
<td>bg</td>
<td>Bulgarian</td>
</tr>
<tr>
<td>bh</td>
<td>Bihari</td>
</tr>
<tr>
<td>bn</td>
<td>Bengali</td>
</tr>
<tr>
<td>br</td>
<td>Breton</td>
</tr>
<tr>
<td>bs</td>
<td>Bosnian</td>
</tr>
<tr>
<td>ca</td>
<td>Catalan</td>
</tr>
<tr>
<td>co</td>
<td>Corsican</td>
</tr>
<tr>
<td>cs</td>
<td>Czech</td>
</tr>
<tr>
<td>cy</td>
<td>Welsh</td>
</tr>
<tr>
<td>da</td>
<td>Danish</td>
</tr>
<tr>
<td>de</td>
<td>German</td>
</tr>
<tr>
<td>de-AT</td>
<td>German (Austria)</td>
</tr>
<tr>
<td>de-CH</td>
<td>German (Switzerland)</td>
</tr>
<tr>
<td>de-DE</td>
<td>German (Germany)</td>
</tr>
<tr>
<td>el</td>
<td>Greek</td>
</tr>
<tr>
<td>en</td>
<td>English</td>
</tr>
<tr>
<td>en-AU</td>
<td>English (Australia)</td>
</tr>
<tr>
<td>en-CA</td>
<td>English (Canada)</td>
</tr>
<tr>
<td>en-GB</td>
<td>English (UK)</td>
</tr>
<tr>
<td>en-NZ</td>
<td>English (New Zealand)</td>
</tr>
<tr>
<td>en-US</td>
<td>English (US)</td>
</tr>
<tr>
<td>en-ZA</td>
<td>English (South Africa)</td>
</tr>
<tr>
<td>eo</td>
<td>Esperanto</td>
</tr>
<tr>
<td>es</td>
<td>Spanish</td>
</tr>
<tr>
<td>es-419</td>
<td>Spanish (Latin America)</td>
</tr>
<tr>
<td>et</td>
<td>Estonian</td>
</tr>
<tr>
<td>eu</td>
<td>Basque</td>
</tr>
<tr>
<td>fa</td>
<td>Persian</td>
</tr>
<tr>
<td>fi</td>
<td>Finnish</td>
</tr>
<tr>
<td>fil</td>
<td>Filipino</td>
</tr>
<tr>
<td>fo</td>
<td>Faroese</td>
</tr>
<tr>
<td>fr</td>
<td>French</td>
</tr>
<tr>
<td>fr-CA</td>
<td>French (Canada)</td>
</tr>
<tr>
<td>fr-CH</td>
<td>French (Switzerland)</td>
</tr>
<tr>
<td>fr-FR</td>
<td>French (France)</td>
</tr>
<tr>
<td>fy</td>
<td>Frisian</td>
</tr>
<tr>
<td>ga</td>
<td>Irish</td>
</tr>
<tr>
<td>gd</td>
<td>Scots Gaelic</td>
</tr>
<tr>
<td>gl</td>
<td>Galician</td>
</tr>
<tr>
<td>gn</td>
<td>Guarani</td>
</tr>
<tr>
<td>gu</td>
<td>Gujarati</td>
</tr>
<tr>
<td>ha</td>
<td>Hausa</td>
</tr>
<tr>
<td>haw</td>
<td>Hawaiian</td>
</tr>
<tr>
<td>he</td>
<td>Hebrew</td>
</tr>
<tr>
<td>hi</td>
<td>Hindi</td>
</tr>
<tr>
<td>hr</td>
<td>Croatian</td>
</tr>
<tr>
<td>hu</td>
<td>Hungarian</td>
</tr>
<tr>
<td>hy</td>
<td>Armenian</td>
</tr>
<tr>
<td>ia</td>
<td>Interlingua</td>
</tr>
<tr>
<td>id</td>
<td>Indonesian</td>
</tr>
<tr>
<td>is</td>
<td>Icelandic</td>
</tr>
<tr>
<td>it</td>
<td>Italian</td>
</tr>
<tr>
<td>it-CH</td>
<td>Italian (Switzerland)</td>
</tr>
<tr>
<td>it-IT</td>
<td>Italian (Italy)</td>
</tr>
<tr>
<td>ja</td>
<td>Japanese</td>
</tr>
<tr>
<td>jw</td>
<td>Javanese</td>
</tr>
<tr>
<td>ka</td>
<td>Georgian</td>
</tr>
<tr>
<td>kk</td>
<td>Kazakh</td>
</tr>
<tr>
<td>km</td>
<td>Cambodian</td>
</tr>
<tr>
<td>kn</td>
<td>Kannada</td>
</tr>
<tr>
<td>ko</td>
<td>Korean</td>
</tr>
<tr>
<td>ku</td>
<td>Kurdish</td>
</tr>
<tr>
<td>ky</td>
<td>Kyrgyz</td>
</tr>
<tr>
<td>la</td>
<td>Latin</td>
</tr>
<tr>
<td>ln</td>
<td>Lingala</td>
</tr>
<tr>
<td>lo</td>
<td>Laothian</td>
</tr>
<tr>
<td>lt</td>
<td>Lithuanian</td>
</tr>
<tr>
<td>lv</td>
<td>Latvian</td>
</tr>
<tr>
<td>mk</td>
<td>Macedonian</td>
</tr>
<tr>
<td>ml</td>
<td>Malayalam</td>
</tr>
<tr>
<td>mn</td>
<td>Mongolian</td>
</tr>
<tr>
<td>mo</td>
<td>Moldavian</td>
</tr>
<tr>
<td>mr</td>
<td>Marathi</td>
</tr>
<tr>
<td>ms</td>
<td>Malay</td>
</tr>
<tr>
<td>mt</td>
<td>Maltese</td>
</tr>
<tr>
<td>nb</td>
<td>Norwegian (Bokmal)</td>
</tr>
<tr>
<td>ne</td>
<td>Nepali</td>
</tr>
<tr>
<td>nl</td>
<td>Dutch</td>
</tr>
<tr>
<td>nn</td>
<td>Norwegian (Nynorsk)</td>
</tr>
<tr>
<td>no</td>
<td>Norwegian</td>
</tr>
<tr>
<td>oc</td>
<td>Occitan</td>
</tr>
<tr>
<td>om</td>
<td>Oromo</td>
</tr>
<tr>
<td>or</td>
<td>Oriya</td>
</tr>
<tr>
<td>pa</td>
<td>Punjabi</td>
</tr>
<tr>
<td>pl</td>
<td>Polish</td>
</tr>
<tr>
<td>ps</td>
<td>Pashto</td>
</tr>
<tr>
<td>pt</td>
<td>Portuguese</td>
</tr>
<tr>
<td>pt-BR</td>
<td>Portuguese (Brazil)</td>
</tr>
<tr>
<td>pt-PT</td>
<td>Portuguese (Portugal)</td>
</tr>
<tr>
<td>qu</td>
<td>Quechua</td>
</tr>
<tr>
<td>rm</td>
<td>Romansh</td>
</tr>
<tr>
<td>ro</td>
<td>Romanian</td>
</tr>
<tr>
<td>ru</td>
<td>Russian</td>
</tr>
<tr>
<td>sd</td>
<td>Sindhi</td>
</tr>
<tr>
<td>sh</td>
<td>Serbo-Croatian</td>
</tr>
<tr>
<td>si</td>
<td>Sinhalese</td>
</tr>
<tr>
<td>sk</td>
<td>Slovak</td>
</tr>
<tr>
<td>sl</td>
<td>Slovenian</td>
</tr>
<tr>
<td>sn</td>
<td>Shona</td>
</tr>
<tr>
<td>so</td>
<td>Somali</td>
</tr>
<tr>
<td>sq</td>
<td>Albanian</td>
</tr>
<tr>
<td>sr</td>
<td>Serbian</td>
</tr>
<tr>
<td>st</td>
<td>Sesotho</td>
</tr>
<tr>
<td>su</td>
<td>Sundanese</td>
</tr>
<tr>
<td>sv</td>
<td>Swedish</td>
</tr>
<tr>
<td>sw</td>
<td>Swahili</td>
</tr>
<tr>
<td>ta</td>
<td>Tamil</td>
</tr>
<tr>
<td>te</td>
<td>Telugu</td>
</tr>
<tr>
<td>tg</td>
<td>Tajik</td>
</tr>
<tr>
<td>th</td>
<td>Thai</td>
</tr>
<tr>
<td>ti</td>
<td>Tigrinya</td>
</tr>
<tr>
<td>tk</td>
<td>Turkmen</td>
</tr>
<tr>
<td>to</td>
<td>Tonga</td>
</tr>
<tr>
<td>tr</td>
<td>Turkish</td>
</tr>
<tr>
<td>tt</td>
<td>Tatar</td>
</tr>
<tr>
<td>tw</td>
<td>Twi</td>
</tr>
<tr>
<td>ug</td>
<td>Uighur</td>
</tr>
<tr>
<td>uk</td>
<td>Ukrainian</td>
</tr>
<tr>
<td>ur</td>
<td>Urdu</td>
</tr>
<tr>
<td>uz</td>
<td>Uzbek</td>
</tr>
<tr>
<td>vi</td>
<td>Vietnamese</td>
</tr>
<tr>
<td>xh</td>
<td>Xhosa</td>
</tr>
<tr>
<td>yi</td>
<td>Yiddish</td>
</tr>
<tr>
<td>yo</td>
<td>Yoruba</td>
</tr>
<tr>
<td>zh</td>
<td>Chinese</td>
</tr>
<tr>
<td>zh-CN</td>
<td>Chinese (Simplified)</td>
</tr>
<tr>
<td>zh-TW</td>
<td>Chinese (Traditional)</td>
</tr>
<tr>
<td>zu</td>
<td>Zulu</td>
</tr>
</tbody>
</table>

  <hr>
  <h1 id="mac-app-store-submission-guide"><a href="#mac-app-store-submission-guide">Mac App Store Submission Guide</a><a class="header-link" href="#mac-app-store-submission-guide" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>Since v0.34.0, Electron allows submitting packaged apps to the Mac App Store
(MAS). This guide provides information on: how to submit your app and the
limitations of the MAS build.</p>
<p><strong>Note:</strong> Submitting an app to Mac App Store requires enrolling <a href="https://developer.apple.com/support/compare-memberships/">Apple Developer
Program</a>, which costs money.</p>
<h2 id="how-to-submit-your-app"><a href="#how-to-submit-your-app">How to Submit Your App</a><a class="header-link" href="#how-to-submit-your-app" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The following steps introduce a simple way to submit your app to Mac App Store.
However, these steps do not ensure your app will be approved by Apple; you
still need to read Apple's <a href="https://developer.apple.com/library/mac/documentation/IDEs/Conceptual/AppDistributionGuide/SubmittingYourApp/SubmittingYourApp.html">Submitting Your App</a> guide on
how to meet the Mac App Store requirements.</p>
<h3 id="get-certificate"><a href="#get-certificate">Get Certificate</a><a class="header-link" href="#get-certificate" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>To submit your app to the Mac App Store, you first must get a certificate from
Apple. You can follow these <a href="https://github.com/nwjs/nw.js/wiki/Mac-App-Store-(MAS)-Submission-Guideline#first-steps">existing guides</a> on web.</p>
<h3 id="get-team-id"><a href="#get-team-id">Get Team ID</a><a class="header-link" href="#get-team-id" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Before signing your app, you need to know the Team ID of your account. To locate
your Team ID, Sign in to <a href="https://developer.apple.com/account/">Apple Developer Center</a>,
and click Membership in the sidebar. Your Team ID appears in the Membership
Information section under the team name.</p>
<h3 id="sign-your-app"><a href="#sign-your-app">Sign Your App</a><a class="header-link" href="#sign-your-app" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>After finishing the preparation work, you can package your app by following
<a href="https://electronjs.org/docs/tutorial/application-distribution">Application Distribution</a>, and then proceed to
signing your app.</p>
<p>First, you have to add a <code>ElectronTeamID</code> key to your app's <code>Info.plist</code>, which
has your Team ID as value:</p>
<pre><code class="hljs language-xml" id="_21a42wxf"><span class="hljs-tag">&lt;<span class="hljs-name">plist</span> <span class="hljs-attr">version</span>=<span class="hljs-string">"1.0"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">dict</span>&gt;</span>
  ...
  <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>ElectronTeamID<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>TEAM_ID<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dict</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">plist</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_21a42wxf">Copy</button></pre>
<p>Then, you need to prepare three entitlements files.</p>
<p><code>child.plist</code>:</p>
<pre><code class="hljs language-xml" id="_lpz6pnv"><span class="php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span><span class="hljs-meta">?&gt;</span></span>
<span class="hljs-meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">plist</span> <span class="hljs-attr">version</span>=<span class="hljs-string">"1.0"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">dict</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>com.apple.security.app-sandbox<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">true</span>/&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>com.apple.security.inherit<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">true</span>/&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">dict</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">plist</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_lpz6pnv">Copy</button></pre>
<p><code>parent.plist</code>:</p>
<pre><code class="hljs language-xml" id="_c4gpgxek"><span class="php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span><span class="hljs-meta">?&gt;</span></span>
<span class="hljs-meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">plist</span> <span class="hljs-attr">version</span>=<span class="hljs-string">"1.0"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">dict</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>com.apple.security.app-sandbox<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">true</span>/&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>com.apple.security.application-groups<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>TEAM_ID.your.bundle.id<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">dict</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">plist</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_c4gpgxek">Copy</button></pre>
<p><code>loginhelper.plist</code>:</p>
<pre><code class="hljs language-xml" id="_t1fk0qlf"><span class="php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span><span class="hljs-meta">?&gt;</span></span>
<span class="hljs-meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">plist</span> <span class="hljs-attr">version</span>=<span class="hljs-string">"1.0"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">dict</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>com.apple.security.app-sandbox<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">true</span>/&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">dict</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">plist</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_t1fk0qlf">Copy</button></pre>
<p>You have to replace <code>TEAM_ID</code> with your Team ID, and replace <code>your.bundle.id</code>
with the Bundle ID of your app.</p>
<p>And then sign your app with the following script:</p>
<pre><code class="hljs language-sh" id="_pqy57e6g"><span class="hljs-meta">#!/bin/bash
</span>
<span class="hljs-comment"># Name of your app.</span>
APP=<span class="hljs-string">"YourApp"</span>
<span class="hljs-comment"># The path of your app to sign.</span>
APP_PATH=<span class="hljs-string">"/path/to/YourApp.app"</span>
<span class="hljs-comment"># The path to the location you want to put the signed package.</span>
RESULT_PATH=<span class="hljs-string">"~/Desktop/<span class="hljs-variable">$APP</span>.pkg"</span>
<span class="hljs-comment"># The name of certificates you requested.</span>
APP_KEY=<span class="hljs-string">"3rd Party Mac Developer Application: Company Name (APPIDENTITY)"</span>
INSTALLER_KEY=<span class="hljs-string">"3rd Party Mac Developer Installer: Company Name (APPIDENTITY)"</span>
<span class="hljs-comment"># The path of your plist files.</span>
CHILD_PLIST=<span class="hljs-string">"/path/to/child.plist"</span>
PARENT_PLIST=<span class="hljs-string">"/path/to/parent.plist"</span>
LOGINHELPER_PLIST=<span class="hljs-string">"/path/to/loginhelper.plist"</span>

FRAMEWORKS_PATH=<span class="hljs-string">"<span class="hljs-variable">$APP_PATH</span>/Contents/Frameworks"</span>

codesign -s <span class="hljs-string">"<span class="hljs-variable">$APP_KEY</span>"</span> -f --entitlements <span class="hljs-string">"<span class="hljs-variable">$CHILD_PLIST</span>"</span> <span class="hljs-string">"<span class="hljs-variable">$FRAMEWORKS_PATH</span>/Electron Framework.framework/Versions/A/Electron Framework"</span>
codesign -s <span class="hljs-string">"<span class="hljs-variable">$APP_KEY</span>"</span> -f --entitlements <span class="hljs-string">"<span class="hljs-variable">$CHILD_PLIST</span>"</span> <span class="hljs-string">"<span class="hljs-variable">$FRAMEWORKS_PATH</span>/Electron Framework.framework/Versions/A/Libraries/libffmpeg.dylib"</span>
codesign -s <span class="hljs-string">"<span class="hljs-variable">$APP_KEY</span>"</span> -f --entitlements <span class="hljs-string">"<span class="hljs-variable">$CHILD_PLIST</span>"</span> <span class="hljs-string">"<span class="hljs-variable">$FRAMEWORKS_PATH</span>/Electron Framework.framework/Versions/A/Libraries/libnode.dylib"</span>
codesign -s <span class="hljs-string">"<span class="hljs-variable">$APP_KEY</span>"</span> -f --entitlements <span class="hljs-string">"<span class="hljs-variable">$CHILD_PLIST</span>"</span> <span class="hljs-string">"<span class="hljs-variable">$FRAMEWORKS_PATH</span>/Electron Framework.framework"</span>
codesign -s <span class="hljs-string">"<span class="hljs-variable">$APP_KEY</span>"</span> -f --entitlements <span class="hljs-string">"<span class="hljs-variable">$CHILD_PLIST</span>"</span> <span class="hljs-string">"<span class="hljs-variable">$FRAMEWORKS_PATH</span>/<span class="hljs-variable">$APP</span> Helper.app/Contents/MacOS/<span class="hljs-variable">$APP</span> Helper"</span>
codesign -s <span class="hljs-string">"<span class="hljs-variable">$APP_KEY</span>"</span> -f --entitlements <span class="hljs-string">"<span class="hljs-variable">$CHILD_PLIST</span>"</span> <span class="hljs-string">"<span class="hljs-variable">$FRAMEWORKS_PATH</span>/<span class="hljs-variable">$APP</span> Helper.app/"</span>
codesign -s <span class="hljs-string">"<span class="hljs-variable">$APP_KEY</span>"</span> -f --entitlements <span class="hljs-string">"<span class="hljs-variable">$CHILD_PLIST</span>"</span> <span class="hljs-string">"<span class="hljs-variable">$FRAMEWORKS_PATH</span>/<span class="hljs-variable">$APP</span> Helper EH.app/Contents/MacOS/<span class="hljs-variable">$APP</span> Helper EH"</span>
codesign -s <span class="hljs-string">"<span class="hljs-variable">$APP_KEY</span>"</span> -f --entitlements <span class="hljs-string">"<span class="hljs-variable">$CHILD_PLIST</span>"</span> <span class="hljs-string">"<span class="hljs-variable">$FRAMEWORKS_PATH</span>/<span class="hljs-variable">$APP</span> Helper EH.app/"</span>
codesign -s <span class="hljs-string">"<span class="hljs-variable">$APP_KEY</span>"</span> -f --entitlements <span class="hljs-string">"<span class="hljs-variable">$CHILD_PLIST</span>"</span> <span class="hljs-string">"<span class="hljs-variable">$FRAMEWORKS_PATH</span>/<span class="hljs-variable">$APP</span> Helper NP.app/Contents/MacOS/<span class="hljs-variable">$APP</span> Helper NP"</span>
codesign -s <span class="hljs-string">"<span class="hljs-variable">$APP_KEY</span>"</span> -f --entitlements <span class="hljs-string">"<span class="hljs-variable">$CHILD_PLIST</span>"</span> <span class="hljs-string">"<span class="hljs-variable">$FRAMEWORKS_PATH</span>/<span class="hljs-variable">$APP</span> Helper NP.app/"</span>
codesign -s <span class="hljs-string">"<span class="hljs-variable">$APP_KEY</span>"</span> -f --entitlements <span class="hljs-string">"<span class="hljs-variable">$LOGINHELPER_PLIST</span>"</span> <span class="hljs-string">"<span class="hljs-variable">$APP_PATH</span>/Contents/Library/LoginItems/<span class="hljs-variable">$APP</span> Login Helper.app/Contents/MacOS/<span class="hljs-variable">$APP</span> Login Helper"</span>
codesign -s <span class="hljs-string">"<span class="hljs-variable">$APP_KEY</span>"</span> -f --entitlements <span class="hljs-string">"<span class="hljs-variable">$LOGINHELPER_PLIST</span>"</span> <span class="hljs-string">"<span class="hljs-variable">$APP_PATH</span>/Contents/Library/LoginItems/<span class="hljs-variable">$APP</span> Login Helper.app/"</span>
codesign -s <span class="hljs-string">"<span class="hljs-variable">$APP_KEY</span>"</span> -f --entitlements <span class="hljs-string">"<span class="hljs-variable">$CHILD_PLIST</span>"</span> <span class="hljs-string">"<span class="hljs-variable">$APP_PATH</span>/Contents/MacOS/<span class="hljs-variable">$APP</span>"</span>
codesign -s <span class="hljs-string">"<span class="hljs-variable">$APP_KEY</span>"</span> -f --entitlements <span class="hljs-string">"<span class="hljs-variable">$PARENT_PLIST</span>"</span> <span class="hljs-string">"<span class="hljs-variable">$APP_PATH</span>"</span>

productbuild --component <span class="hljs-string">"<span class="hljs-variable">$APP_PATH</span>"</span> /Applications --sign <span class="hljs-string">"<span class="hljs-variable">$INSTALLER_KEY</span>"</span> <span class="hljs-string">"<span class="hljs-variable">$RESULT_PATH</span>"</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_pqy57e6g">Copy</button></pre>
<p>If you are new to app sandboxing under macOS, you should also read through
Apple's <a href="https://developer.apple.com/library/ios/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html">Enabling App Sandbox</a> to have a basic idea, then
add keys for the permissions needed by your app to the entitlements files.</p>
<p>Apart from manually signing your app, you can also choose to use the
<a href="https://github.com/electron-userland/electron-osx-sign">electron-osx-sign</a> module to do the job.</p>
<h4 id="sign-native-modules"><a href="#sign-native-modules">Sign Native Modules</a><a class="header-link" href="#sign-native-modules" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Native modules used in your app also need to be signed. If using
electron-osx-sign, be sure to include the path to the built binaries in the
argument list:</p>
<pre><code class="hljs language-sh" id="_l09cfy5t">electron-osx-sign YourApp.app YourApp.app/Contents/Resources/app/node_modules/nativemodule/build/release/nativemodule</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_l09cfy5t">Copy</button></pre>
<p>Also note that native modules may have intermediate files produced which should
not be included (as they would also need to be signed). If you use
<a href="https://github.com/electron-userland/electron-packager">electron-packager</a> before version 8.1.0, add
<code>--ignore=.+\.o$</code> to your build step to ignore these files. Versions 8.1.0 and
later ignores those files by default.</p>
<h3 id="upload-your-app"><a href="#upload-your-app">Upload Your App</a><a class="header-link" href="#upload-your-app" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>After signing your app, you can use Application Loader to upload it to iTunes
Connect for processing, making sure you have <a href="https://developer.apple.com/library/ios/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/CreatingiTunesConnectRecord.html">created a record</a>
before uploading.</p>
<h3 id="submit-your-app-for-review"><a href="#submit-your-app-for-review">Submit Your App for Review</a><a class="header-link" href="#submit-your-app-for-review" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>After these steps, you can <a href="https://developer.apple.com/library/ios/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/SubmittingTheApp.html">submit your app for review</a>.</p>
<h2 id="limitations-of-mas-build"><a href="#limitations-of-mas-build">Limitations of MAS Build</a><a class="header-link" href="#limitations-of-mas-build" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>In order to satisfy all requirements for app sandboxing, the following modules
have been disabled in the MAS build:</p>
<ul>
<li><code>crashReporter</code></li>
<li><code>autoUpdater</code></li>
</ul>
<p>and the following behaviors have been changed:</p>
<ul>
<li>Video capture may not work for some machines.</li>
<li>Certain accessibility features may not work.</li>
<li>Apps will not be aware of DNS changes.</li>
</ul>
<p>Also, due to the usage of app sandboxing, the resources which can be accessed by
the app are strictly limited; you can read <a href="https://developer.apple.com/app-sandboxing/">App Sandboxing</a> for
more information.</p>
<h3 id="additional-entitlements"><a href="#additional-entitlements">Additional Entitlements</a><a class="header-link" href="#additional-entitlements" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Depending on which Electron APIs your app uses, you may need to add additional
entitlements to your <code>parent.plist</code> file to be able to use these APIs from your
app's Mac App Store build.</p>
<h4 id="network-access"><a href="#network-access">Network Access</a><a class="header-link" href="#network-access" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Enable outgoing network connections to allow your app to connect to a server:</p>
<pre><code class="hljs language-xml" id="_zx8r9xi"><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>com.apple.security.network.client<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">true</span>/&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_zx8r9xi">Copy</button></pre>
<p>Enable incoming network connections to allow your app to open a network
listening socket:</p>
<pre><code class="hljs language-xml" id="_v4y078zs"><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>com.apple.security.network.server<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">true</span>/&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_v4y078zs">Copy</button></pre>
<p>See the <a href="https://developer.apple.com/library/ios/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html#//apple_ref/doc/uid/TP40011195-CH4-SW9">Enabling Network Access documentation</a> for more
details.</p>
<h4 id="dialogshowopendialog"><a href="#dialogshowopendialog">dialog.showOpenDialog</a><a class="header-link" href="#dialogshowopendialog" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<pre><code class="hljs language-xml" id="_3ltsif69"><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>com.apple.security.files.user-selected.read-only<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">true</span>/&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_3ltsif69">Copy</button></pre>
<p>See the <a href="https://developer.apple.com/library/mac/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html#//apple_ref/doc/uid/TP40011195-CH4-SW6">Enabling User-Selected File Access documentation</a> for
more details.</p>
<h4 id="dialogshowsavedialog"><a href="#dialogshowsavedialog">dialog.showSaveDialog</a><a class="header-link" href="#dialogshowsavedialog" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<pre><code class="hljs language-xml" id="_pv0h806qv"><span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>com.apple.security.files.user-selected.read-write<span class="hljs-tag">&lt;/<span class="hljs-name">key</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">true</span>/&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_pv0h806qv">Copy</button></pre>
<p>See the <a href="https://developer.apple.com/library/mac/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html#//apple_ref/doc/uid/TP40011195-CH4-SW6">Enabling User-Selected File Access documentation</a> for
more details.</p>
<h2 id="known-issues"><a href="#known-issues">Known issues</a><a class="header-link" href="#known-issues" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<h3 id="shellopenitemfilepath"><a href="#shellopenitemfilepath"><code>shell.openItem(filePath)</code></a><a class="header-link" href="#shellopenitemfilepath" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>This will fail when the app is signed for distribution in the Mac App Store.
Subscribe to <a href="https://github.com/electron/electron/issues/9005">#9005</a> for updates.</p>
<h4 id="workaround"><a href="#workaround">Workaround</a><a class="header-link" href="#workaround" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p><code>shell.openExternal('file://' + filePath)</code> will open the file in the default application as long as the extension is associated with an installed app.</p>
<h2 id="cryptographic-algorithms-used-by-electron"><a href="#cryptographic-algorithms-used-by-electron">Cryptographic Algorithms Used by Electron</a><a class="header-link" href="#cryptographic-algorithms-used-by-electron" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Depending on the country and region you are located, Mac App Store may require
documenting the cryptographic algorithms used in your app, and even ask you to
submit a copy of U.S. Encryption Registration (ERN) approval.</p>
<p>Electron uses following cryptographic algorithms:</p>
<ul>
<li>AES - <a href="https://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf">NIST SP 800-38A</a>, <a href="https://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf">NIST SP 800-38D</a>, <a href="https://www.ietf.org/rfc/rfc3394.txt">RFC 3394</a></li>
<li>HMAC - <a href="https://csrc.nist.gov/publications/fips/fips198-1/FIPS-198-1_final.pdf">FIPS 198-1</a></li>
<li>ECDSA - ANS X9.62–2005</li>
<li>ECDH - ANS X9.63–2001</li>
<li>HKDF - <a href="https://csrc.nist.gov/publications/nistpubs/800-56C/SP-800-56C.pdf">NIST SP 800-56C</a></li>
<li>PBKDF2 - <a href="https://tools.ietf.org/html/rfc2898">RFC 2898</a></li>
<li>RSA - <a href="http://www.ietf.org/rfc/rfc3447">RFC 3447</a></li>
<li>SHA - <a href="https://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf">FIPS 180-4</a></li>
<li>Blowfish - <a href="https://www.schneier.com/cryptography/blowfish/">schneier.com/cryptography/blowfish</a></li>
<li>CAST - <a href="https://tools.ietf.org/html/rfc2144">RFC 2144</a>, <a href="https://tools.ietf.org/html/rfc2612">RFC 2612</a></li>
<li>DES - <a href="https://csrc.nist.gov/publications/fips/fips46-3/fips46-3.pdf">FIPS 46-3</a></li>
<li>DH - <a href="https://tools.ietf.org/html/rfc2631">RFC 2631</a></li>
<li>DSA - <a href="https://webstore.ansi.org/RecordDetail.aspx?sku=ANSI+X9.30-1%253A1997">ANSI X9.30</a></li>
<li>EC - <a href="http://www.secg.org/sec1-v2.pdf">SEC 1</a></li>
<li>IDEA - "On the Design and Security of Block Ciphers" book by X. Lai</li>
<li>MD2 - <a href="https://tools.ietf.org/html/rfc1319">RFC 1319</a></li>
<li>MD4 - <a href="https://tools.ietf.org/html/rfc6150">RFC 6150</a></li>
<li>MD5 - <a href="https://tools.ietf.org/html/rfc1321">RFC 1321</a></li>
<li>MDC2 - <a href="https://wiki.openssl.org/index.php/Manual:Mdc2(3)">ISO/IEC 10118-2</a></li>
<li>RC2 - <a href="https://tools.ietf.org/html/rfc2268">RFC 2268</a></li>
<li>RC4 - <a href="https://tools.ietf.org/html/rfc4345">RFC 4345</a></li>
<li>RC5 - <a href="http://people.csail.mit.edu/rivest/Rivest-rc5rev.pdf">people.csail.mit.edu/rivest/Rivest-rc5rev.pdf</a></li>
<li>RIPEMD - <a href="https://webstore.ansi.org/RecordDetail.aspx?sku=ISO%252FIEC%2010118-3:2004">ISO/IEC 10118-3</a></li>
</ul>
<p>On how to get the ERN approval, you can reference the article: <a href="https://carouselapps.com/2015/12/15/legally-submit-app-apples-app-store-uses-encryption-obtain-ern/">How to legally
submit an app to Apple’s App Store when it uses encryption (or how to obtain an
ERN)</a>.</p>

  <hr>
  <h1 id="memoryinfo-object"><a href="#memoryinfo-object">MemoryInfo Object</a><a class="header-link" href="#memoryinfo-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>pid</code> Integer - Process id of the process.</li>
<li><code>workingSetSize</code> Integer - The amount of memory currently pinned to actual physical RAM.</li>
<li><code>peakWorkingSetSize</code> Integer - The maximum amount of memory that has ever been pinned
to actual physical RAM. On macOS its value will always be 0.</li>
<li><code>privateBytes</code> Integer - The amount of memory not shared by other processes, such as
JS heap or HTML content.</li>
<li><code>sharedBytes</code> Integer - The amount of memory shared between processes, typically
memory consumed by the Electron code itself</li>
</ul>
<p>Note that all statistics are reported in Kilobytes.</p>

  <hr>
  <h1 id="memoryusagedetails-object"><a href="#memoryusagedetails-object">MemoryUsageDetails Object</a><a class="header-link" href="#memoryusagedetails-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>count</code> Number</li>
<li><code>size</code> Number</li>
<li><code>liveSize</code> Number</li>
</ul>

  <hr>
  <h2 id="class-menu"><a href="#class-menu">Class: Menu</a><a class="header-link" href="#class-menu" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>Create native application menus and context menus.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<h3 id="new-menu"><a href="#new-menu"><code>new Menu()</code></a><a class="header-link" href="#new-menu" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Creates a new menu.</p>
<h3 id="static-methods"><a href="#static-methods">Static Methods</a><a class="header-link" href="#static-methods" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The <code>menu</code> class has the following static methods:</p>
<h4 id="menusetapplicationmenumenu"><a href="#menusetapplicationmenumenu"><code>Menu.setApplicationMenu(menu)</code></a><a class="header-link" href="#menusetapplicationmenumenu" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>menu</code> Menu | null</li>
</ul>
<p>Sets <code>menu</code> as the application menu on macOS. On Windows and Linux, the
<code>menu</code> will be set as each window's top menu.</p>
<p>Passing <code>null</code> will remove the menu bar on Windows and Linux but has no
effect on macOS.</p>
<p><strong>Note:</strong> This API has to be called after the <code>ready</code> event of <code>app</code> module.</p>
<h4 id="menugetapplicationmenu"><a href="#menugetapplicationmenu"><code>Menu.getApplicationMenu()</code></a><a class="header-link" href="#menugetapplicationmenu" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Menu | null</code> - The application menu, if set, or <code>null</code>, if not set.</p>
<p><strong>Note:</strong> The returned <code>Menu</code> instance doesn't support dynamic addition or
removal of menu items. <a href="#instance-properties">Instance properties</a> can still
be dynamically modified.</p>
<h4 id="menusendactiontofirstresponderaction-macos"><a href="#menusendactiontofirstresponderaction-macos"><code>Menu.sendActionToFirstResponder(action)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#menusendactiontofirstresponderaction-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>action</code> String</li>
</ul>
<p>Sends the <code>action</code> to the first responder of application. This is used for
emulating default macOS menu behaviors. Usually you would just use the
<a href="https://electronjs.org/docs/api/menu-item#roles"><code>role</code></a> property of a <a href="https://electronjs.org/docs/api/menu-item"><code>MenuItem</code></a>.</p>
<p>See the <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/EventOverview/EventArchitecture/EventArchitecture.html#//apple_ref/doc/uid/10000060i-CH3-SW7">macOS Cocoa Event Handling Guide</a>
for more information on macOS' native actions.</p>
<h4 id="menubuildfromtemplatetemplate"><a href="#menubuildfromtemplatetemplate"><code>Menu.buildFromTemplate(template)</code></a><a class="header-link" href="#menubuildfromtemplatetemplate" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>template</code> MenuItemConstructorOptions[]</li>
</ul>
<p>Returns <code>Menu</code></p>
<p>Generally, the <code>template</code> is just an array of <code>options</code> for constructing a
<a href="https://electronjs.org/docs/api/menu-item">MenuItem</a>. The usage can be referenced above.</p>
<p>You can also attach other fields to the element of the <code>template</code> and they
will become properties of the constructed menu items.</p>
<h3 id="instance-methods"><a href="#instance-methods">Instance Methods</a><a class="header-link" href="#instance-methods" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The <code>menu</code> object has the following instance methods:</p>
<h4 id="menupopupbrowserwindow-options"><a href="#menupopupbrowserwindow-options"><code>menu.popup([browserWindow, options])</code></a><a class="header-link" href="#menupopupbrowserwindow-options" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>browserWindow</code> BrowserWindow (optional) - Default is the focused window.</li>
<li>
<p><code>options</code> Object (optional)</p>
<ul>
<li><code>x</code> Number (optional) - Default is the current mouse cursor position.
Must be declared if <code>y</code> is declared.</li>
<li><code>y</code> Number (optional) - Default is the current mouse cursor position.
Must be declared if <code>x</code> is declared.</li>
<li><code>async</code> Boolean (optional) - Set to <code>true</code> to have this method return
immediately called, <code>false</code> to return after the menu has been selected
or closed. Defaults to <code>false</code>.</li>
<li><code>positioningItem</code> Number (optional) <em class="platform-label">macOS</em> - The index of the menu item to
be positioned under the mouse cursor at the specified coordinates. Default
is -1.</li>
</ul>
</li>
</ul>
<p>Pops up this menu as a context menu in the <code>browserWindow</code>.</p>
<h4 id="menuclosepopupbrowserwindow"><a href="#menuclosepopupbrowserwindow"><code>menu.closePopup([browserWindow])</code></a><a class="header-link" href="#menuclosepopupbrowserwindow" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>browserWindow</code> BrowserWindow (optional) - Default is the focused window.</li>
</ul>
<p>Closes the context menu in the <code>browserWindow</code>.</p>
<h4 id="menuappendmenuitem"><a href="#menuappendmenuitem"><code>menu.append(menuItem)</code></a><a class="header-link" href="#menuappendmenuitem" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>menuItem</code> MenuItem</li>
</ul>
<p>Appends the <code>menuItem</code> to the menu.</p>
<h4 id="menugetmenuitembyidid"><a href="#menugetmenuitembyidid"><code>menu.getMenuItemById(id)</code></a><a class="header-link" href="#menugetmenuitembyidid" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>id</code> String</li>
</ul>
<p>Returns <code>MenuItem</code> the item with the specified <code>id</code></p>
<h4 id="menuinsertpos-menuitem"><a href="#menuinsertpos-menuitem"><code>menu.insert(pos, menuItem)</code></a><a class="header-link" href="#menuinsertpos-menuitem" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>pos</code> Integer</li>
<li><code>menuItem</code> MenuItem</li>
</ul>
<p>Inserts the <code>menuItem</code> to the <code>pos</code> position of the menu.</p>
<h3 id="instance-properties"><a href="#instance-properties">Instance Properties</a><a class="header-link" href="#instance-properties" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p><code>menu</code> objects also have the following properties:</p>
<h4 id="menuitems"><a href="#menuitems"><code>menu.items</code></a><a class="header-link" href="#menuitems" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>MenuItem[]</code> array containing the menu's items.</p>
<p>Each <code>Menu</code> consists of multiple <a href="https://electronjs.org/docs/api/menu-item"><code>MenuItem</code></a>s and each <code>MenuItem</code>
can have a submenu.</p>
<h2 id="examples"><a href="#examples">Examples</a><a class="header-link" href="#examples" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>Menu</code> class is only available in the main process, but you can also use it
in the render process via the <a href="https://electronjs.org/docs/api/remote"><code>remote</code></a> module.</p>
<h3 id="main-process"><a href="#main-process">Main process</a><a class="header-link" href="#main-process" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>An example of creating the application menu in the main process with the
simple template API:</p>
<pre><code class="hljs language-javascript" id="_ix82ctl"><span class="hljs-keyword">const</span> {app, Menu} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-keyword">const</span> template = [
  {
    <span class="hljs-attr">label</span>: <span class="hljs-string">'Edit'</span>,
    <span class="hljs-attr">submenu</span>: [
      {<span class="hljs-attr">role</span>: <span class="hljs-string">'undo'</span>},
      {<span class="hljs-attr">role</span>: <span class="hljs-string">'redo'</span>},
      {<span class="hljs-attr">type</span>: <span class="hljs-string">'separator'</span>},
      {<span class="hljs-attr">role</span>: <span class="hljs-string">'cut'</span>},
      {<span class="hljs-attr">role</span>: <span class="hljs-string">'copy'</span>},
      {<span class="hljs-attr">role</span>: <span class="hljs-string">'paste'</span>},
      {<span class="hljs-attr">role</span>: <span class="hljs-string">'pasteandmatchstyle'</span>},
      {<span class="hljs-attr">role</span>: <span class="hljs-string">'delete'</span>},
      {<span class="hljs-attr">role</span>: <span class="hljs-string">'selectall'</span>}
    ]
  },
  {
    <span class="hljs-attr">label</span>: <span class="hljs-string">'View'</span>,
    <span class="hljs-attr">submenu</span>: [
      {<span class="hljs-attr">role</span>: <span class="hljs-string">'reload'</span>},
      {<span class="hljs-attr">role</span>: <span class="hljs-string">'forcereload'</span>},
      {<span class="hljs-attr">role</span>: <span class="hljs-string">'toggledevtools'</span>},
      {<span class="hljs-attr">type</span>: <span class="hljs-string">'separator'</span>},
      {<span class="hljs-attr">role</span>: <span class="hljs-string">'resetzoom'</span>},
      {<span class="hljs-attr">role</span>: <span class="hljs-string">'zoomin'</span>},
      {<span class="hljs-attr">role</span>: <span class="hljs-string">'zoomout'</span>},
      {<span class="hljs-attr">type</span>: <span class="hljs-string">'separator'</span>},
      {<span class="hljs-attr">role</span>: <span class="hljs-string">'togglefullscreen'</span>}
    ]
  },
  {
    <span class="hljs-attr">role</span>: <span class="hljs-string">'window'</span>,
    <span class="hljs-attr">submenu</span>: [
      {<span class="hljs-attr">role</span>: <span class="hljs-string">'minimize'</span>},
      {<span class="hljs-attr">role</span>: <span class="hljs-string">'close'</span>}
    ]
  },
  {
    <span class="hljs-attr">role</span>: <span class="hljs-string">'help'</span>,
    <span class="hljs-attr">submenu</span>: [
      {
        <span class="hljs-attr">label</span>: <span class="hljs-string">'Learn More'</span>,
        click () { <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>).shell.openExternal(<span class="hljs-string">'https://electronjs.org'</span>) }
      }
    ]
  }
]

<span class="hljs-keyword">if</span> (process.platform === <span class="hljs-string">'darwin'</span>) {
  template.unshift({
    <span class="hljs-attr">label</span>: app.getName(),
    <span class="hljs-attr">submenu</span>: [
      {<span class="hljs-attr">role</span>: <span class="hljs-string">'about'</span>},
      {<span class="hljs-attr">type</span>: <span class="hljs-string">'separator'</span>},
      {<span class="hljs-attr">role</span>: <span class="hljs-string">'services'</span>, <span class="hljs-attr">submenu</span>: []},
      {<span class="hljs-attr">type</span>: <span class="hljs-string">'separator'</span>},
      {<span class="hljs-attr">role</span>: <span class="hljs-string">'hide'</span>},
      {<span class="hljs-attr">role</span>: <span class="hljs-string">'hideothers'</span>},
      {<span class="hljs-attr">role</span>: <span class="hljs-string">'unhide'</span>},
      {<span class="hljs-attr">type</span>: <span class="hljs-string">'separator'</span>},
      {<span class="hljs-attr">role</span>: <span class="hljs-string">'quit'</span>}
    ]
  })

  <span class="hljs-comment">// Edit menu</span>
  template[<span class="hljs-number">1</span>].submenu.push(
    {<span class="hljs-attr">type</span>: <span class="hljs-string">'separator'</span>},
    {
      <span class="hljs-attr">label</span>: <span class="hljs-string">'Speech'</span>,
      <span class="hljs-attr">submenu</span>: [
        {<span class="hljs-attr">role</span>: <span class="hljs-string">'startspeaking'</span>},
        {<span class="hljs-attr">role</span>: <span class="hljs-string">'stopspeaking'</span>}
      ]
    }
  )

  <span class="hljs-comment">// Window menu</span>
  template[<span class="hljs-number">3</span>].submenu = [
    {<span class="hljs-attr">role</span>: <span class="hljs-string">'close'</span>},
    {<span class="hljs-attr">role</span>: <span class="hljs-string">'minimize'</span>},
    {<span class="hljs-attr">role</span>: <span class="hljs-string">'zoom'</span>},
    {<span class="hljs-attr">type</span>: <span class="hljs-string">'separator'</span>},
    {<span class="hljs-attr">role</span>: <span class="hljs-string">'front'</span>}
  ]
}

<span class="hljs-keyword">const</span> menu = Menu.buildFromTemplate(template)
Menu.setApplicationMenu(menu)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_ix82ctl">Copy</button></pre>
<h3 id="render-process"><a href="#render-process">Render process</a><a class="header-link" href="#render-process" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Below is an example of creating a menu dynamically in a web page
(render process) by using the <a href="https://electronjs.org/docs/api/remote"><code>remote</code></a> module, and showing it when
the user right clicks the page:</p>
<pre><code class="hljs language-html" id="_9voztfoh"><span class="hljs-comment">&lt;!-- index.html --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
<span class="hljs-keyword">const</span> {remote} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">const</span> {Menu, MenuItem} = remote

<span class="hljs-keyword">const</span> menu = <span class="hljs-keyword">new</span> Menu()
menu.append(<span class="hljs-keyword">new</span> MenuItem({<span class="hljs-attr">label</span>: <span class="hljs-string">'MenuItem1'</span>, click() { <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'item 1 clicked'</span>) }}))
menu.append(<span class="hljs-keyword">new</span> MenuItem({<span class="hljs-attr">type</span>: <span class="hljs-string">'separator'</span>}))
menu.append(<span class="hljs-keyword">new</span> MenuItem({<span class="hljs-attr">label</span>: <span class="hljs-string">'MenuItem2'</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">'checkbox'</span>, <span class="hljs-attr">checked</span>: <span class="hljs-literal">true</span>}))

<span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'contextmenu'</span>, (e) =&gt; {
  e.preventDefault()
  menu.popup(remote.getCurrentWindow())
}, <span class="hljs-literal">false</span>)
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_9voztfoh">Copy</button></pre>
<h2 id="notes-on-macos-application-menu"><a href="#notes-on-macos-application-menu">Notes on macOS Application Menu</a><a class="header-link" href="#notes-on-macos-application-menu" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>macOS has a completely different style of application menu from Windows and
Linux. Here are some notes on making your app's menu more native-like.</p>
<h3 id="standard-menus"><a href="#standard-menus">Standard Menus</a><a class="header-link" href="#standard-menus" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>On macOS there are many system-defined standard menus, like the <code>Services</code> and
<code>Windows</code> menus. To make your menu a standard menu, you should set your menu's
<code>role</code> to one of the following and Electron will recognize them and make them
become standard menus:</p>
<ul>
<li><code>window</code></li>
<li><code>help</code></li>
<li><code>services</code></li>
</ul>
<h3 id="standard-menu-item-actions"><a href="#standard-menu-item-actions">Standard Menu Item Actions</a><a class="header-link" href="#standard-menu-item-actions" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>macOS has provided standard actions for some menu items, like <code>About xxx</code>,
<code>Hide xxx</code>, and <code>Hide Others</code>. To set the action of a menu item to a standard
action, you should set the <code>role</code> attribute of the menu item.</p>
<h3 id="main-menus-name"><a href="#main-menus-name">Main Menu's Name</a><a class="header-link" href="#main-menus-name" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>On macOS the label of the application menu's first item is always your app's
name, no matter what label you set. To change it, modify your app bundle's
<code>Info.plist</code> file. See
<a href="https://developer.apple.com/library/ios/documentation/general/Reference/InfoPlistKeyReference/Articles/AboutInformationPropertyListFiles.html">About Information Property List Files</a>
for more information.</p>
<h2 id="setting-menu-for-specific-browser-window-linux-windows"><a href="#setting-menu-for-specific-browser-window-linux-windows">Setting Menu for Specific Browser Window (<em class="platform-label">Linux</em> <em class="platform-label">Windows</em>)</a><a class="header-link" href="#setting-menu-for-specific-browser-window-linux-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <a href="https://github.com/electron/electron/blob/master/docs/api/browser-window.md#winsetmenumenu-linux-windows"><code>setMenu</code> method</a> of browser windows can set the menu of certain
browser windows.</p>
<h2 id="menu-item-position"><a href="#menu-item-position">Menu Item Position</a><a class="header-link" href="#menu-item-position" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>You can make use of <code>position</code> and <code>id</code> to control how the item will be placed
when building a menu with <code>Menu.buildFromTemplate</code>.</p>
<p>The <code>position</code> attribute of <code>MenuItem</code> has the form <code>[placement]=[id]</code>, where
<code>placement</code> is one of <code>before</code>, <code>after</code>, or <code>endof</code> and <code>id</code> is the unique ID of
an existing item in the menu:</p>
<ul>
<li><code>before</code> - Inserts this item before the id referenced item. If the
referenced item doesn't exist the item will be inserted at the end of
the menu.</li>
<li><code>after</code> - Inserts this item after id referenced item. If the referenced
item doesn't exist the item will be inserted at the end of the menu.</li>
<li><code>endof</code> - Inserts this item at the end of the logical group containing
the id referenced item (groups are created by separator items). If
the referenced item doesn't exist, a new separator group is created with
the given id and this item is inserted after that separator.</li>
</ul>
<p>When an item is positioned, all un-positioned items are inserted after
it until a new item is positioned. So if you want to position a group of
menu items in the same location you only need to specify a position for
the first item.</p>
<h3 id="examples-1"><a href="#examples-1">Examples</a><a class="header-link" href="#examples-1" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Template:</p>
<pre><code class="hljs language-javascript" id="_oe2tpenq">[
  {<span class="hljs-attr">label</span>: <span class="hljs-string">'4'</span>, <span class="hljs-attr">id</span>: <span class="hljs-string">'4'</span>},
  {<span class="hljs-attr">label</span>: <span class="hljs-string">'5'</span>, <span class="hljs-attr">id</span>: <span class="hljs-string">'5'</span>},
  {<span class="hljs-attr">label</span>: <span class="hljs-string">'1'</span>, <span class="hljs-attr">id</span>: <span class="hljs-string">'1'</span>, <span class="hljs-attr">position</span>: <span class="hljs-string">'before=4'</span>},
  {<span class="hljs-attr">label</span>: <span class="hljs-string">'2'</span>, <span class="hljs-attr">id</span>: <span class="hljs-string">'2'</span>},
  {<span class="hljs-attr">label</span>: <span class="hljs-string">'3'</span>, <span class="hljs-attr">id</span>: <span class="hljs-string">'3'</span>}
]</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_oe2tpenq">Copy</button></pre>
<p>Menu:</p>
<pre><code class="hljs language-sh" id="_uvd6449y">- 1
- 2
- 3
- 4
- 5</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_uvd6449y">Copy</button></pre>
<p>Template:</p>
<pre><code class="hljs language-javascript" id="_8gtx9njq">[
  {<span class="hljs-attr">label</span>: <span class="hljs-string">'a'</span>, <span class="hljs-attr">position</span>: <span class="hljs-string">'endof=letters'</span>},
  {<span class="hljs-attr">label</span>: <span class="hljs-string">'1'</span>, <span class="hljs-attr">position</span>: <span class="hljs-string">'endof=numbers'</span>},
  {<span class="hljs-attr">label</span>: <span class="hljs-string">'b'</span>, <span class="hljs-attr">position</span>: <span class="hljs-string">'endof=letters'</span>},
  {<span class="hljs-attr">label</span>: <span class="hljs-string">'2'</span>, <span class="hljs-attr">position</span>: <span class="hljs-string">'endof=numbers'</span>},
  {<span class="hljs-attr">label</span>: <span class="hljs-string">'c'</span>, <span class="hljs-attr">position</span>: <span class="hljs-string">'endof=letters'</span>},
  {<span class="hljs-attr">label</span>: <span class="hljs-string">'3'</span>, <span class="hljs-attr">position</span>: <span class="hljs-string">'endof=numbers'</span>}
]</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_8gtx9njq">Copy</button></pre>
<p>Menu:</p>
<pre><code class="hljs language-sh" id="_cynrmsmb">- ---
- a
- b
- c
- ---
- 1
- 2
- 3</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_cynrmsmb">Copy</button></pre>

  <hr>
  <h2 id="class-menuitem"><a href="#class-menuitem">Class: MenuItem</a><a class="header-link" href="#class-menuitem" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>Add items to native application menus and context menus.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<p>See <a href="https://electronjs.org/docs/api/menu"><code>Menu</code></a> for examples.</p>
<h3 id="new-menuitemoptions"><a href="#new-menuitemoptions"><code>new MenuItem(options)</code></a><a class="header-link" href="#new-menuitemoptions" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li>
<p><code>click</code> Function (optional) - Will be called with
<code>click(menuItem, browserWindow, event)</code> when the menu item is clicked.</p>
<ul>
<li><code>menuItem</code> MenuItem</li>
<li><code>browserWindow</code> BrowserWindow</li>
<li><code>event</code> Event</li>
</ul>
</li>
<li><code>role</code> String (optional) - Define the action of the menu item, when specified the
<code>click</code> property will be ignored. See <a href="#roles">roles</a>.</li>
<li><code>type</code> String (optional) - Can be <code>normal</code>, <code>separator</code>, <code>submenu</code>, <code>checkbox</code> or
<code>radio</code>.</li>
<li><code>label</code> String - (optional)</li>
<li><code>sublabel</code> String - (optional)</li>
<li><code>accelerator</code> <a href="https://electronjs.org/docs/api/accelerator">Accelerator</a> (optional)</li>
<li><code>icon</code> (<a href="https://electronjs.org/docs/api/native-image">NativeImage</a> | String) (optional)</li>
<li><code>enabled</code> Boolean (optional) - If false, the menu item will be greyed out and
unclickable.</li>
<li><code>visible</code> Boolean (optional) - If false, the menu item will be entirely hidden.</li>
<li><code>checked</code> Boolean (optional) - Should only be specified for <code>checkbox</code> or <code>radio</code> type
menu items.</li>
<li><code>submenu</code> (MenuItemConstructorOptions[] | Menu) (optional) - Should be specified for <code>submenu</code> type menu items. If
<code>submenu</code> is specified, the <code>type: 'submenu'</code> can be omitted. If the value
is not a <code>Menu</code> then it will be automatically converted to one using
<code>Menu.buildFromTemplate</code>.</li>
<li><code>id</code> String (optional) - Unique within a single menu. If defined then it can be used
as a reference to this item by the position attribute.</li>
<li><code>position</code> String (optional) - This field allows fine-grained definition of the
specific location within a given menu.</li>
</ul>
</li>
</ul>
<h3 id="roles"><a href="#roles">Roles</a><a class="header-link" href="#roles" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Roles allow menu items to have predefined behaviors.</p>
<p>It is best to specify <code>role</code> for any menu item that matches a standard role,
rather than trying to manually implement the behavior in a <code>click</code> function.
The built-in <code>role</code> behavior will give the best native experience.</p>
<p>The <code>label</code> and <code>accelerator</code> values are optional when using a <code>role</code> and will
default to appropriate values for each platform.</p>
<p>The <code>role</code> property can have following values:</p>
<ul>
<li><code>undo</code></li>
<li><code>redo</code></li>
<li><code>cut</code></li>
<li><code>copy</code></li>
<li><code>paste</code></li>
<li><code>pasteandmatchstyle</code></li>
<li><code>selectall</code></li>
<li><code>delete</code></li>
<li><code>minimize</code> - Minimize current window</li>
<li><code>close</code> - Close current window</li>
<li><code>quit</code>- Quit the application</li>
<li><code>reload</code> - Reload the current window</li>
<li><code>forcereload</code> - Reload the current window ignoring the cache.</li>
<li><code>toggledevtools</code> - Toggle developer tools in the current window</li>
<li><code>togglefullscreen</code>- Toggle full screen mode on the current window</li>
<li><code>resetzoom</code> - Reset the focused page's zoom level to the original size</li>
<li><code>zoomin</code> - Zoom in the focused page by 10%</li>
<li><code>zoomout</code> - Zoom out the focused page by 10%</li>
<li><code>editMenu</code> - Whole default "Edit" menu (Undo, Copy, etc.)</li>
<li><code>windowMenu</code> - Whole default "Window" menu (Minimize, Close, etc.)</li>
</ul>
<p>The following additional roles are available on macOS:</p>
<ul>
<li><code>about</code> - Map to the <code>orderFrontStandardAboutPanel</code> action</li>
<li><code>hide</code> - Map to the <code>hide</code> action</li>
<li><code>hideothers</code> - Map to the <code>hideOtherApplications</code> action</li>
<li><code>unhide</code> - Map to the <code>unhideAllApplications</code> action</li>
<li><code>startspeaking</code> - Map to the <code>startSpeaking</code> action</li>
<li><code>stopspeaking</code> - Map to the <code>stopSpeaking</code> action</li>
<li><code>front</code> - Map to the <code>arrangeInFront</code> action</li>
<li><code>zoom</code> - Map to the <code>performZoom</code> action</li>
<li><code>toggletabbar</code> - Map to the <code>toggleTabBar</code> action</li>
<li><code>selectnexttab</code> - Map to the <code>selectNextTab</code> action</li>
<li><code>selectprevioustab</code> - Map to the <code>selectPreviousTab</code> action</li>
<li><code>mergeallwindows</code> - Map to the <code>mergeAllWindows</code> action</li>
<li><code>movetabtonewwindow</code> - Map to the <code>moveTabToNewWindow</code> action</li>
<li><code>window</code> - The submenu is a "Window" menu</li>
<li><code>help</code> - The submenu is a "Help" menu</li>
<li><code>services</code> - The submenu is a "Services" menu</li>
</ul>
<p>When specifying a <code>role</code> on macOS, <code>label</code> and <code>accelerator</code> are the only
options that will affect the menu item. All other options will be ignored.</p>
<h3 id="instance-properties"><a href="#instance-properties">Instance Properties</a><a class="header-link" href="#instance-properties" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The following properties are available on instances of <code>MenuItem</code>:</p>
<h4 id="menuitemenabled"><a href="#menuitemenabled"><code>menuItem.enabled</code></a><a class="header-link" href="#menuitemenabled" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>Boolean</code> indicating whether the item is enabled, this property can be
dynamically changed.</p>
<h4 id="menuitemvisible"><a href="#menuitemvisible"><code>menuItem.visible</code></a><a class="header-link" href="#menuitemvisible" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>Boolean</code> indicating whether the item is visible, this property can be
dynamically changed.</p>
<h4 id="menuitemchecked"><a href="#menuitemchecked"><code>menuItem.checked</code></a><a class="header-link" href="#menuitemchecked" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>Boolean</code> indicating whether the item is checked, this property can be
dynamically changed.</p>
<p>A <code>checkbox</code> menu item will toggle the <code>checked</code> property on and off when
selected.</p>
<p>A <code>radio</code> menu item will turn on its <code>checked</code> property when clicked, and
will turn off that property for all adjacent items in the same menu.</p>
<p>You can add a <code>click</code> function for additional behavior.</p>
<h4 id="menuitemlabel"><a href="#menuitemlabel"><code>menuItem.label</code></a><a class="header-link" href="#menuitemlabel" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>String</code> representing the menu items visible label</p>
<h4 id="menuitemclick"><a href="#menuitemclick"><code>menuItem.click</code></a><a class="header-link" href="#menuitemclick" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>Function</code> that is fired when the MenuItem receives a click event</p>

  <hr>
  <h1 id="mimetypedbuffer-object"><a href="#mimetypedbuffer-object">MimeTypedBuffer Object</a><a class="header-link" href="#mimetypedbuffer-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>mimeType</code> String - The mimeType of the Buffer that you are sending</li>
<li><code>data</code> Buffer - The actual Buffer content</li>
</ul>

  <hr>
  <h1 id="multithreading"><a href="#multithreading">Multithreading</a><a class="header-link" href="#multithreading" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>With <a href="https://developer.mozilla.org/en/docs/Web/API/Web_Workers_API/Using_web_workers">Web Workers</a>, it is possible to run JavaScript in OS-level
threads.</p>
<h2 id="multi-threaded-nodejs"><a href="#multi-threaded-nodejs">Multi-threaded Node.js</a><a class="header-link" href="#multi-threaded-nodejs" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>It is possible to use Node.js features in Electron's Web Workers, to do
so the <code>nodeIntegrationInWorker</code> option should be set to <code>true</code> in
<code>webPreferences</code>.</p>
<pre><code class="hljs language-javascript" id="_2uk2ii4a"><span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow({
  <span class="hljs-attr">webPreferences</span>: {
    <span class="hljs-attr">nodeIntegrationInWorker</span>: <span class="hljs-literal">true</span>
  }
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_2uk2ii4a">Copy</button></pre>
<p>The <code>nodeIntegrationInWorker</code> can be used independent of <code>nodeIntegration</code>, but
<code>sandbox</code> must not be set to <code>true</code>.</p>
<h2 id="available-apis"><a href="#available-apis">Available APIs</a><a class="header-link" href="#available-apis" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>All built-in modules of Node.js are supported in Web Workers, and <code>asar</code>
archives can still be read with Node.js APIs. However none of Electron's
built-in modules can be used in a multi-threaded environment.</p>
<h2 id="native-nodejs-modules"><a href="#native-nodejs-modules">Native Node.js modules</a><a class="header-link" href="#native-nodejs-modules" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Any native Node.js module can be loaded directly in Web Workers, but it is
strongly recommended not to do so. Most existing native modules have been
written assuming single-threaded environment, using them in Web Workers will
lead to crashes and memory corruptions.</p>
<p>Note that even if a native Node.js module is thread-safe it's still not safe to
load it in a Web Worker because the <code>process.dlopen</code> function is not thread
safe.</p>
<p>The only way to load a native module safely for now, is to make sure the app
loads no native modules after the Web Workers get started.</p>
<pre><code class="hljs language-javascript" id="_ivtyxvtp">process.dlopen = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'Load native module is not safe'</span>)
}
<span class="hljs-keyword">let</span> worker = <span class="hljs-keyword">new</span> Worker(<span class="hljs-string">'script.js'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_ivtyxvtp">Copy</button></pre>

  <hr>
  <h1 id="nativeimage"><a href="#nativeimage">nativeImage</a><a class="header-link" href="#nativeimage" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Create tray, dock, and application icons using PNG or JPG files.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a>, <a href="https://electronjs.org/docs/glossary#renderer-process">Renderer</a></p>
<p>In Electron, for the APIs that take images, you can pass either file paths or
<code>NativeImage</code> instances. An empty image will be used when <code>null</code> is passed.</p>
<p>For example, when creating a tray or setting a window's icon, you can pass an
image file path as a <code>String</code>:</p>
<pre><code class="hljs language-javascript" id="_1eomlt1"><span class="hljs-keyword">const</span> {BrowserWindow, Tray} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-keyword">const</span> appIcon = <span class="hljs-keyword">new</span> Tray(<span class="hljs-string">'/Users/somebody/images/icon.png'</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">icon</span>: <span class="hljs-string">'/Users/somebody/images/window.png'</span>})
<span class="hljs-built_in">console</span>.log(appIcon, win)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_1eomlt1">Copy</button></pre>
<p>Or read the image from the clipboard which returns a <code>NativeImage</code>:</p>
<pre><code class="hljs language-javascript" id="_3psy5g25"><span class="hljs-keyword">const</span> {clipboard, Tray} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">const</span> image = clipboard.readImage()
<span class="hljs-keyword">const</span> appIcon = <span class="hljs-keyword">new</span> Tray(image)
<span class="hljs-built_in">console</span>.log(appIcon)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_3psy5g25">Copy</button></pre>
<h2 id="supported-formats"><a href="#supported-formats">Supported Formats</a><a class="header-link" href="#supported-formats" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Currently <code>PNG</code> and <code>JPEG</code> image formats are supported. <code>PNG</code> is recommended
because of its support for transparency and lossless compression.</p>
<p>On Windows, you can also load <code>ICO</code> icons from file paths. For best visual
quality it is recommended to include at least the following sizes in the:</p>
<ul>
<li>Small icon</li>
<li>16x16 (100% DPI scale)</li>
<li>20x20 (125% DPI scale)</li>
<li>24x24 (150% DPI scale)</li>
<li>32x32 (200% DPI scale)</li>
<li>Large icon</li>
<li>32x32 (100% DPI scale)</li>
<li>40x40 (125% DPI scale)</li>
<li>48x48 (150% DPI scale)</li>
<li>64x64 (200% DPI scale)</li>
<li>256x256</li>
</ul>
<p>Check the <em>Size requirements</em> section in <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dn742485(v=vs.85).aspx">this article</a>.</p>
<h2 id="high-resolution-image"><a href="#high-resolution-image">High Resolution Image</a><a class="header-link" href="#high-resolution-image" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>On platforms that have high-DPI support such as Apple Retina displays, you can
append <code>@2x</code> after image's base filename to mark it as a high resolution image.</p>
<p>For example if <code>icon.png</code> is a normal image that has standard resolution, then
<code>icon@2x.png</code> will be treated as a high resolution image that has double DPI
density.</p>
<p>If you want to support displays with different DPI densities at the same time,
you can put images with different sizes in the same folder and use the filename
without DPI suffixes. For example:</p>
<pre><code class="hljs language-text" id="_kp4ly7li">images/
├── icon.png
├── icon<span class="hljs-title">@2</span><span class="hljs-keyword">x</span>.png
└── icon<span class="hljs-title">@3</span><span class="hljs-keyword">x</span>.png</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_kp4ly7li">Copy</button></pre>
<pre><code class="hljs language-javascript" id="_yx2081dq"><span class="hljs-keyword">const</span> {Tray} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> appIcon = <span class="hljs-keyword">new</span> Tray(<span class="hljs-string">'/Users/somebody/images/icon.png'</span>)
<span class="hljs-built_in">console</span>.log(appIcon)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_yx2081dq">Copy</button></pre>
<p>Following suffixes for DPI are also supported:</p>
<ul>
<li><code>@1x</code></li>
<li><code>@1.25x</code></li>
<li><code>@1.33x</code></li>
<li><code>@1.4x</code></li>
<li><code>@1.5x</code></li>
<li><code>@1.8x</code></li>
<li><code>@2x</code></li>
<li><code>@2.5x</code></li>
<li><code>@3x</code></li>
<li><code>@4x</code></li>
<li><code>@5x</code></li>
</ul>
<h2 id="template-image"><a href="#template-image">Template Image</a><a class="header-link" href="#template-image" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Template images consist of black and clear colors (and an alpha channel).
Template images are not intended to be used as standalone images and are usually
mixed with other content to create the desired final appearance.</p>
<p>The most common case is to use template images for a menu bar icon so it can
adapt to both light and dark menu bars.</p>
<p><strong>Note:</strong> Template image is only supported on macOS.</p>
<p>To mark an image as a template image, its filename should end with the word
<code>Template</code>. For example:</p>
<ul>
<li><code>xxxTemplate.png</code></li>
<li><code>xxxTemplate@2x.png</code></li>
</ul>
<h2 id="methods"><a href="#methods">Methods</a><a class="header-link" href="#methods" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>nativeImage</code> module has the following methods, all of which return
an instance of the <code>NativeImage</code> class:</p>
<h3 id="nativeimagecreateempty"><a href="#nativeimagecreateempty"><code>nativeImage.createEmpty()</code></a><a class="header-link" href="#nativeimagecreateempty" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>NativeImage</code></p>
<p>Creates an empty <code>NativeImage</code> instance.</p>
<h3 id="nativeimagecreatefrompathpath"><a href="#nativeimagecreatefrompathpath"><code>nativeImage.createFromPath(path)</code></a><a class="header-link" href="#nativeimagecreatefrompathpath" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>path</code> String</li>
</ul>
<p>Returns <code>NativeImage</code></p>
<p>Creates a new <code>NativeImage</code> instance from a file located at <code>path</code>. This method
returns an empty image if the <code>path</code> does not exist, cannot be read, or is not
a valid image.</p>
<pre><code class="hljs language-javascript" id="_lke4q2ur"><span class="hljs-keyword">const</span> nativeImage = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>).nativeImage

<span class="hljs-keyword">let</span> image = nativeImage.createFromPath(<span class="hljs-string">'/Users/somebody/images/icon.png'</span>)
<span class="hljs-built_in">console</span>.log(image)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_lke4q2ur">Copy</button></pre>
<h3 id="nativeimagecreatefrombufferbuffer-options"><a href="#nativeimagecreatefrombufferbuffer-options"><code>nativeImage.createFromBuffer(buffer[, options])</code></a><a class="header-link" href="#nativeimagecreatefrombufferbuffer-options" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>buffer</code> <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer">Buffer</a></li>
<li>
<p><code>options</code> Object (optional)</p>
<ul>
<li><code>width</code> Integer (optional) - Required for bitmap buffers.</li>
<li><code>height</code> Integer (optional) - Required for bitmap buffers.</li>
<li><code>scaleFactor</code> Double (optional) - Defaults to 1.0.</li>
</ul>
</li>
</ul>
<p>Returns <code>NativeImage</code></p>
<p>Creates a new <code>NativeImage</code> instance from <code>buffer</code>.</p>
<h3 id="nativeimagecreatefromdataurldataurl"><a href="#nativeimagecreatefromdataurldataurl"><code>nativeImage.createFromDataURL(dataURL)</code></a><a class="header-link" href="#nativeimagecreatefromdataurldataurl" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>dataURL</code> String</li>
</ul>
<p>Returns <code>NativeImage</code></p>
<p>Creates a new <code>NativeImage</code> instance from <code>dataURL</code>.</p>
<h3 id="nativeimagecreatefromnamedimageimagename-hslshift-macos"><a href="#nativeimagecreatefromnamedimageimagename-hslshift-macos"><code>nativeImage.createFromNamedImage(imageName[, hslShift])</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#nativeimagecreatefromnamedimageimagename-hslshift-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>imageName</code> String</li>
<li><code>hslShift</code> Number[]</li>
</ul>
<p>Returns <code>NativeImage</code></p>
<p>Creates a new <code>NativeImage</code> instance from the NSImage that maps to the
given image name.  See <a href="https://developer.apple.com/documentation/appkit/nsimagename?language=objc"><code>NSImageName</code></a>
for a list of possible values.</p>
<p>The <code>hslShift</code> is applied to the image with the following rules</p>
<ul>
<li><code>hsl_shift[0]</code> (hue): The absolute hue value for the image - 0 and 1 map
to 0 and 360 on the hue color wheel (red).</li>
<li><code>hsl_shift[1]</code> (saturation): A saturation shift for the image, with the
following key values:<br>
0 = remove all color.<br>
0.5 = leave unchanged.<br>
1 = fully saturate the image.  </li>
<li><code>hsl_shift[2]</code> (lightness): A lightness shift for the image, with the
following key values:<br>
0 = remove all lightness (make all pixels black).<br>
0.5 = leave unchanged.<br>
1 = full lightness (make all pixels white).</li>
</ul>
<p>This means that <code>[-1, 0, 1]</code> will make the image completely white and
<code>[-1, 1, 0]</code> will make the image completely black.</p>
<h2 id="class-nativeimage"><a href="#class-nativeimage">Class: NativeImage</a><a class="header-link" href="#class-nativeimage" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>Natively wrap images such as tray, dock, and application icons.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a>, <a href="https://electronjs.org/docs/glossary#renderer-process">Renderer</a></p>
<h3 id="instance-methods"><a href="#instance-methods">Instance Methods</a><a class="header-link" href="#instance-methods" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The following methods are available on instances of the <code>NativeImage</code> class:</p>
<h4 id="imagetopngoptions"><a href="#imagetopngoptions"><code>image.toPNG([options])</code></a><a class="header-link" href="#imagetopngoptions" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>options</code> Object (optional)</p>
<ul>
<li><code>scaleFactor</code> Double (optional) - Defaults to 1.0.</li>
</ul>
</li>
</ul>
<p>Returns <code>Buffer</code> - A <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer">Buffer</a> that contains the image's <code>PNG</code> encoded data.</p>
<h4 id="imagetojpegquality"><a href="#imagetojpegquality"><code>image.toJPEG(quality)</code></a><a class="header-link" href="#imagetojpegquality" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>quality</code> Integer (<strong>required</strong>) - Between 0 - 100.</li>
</ul>
<p>Returns <code>Buffer</code> - A <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer">Buffer</a> that contains the image's <code>JPEG</code> encoded data.</p>
<h4 id="imagetobitmapoptions"><a href="#imagetobitmapoptions"><code>image.toBitmap([options])</code></a><a class="header-link" href="#imagetobitmapoptions" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>options</code> Object (optional)</p>
<ul>
<li><code>scaleFactor</code> Double (optional) - Defaults to 1.0.</li>
</ul>
</li>
</ul>
<p>Returns <code>Buffer</code> - A <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer">Buffer</a> that contains a copy of the image's raw bitmap pixel
data.</p>
<h4 id="imagetodataurloptions"><a href="#imagetodataurloptions"><code>image.toDataURL([options])</code></a><a class="header-link" href="#imagetodataurloptions" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>options</code> Object (optional)</p>
<ul>
<li><code>scaleFactor</code> Double (optional) - Defaults to 1.0.</li>
</ul>
</li>
</ul>
<p>Returns <code>String</code> - The data URL of the image.</p>
<h4 id="imagegetbitmapoptions"><a href="#imagegetbitmapoptions"><code>image.getBitmap([options])</code></a><a class="header-link" href="#imagegetbitmapoptions" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>options</code> Object (optional)</p>
<ul>
<li><code>scaleFactor</code> Double (optional) - Defaults to 1.0.</li>
</ul>
</li>
</ul>
<p>Returns <code>Buffer</code> - A <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer">Buffer</a> that contains the image's raw bitmap pixel data.</p>
<p>The difference between <code>getBitmap()</code> and <code>toBitmap()</code> is, <code>getBitmap()</code> does not
copy the bitmap data, so you have to use the returned Buffer immediately in
current event loop tick, otherwise the data might be changed or destroyed.</p>
<h4 id="imagegetnativehandle-macos"><a href="#imagegetnativehandle-macos"><code>image.getNativeHandle()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#imagegetnativehandle-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Buffer</code> - A <a href="https://nodejs.org/api/buffer.html#buffer_class_buffer">Buffer</a> that stores C pointer to underlying native handle of
the image. On macOS, a pointer to <code>NSImage</code> instance would be returned.</p>
<p>Notice that the returned pointer is a weak pointer to the underlying native
image instead of a copy, so you <em>must</em> ensure that the associated
<code>nativeImage</code> instance is kept around.</p>
<h4 id="imageisempty"><a href="#imageisempty"><code>image.isEmpty()</code></a><a class="header-link" href="#imageisempty" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> -  Whether the image is empty.</p>
<h4 id="imagegetsize"><a href="#imagegetsize"><code>image.getSize()</code></a><a class="header-link" href="#imagegetsize" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <a href="https://electronjs.org/docs/api/structures/size"><code>Size</code></a></p>
<h4 id="imagesettemplateimageoption"><a href="#imagesettemplateimageoption"><code>image.setTemplateImage(option)</code></a><a class="header-link" href="#imagesettemplateimageoption" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>option</code> Boolean</li>
</ul>
<p>Marks the image as a template image.</p>
<h4 id="imageistemplateimage"><a href="#imageistemplateimage"><code>image.isTemplateImage()</code></a><a class="header-link" href="#imageistemplateimage" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the image is a template image.</p>
<h4 id="imagecroprect"><a href="#imagecroprect"><code>image.crop(rect)</code></a><a class="header-link" href="#imagecroprect" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>rect</code> <a href="https://electronjs.org/docs/api/structures/rectangle">Rectangle</a> - The area of the image to crop</li>
</ul>
<p>Returns <code>NativeImage</code> - The cropped image.</p>
<h4 id="imageresizeoptions"><a href="#imageresizeoptions"><code>image.resize(options)</code></a><a class="header-link" href="#imageresizeoptions" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>width</code> Integer (optional) - Defaults to the image's width.</li>
<li><code>height</code> Integer (optional) - Defaults to the image's height</li>
<li><code>quality</code> String (optional) - The desired quality of the resize image.
Possible values are <code>good</code>, <code>better</code> or <code>best</code>. The default is <code>best</code>.
These values express a desired quality/speed tradeoff. They are translated
into an algorithm-specific method that depends on the capabilities
(CPU, GPU) of the underlying platform. It is possible for all three methods
to be mapped to the same algorithm on a given platform.</li>
</ul>
</li>
</ul>
<p>Returns <code>NativeImage</code> - The resized image.</p>
<p>If only the <code>height</code> or the <code>width</code> are specified then the current aspect ratio
will be preserved in the resized image.</p>
<h4 id="imagegetaspectratio"><a href="#imagegetaspectratio"><code>image.getAspectRatio()</code></a><a class="header-link" href="#imagegetaspectratio" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Float</code> - The image's aspect ratio.</p>
<h4 id="imageaddrepresentationoptions"><a href="#imageaddrepresentationoptions"><code>image.addRepresentation(options)</code></a><a class="header-link" href="#imageaddrepresentationoptions" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>scaleFactor</code> Double - The scale factor to add the image representation for.</li>
<li><code>width</code> Integer (optional) - Defaults to 0. Required if a bitmap buffer
is specified as <code>buffer</code>.</li>
<li><code>height</code> Integer (optional) - Defaults to 0. Required if a bitmap buffer
is specified as <code>buffer</code>.</li>
<li><code>buffer</code> Buffer (optional) - The buffer containing the raw image data.</li>
<li><code>dataURL</code> String (optional) - The data URL containing either a base 64
encoded PNG or JPEG image.</li>
</ul>
</li>
</ul>
<p>Add an image representation for a specific scale factor. This can be used
to explicitly add different scale factor representations to an image. This
can be called on empty images.</p>

  <hr>
  <h1 id="net"><a href="#net">net</a><a class="header-link" href="#net" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Issue HTTP/HTTPS requests using Chromium's native networking library</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<p>The <code>net</code> module is a client-side API for issuing HTTP(S) requests. It is
similar to the <a href="https://nodejs.org/api/http.html">HTTP</a> and
<a href="https://nodejs.org/api/https.html">HTTPS</a> modules of Node.js but uses
Chromium's native networking library instead of the Node.js implementation,
offering better support for web proxies.</p>
<p>The following is a non-exhaustive list of why you may consider using the <code>net</code>
module instead of the native Node.js modules:</p>
<ul>
<li>Automatic management of system proxy configuration, support of the wpad
protocol and proxy pac configuration files.</li>
<li>Automatic tunneling of HTTPS requests.</li>
<li>Support for authenticating proxies using basic, digest, NTLM, Kerberos or
negotiate authentication schemes.</li>
<li>Support for traffic monitoring proxies: Fiddler-like proxies used for access
control and monitoring.</li>
</ul>
<p>The <code>net</code> module API has been specifically designed to mimic, as closely as
possible, the familiar Node.js API. The API components including classes,
methods, properties and event names are similar to those commonly used in
Node.js.</p>
<p>For instance, the following example quickly shows how the <code>net</code> API might be
used:</p>
<pre><code class="hljs language-javascript" id="_7y1djma3"><span class="hljs-keyword">const</span> {app} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  <span class="hljs-keyword">const</span> {net} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
  <span class="hljs-keyword">const</span> request = net.request(<span class="hljs-string">'https://github.com'</span>)
  request.on(<span class="hljs-string">'response'</span>, (response) =&gt; {
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`STATUS: <span class="hljs-subst">${response.statusCode}</span>`</span>)
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`HEADERS: <span class="hljs-subst">${<span class="hljs-built_in">JSON</span>.stringify(response.headers)}</span>`</span>)
    response.on(<span class="hljs-string">'data'</span>, (chunk) =&gt; {
      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`BODY: <span class="hljs-subst">${chunk}</span>`</span>)
    })
    response.on(<span class="hljs-string">'end'</span>, () =&gt; {
      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'No more data in response.'</span>)
    })
  })
  request.end()
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_7y1djma3">Copy</button></pre>
<p>By the way, it is almost identical to how you would normally use the
<a href="https://nodejs.org/api/http.html">HTTP</a>/<a href="https://nodejs.org/api/https.html">HTTPS</a>
modules of Node.js</p>
<p>The <code>net</code> API can be used only after the application emits the <code>ready</code> event.
Trying to use the module before the <code>ready</code> event will throw an error.</p>
<h2 id="methods"><a href="#methods">Methods</a><a class="header-link" href="#methods" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>net</code> module has the following methods:</p>
<h3 id="netrequestoptions"><a href="#netrequestoptions"><code>net.request(options)</code></a><a class="header-link" href="#netrequestoptions" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>options</code> (Object | String) - The <code>ClientRequest</code> constructor options.</li>
</ul>
<p>Returns <a href="https://electronjs.org/docs/api/client-request"><code>ClientRequest</code></a></p>
<p>Creates a <a href="https://electronjs.org/docs/api/client-request"><code>ClientRequest</code></a> instance using the provided
<code>options</code> which are directly forwarded to the <code>ClientRequest</code> constructor.
The <code>net.request</code> method would be used to issue both secure and insecure HTTP
requests according to the specified protocol scheme in the <code>options</code> object.</p>

  <hr>
  <h1 id="notification"><a href="#notification">Notification</a><a class="header-link" href="#notification" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Create OS desktop notifications</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<h2 id="using-in-the-renderer-process"><a href="#using-in-the-renderer-process">Using in the renderer process</a><a class="header-link" href="#using-in-the-renderer-process" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>If you want to show Notifications from a renderer process you should use the <a href="https://electronjs.org/docs/tutorial/notifications">HTML5 Notification API</a></p>
<h2 id="class-notification"><a href="#class-notification">Class: Notification</a><a class="header-link" href="#class-notification" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>Create OS desktop notifications</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<p><code>Notification</code> is an
<a href="http://nodejs.org/api/events.html#events_class_events_eventemitter">EventEmitter</a>.</p>
<p>It creates a new <code>Notification</code> with native properties as set by the <code>options</code>.</p>
<h3 id="static-methods"><a href="#static-methods">Static Methods</a><a class="header-link" href="#static-methods" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The <code>Notification</code> class has the following static methods:</p>
<h4 id="notificationissupported"><a href="#notificationissupported"><code>Notification.isSupported()</code></a><a class="header-link" href="#notificationissupported" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether or not desktop notifications are supported on the current system</p>
<h3 id="new-notificationoptions-experimental"><a href="#new-notificationoptions-experimental"><code>new Notification([options])</code> <em>Experimental</em></a><a class="header-link" href="#new-notificationoptions-experimental" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>title</code> String - A title for the notification, which will be shown at the top of the notification window when it is shown</li>
<li><code>subtitle</code> String - (optional) A subtitle for the notification, which will be displayed below the title. <em class="platform-label">macOS</em></li>
<li><code>body</code> String - The body text of the notification, which will be displayed below the title or subtitle</li>
<li><code>silent</code> Boolean - (optional) Whether or not to emit an OS notification noise when showing the notification</li>
<li><code>icon</code> (String | <a href="https://electronjs.org/docs/api/native-image">NativeImage</a>) - (optional) An icon to use in the notification</li>
<li><code>hasReply</code> Boolean - (optional) Whether or not to add an inline reply option to the notification.  <em class="platform-label">macOS</em></li>
<li><code>replyPlaceholder</code> String - (optional) The placeholder to write in the inline reply input field. <em class="platform-label">macOS</em></li>
<li><code>sound</code> String - (optional) The name of the sound file to play when the notification is shown. <em class="platform-label">macOS</em></li>
<li><code>actions</code> <a href="https://electronjs.org/docs/api/structures/notification-action">NotificationAction[]</a> - (optional) Actions to add to the notification.  Please read the available actions and limitations in the <code>NotificationAction</code> documentation <em class="platform-label">macOS</em></li>
</ul>
</li>
</ul>
<h3 id="instance-events"><a href="#instance-events">Instance Events</a><a class="header-link" href="#instance-events" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Objects created with <code>new Notification</code> emit the following events:</p>
<p><strong>Note:</strong> Some events are only available on specific operating systems and are
labeled as such.</p>
<h4 id="event-show"><a href="#event-show">Event: 'show'</a><a class="header-link" href="#event-show" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
</ul>
<p>Emitted when the notification is shown to the user, note this could be fired
multiple times as a notification can be shown multiple times through the
<code>show()</code> method.</p>
<h4 id="event-click"><a href="#event-click">Event: 'click'</a><a class="header-link" href="#event-click" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
</ul>
<p>Emitted when the notification is clicked by the user.</p>
<h4 id="event-close"><a href="#event-close">Event: 'close'</a><a class="header-link" href="#event-close" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
</ul>
<p>Emitted when the notification is closed by manual intervention from the user.</p>
<p>This event is not guaranteed to be emitted in all cases where the notification
is closed.</p>
<h4 id="event-reply-macos"><a href="#event-reply-macos">Event: 'reply' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-reply-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>reply</code> String - The string the user entered into the inline reply field</li>
</ul>
<p>Emitted when the user clicks the "Reply" button on a notification with <code>hasReply: true</code>.</p>
<h4 id="event-action-macos"><a href="#event-action-macos">Event: 'action' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-action-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>index</code> Number - The index of the action that was activated</li>
</ul>
<h3 id="instance-methods"><a href="#instance-methods">Instance Methods</a><a class="header-link" href="#instance-methods" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Objects created with <code>new Notification</code> have the following instance methods:</p>
<h4 id="notificationshow"><a href="#notificationshow"><code>notification.show()</code></a><a class="header-link" href="#notificationshow" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Immediately shows the notification to the user, please note this means unlike the
HTML5 Notification implementation, simply instantiating a <code>new Notification</code> does
not immediately show it to the user, you need to call this method before the OS
will display it.</p>
<p>If the notification has been shown before, this method will dismiss the previously
shown notification and create a new one with identical properties.</p>
<h4 id="notificationclose"><a href="#notificationclose"><code>notification.close()</code></a><a class="header-link" href="#notificationclose" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Dismisses the notification.</p>
<h3 id="playing-sounds"><a href="#playing-sounds">Playing Sounds</a><a class="header-link" href="#playing-sounds" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>On macOS, you can specify the name of the sound you'd like to play when the
notification is shown. Any of the default sounds (under System Preferences &gt;
Sound) can be used, in addition to custom sound files. Be sure that the sound
file is copied under the app bundle (e.g., <code>YourApp.app/Contents/Resources</code>),
or one of the following locations:</p>
<ul>
<li><code>~/Library/Sounds</code></li>
<li><code>/Library/Sounds</code></li>
<li><code>/Network/Library/Sounds</code></li>
<li><code>/System/Library/Sounds</code></li>
</ul>
<p>See the <a href="https://developer.apple.com/documentation/appkit/nssound"><code>NSSound</code></a> docs for more information.</p>

  <hr>
  <h1 id="notificationaction-object"><a href="#notificationaction-object">NotificationAction Object</a><a class="header-link" href="#notificationaction-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>type</code> String - The type of action, can be <code>button</code>.</li>
<li><code>text</code> String - (optional) The label for the given action.</li>
</ul>
<h2 id="platform--action-support"><a href="#platform--action-support">Platform / Action Support</a><a class="header-link" href="#platform--action-support" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<table>
<thead>
<tr>
<th>Action Type</th>
<th>Platform Support</th>
<th>Usage of 
<code>text</code></th>
<th>Default 
<code>text</code></th>
<th>Limitations</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>button</code></td>
<td>macOS</td>
<td>Used as the label for the button</td>
<td>"Show"</td>
<td>Maximum of one button, if multiple are provided only the last is used.  This action is also incompatible with 
<code>hasReply</code>
 and will be ignored if 
<code>hasReply</code>
 is 
<code>true</code>
.</td>
</tr>
</tbody>
</table>
<h3 id="button-support-on-macos"><a href="#button-support-on-macos">Button support on macOS</a><a class="header-link" href="#button-support-on-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>In order for extra notification buttons to work on macOS your app must meet the
following criteria.</p>
<ul>
<li>App is signed</li>
<li>App has it's <code>NSUserNotificationAlertStyle</code> set to <code>alert</code> in the <code>info.plist</code>.</li>
</ul>
<p>If either of these requirements are not met the button simply won't appear.</p>

  <hr>
  <h1 id="notifications-windows-linux-macos"><a href="#notifications-windows-linux-macos">Notifications (Windows, Linux, macOS)</a><a class="header-link" href="#notifications-windows-linux-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>All three operating systems provide means for applications to send notifications
to the user. Electron conveniently allows developers to send notifications with
the <a href="https://notifications.spec.whatwg.org/">HTML5 Notification API</a>, using
the currently running operating system's native notification APIs to display it.</p>
<p><strong>Note:</strong> Since this is an HTML5 API it is only available in the renderer process. If
you want to show Notifications in the main process please check out the
<a href="https://electronjs.org/docs/api/notification">Notification</a> module.</p>
<pre><code class="hljs language-javascript" id="_2f8hcz76"><span class="hljs-keyword">let</span> myNotification = <span class="hljs-keyword">new</span> Notification(<span class="hljs-string">'Title'</span>, {
  <span class="hljs-attr">body</span>: <span class="hljs-string">'Lorem Ipsum Dolor Sit Amet'</span>
})

myNotification.onclick = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Notification clicked'</span>)
}</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_2f8hcz76">Copy</button></pre>
<p>While code and user experience across operating systems are similar, there
are subtle differences.</p>
<h2 id="windows"><a href="#windows">Windows</a><a class="header-link" href="#windows" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<ul>
<li>On Windows 10, notifications "just work".</li>
<li>On Windows 8.1 and Windows 8, a shortcut to your app, with an <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx">Application User
Model ID</a>, must be installed to the Start screen. Note,
however, that it does not need to be pinned to the Start screen.</li>
<li>On Windows 7, notifications work via a custom implementation which visually
resembles the native one on newer systems.</li>
</ul>
<p>Furthermore, in Windows 8, the maximum length for the notification body is 250
characters, with the Windows team recommending that notifications should be kept
to 200 characters. That said, that limitation has been removed in Windows 10, with
the Windows team asking developers to be reasonable. Attempting to send gigantic
amounts of text to the API (thousands of characters) might result in instability.</p>
<h3 id="advanced-notifications"><a href="#advanced-notifications">Advanced Notifications</a><a class="header-link" href="#advanced-notifications" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Later versions of Windows allow for advanced notifications, with custom templates,
images, and other flexible elements. To send those notifications (from either the
main process or the renderer process), use the userland module
<a href="https://github.com/felixrieseberg/electron-windows-notifications">electron-windows-notifications</a>,
which uses native Node addons to send <code>ToastNotification</code> and <code>TileNotification</code> objects.</p>
<p>While notifications including buttons work with just <code>electron-windows-notifications</code>,
handling replies requires the use of <a href="https://github.com/felixrieseberg/electron-windows-interactive-notifications"><code>electron-windows-interactive-notifications</code></a>, which
helps with registering the required COM components and calling your Electron app with
the entered user data.</p>
<h3 id="quiet-hours--presentation-mode"><a href="#quiet-hours--presentation-mode">Quiet Hours / Presentation Mode</a><a class="header-link" href="#quiet-hours--presentation-mode" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>To detect whether or not you're allowed to send a notification, use the userland module
<a href="https://github.com/felixrieseberg/electron-notification-state">electron-notification-state</a>.</p>
<p>This allows you to determine ahead of time whether or not Windows will silently throw
the notification away.</p>
<h2 id="macos"><a href="#macos">macOS</a><a class="header-link" href="#macos" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Notifications are straight-forward on macOS, but you should be aware of
<a href="https://developer.apple.com/library/mac/documentation/UserExperience/Conceptual/OSXHIGuidelines/NotificationCenter.html">Apple's Human Interface guidelines regarding notifications</a>.</p>
<p>Note that notifications are limited to 256 bytes in size and will be truncated
if you exceed that limit.</p>
<h3 id="advanced-notifications-1"><a href="#advanced-notifications-1">Advanced Notifications</a><a class="header-link" href="#advanced-notifications-1" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Later versions of macOS allow for notifications with an input field, allowing the user
to quickly reply to a notification. In order to send notifications with an input field,
use the userland module <a href="https://github.com/CharlieHess/node-mac-notifier">node-mac-notifier</a>.</p>
<h3 id="do-not-disturb--session-state"><a href="#do-not-disturb--session-state">Do not disturb / Session State</a><a class="header-link" href="#do-not-disturb--session-state" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>To detect whether or not you're allowed to send a notification, use the userland module
<a href="https://github.com/felixrieseberg/electron-notification-state">electron-notification-state</a>.</p>
<p>This will allow you to detect ahead of time whether or not the notification will be displayed.</p>
<h2 id="linux"><a href="#linux">Linux</a><a class="header-link" href="#linux" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Notifications are sent using <code>libnotify</code> which can show notifications on any
desktop environment that follows <a href="https://developer.gnome.org/notification-spec/">Desktop Notifications
Specification</a>, including Cinnamon, Enlightenment, Unity,
GNOME, KDE.</p>

  <hr>
  <h1 id="offscreen-rendering"><a href="#offscreen-rendering">Offscreen Rendering</a><a class="header-link" href="#offscreen-rendering" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>Offscreen rendering lets you obtain the content of a browser window in a bitmap,
so it can be rendered anywhere, for example on a texture in a 3D scene. The
offscreen rendering in Electron uses a similar approach than the <a href="https://bitbucket.org/chromiumembedded/cef">Chromium
Embedded Framework</a> project.</p>
<p>Two modes of rendering can be used and only the dirty area is passed in the
<code>'paint'</code> event to be more efficient. The rendering can be stopped, continued
and the frame rate can be set. The specified frame rate is a top limit value,
when there is nothing happening on a webpage, no frames are generated. The
maximum frame rate is 60, because above that there is no benefit, just
performance loss.</p>
<p><strong>Note:</strong> An offscreen window is always created as a <a href="https://electronjs.org/docs/api/frameless-window">Frameless Window</a>.</p>
<h2 id="two-modes-of-rendering"><a href="#two-modes-of-rendering">Two modes of rendering</a><a class="header-link" href="#two-modes-of-rendering" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<h3 id="gpu-accelerated"><a href="#gpu-accelerated">GPU accelerated</a><a class="header-link" href="#gpu-accelerated" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>GPU accelerated rendering means that the GPU is used for composition. Because of
that the frame has to be copied from the GPU which requires more performance,
thus this mode is quite a bit slower than the other one. The benefit of this
mode that WebGL and 3D CSS animations are supported.</p>
<h3 id="software-output-device"><a href="#software-output-device">Software output device</a><a class="header-link" href="#software-output-device" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>This mode uses a software output device for rendering in the CPU, so the frame
generation is much faster, thus this mode is preferred over the GPU accelerated
one.</p>
<p>To enable this mode GPU acceleration has to be disabled by calling the
<a href="https://electronjs.org/docs/api/app#appdisablehardwareacceleration"><code>app.disableHardwareAcceleration()</code></a> API.</p>
<h2 id="usage"><a href="#usage">Usage</a><a class="header-link" href="#usage" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<pre><code class="hljs language-javascript" id="_0bpavh3h"><span class="hljs-keyword">const</span> {app, BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

app.disableHardwareAcceleration()

<span class="hljs-keyword">let</span> win
app.once(<span class="hljs-string">'ready'</span>, () =&gt; {
  win = <span class="hljs-keyword">new</span> BrowserWindow({
    <span class="hljs-attr">webPreferences</span>: {
      <span class="hljs-attr">offscreen</span>: <span class="hljs-literal">true</span>
    }
  })
  win.loadURL(<span class="hljs-string">'http://github.com'</span>)
  win.webContents.on(<span class="hljs-string">'paint'</span>, (event, dirty, image) =&gt; {
    <span class="hljs-comment">// updateBitmap(dirty, image.getBitmap())</span>
  })
  win.webContents.setFrameRate(<span class="hljs-number">30</span>)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_0bpavh3h">Copy</button></pre>

  <hr>
  <h1 id="onlineoffline-event-detection"><a href="#onlineoffline-event-detection">Online/Offline Event Detection</a><a class="header-link" href="#onlineoffline-event-detection" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p><a href="https://developer.mozilla.org/en-US/docs/Online_and_offline_events">Online and offline event</a> detection can be implemented in the renderer process using the <a href="http://html5index.org/Offline%20-%20NavigatorOnLine.html"><code>navigator.onLine</code></a> attribute, part of standard HTML5 API.
The <code>navigator.onLine</code> attribute returns <code>false</code> if any network requests are guaranteed to fail i.e. definitely offline (disconnected from the network). It returns <code>true</code> in all other cases.
Since all other conditions return <code>true</code>, one has to be mindful of getting false positives, as we cannot assume <code>true</code>
 value necessarily means that Electron can access the internet. Such as 
in cases where the computer is running a virtualization software that 
has virtual ethernet adapters that are always “connected.”
Therefore, if you really want to determine the internet access status of
 Electron,
you should develop additional means for checking.</p>
<p>Example:</p>
<p><em>main.js</em></p>
<pre><code class="hljs language-javascript" id="_f5rxz7d"><span class="hljs-keyword">const</span> {app, BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-keyword">let</span> onlineStatusWindow

app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  onlineStatusWindow = <span class="hljs-keyword">new</span> BrowserWindow({ <span class="hljs-attr">width</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span> })
  onlineStatusWindow.loadURL(<span class="hljs-string">`file://<span class="hljs-subst">${__dirname}</span>/online-status.html`</span>)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_f5rxz7d">Copy</button></pre>
<p><em>online-status.html</em></p>
<pre><code class="hljs language-html" id="_04nqyzvb"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
  <span class="hljs-keyword">const</span> alertOnlineStatus = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
    <span class="hljs-built_in">window</span>.alert(navigator.onLine ? <span class="hljs-string">'online'</span> : <span class="hljs-string">'offline'</span>)
  }

  <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'online'</span>,  alertOnlineStatus)
  <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'offline'</span>,  alertOnlineStatus)

  alertOnlineStatus()
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_04nqyzvb">Copy</button></pre>
<p>There may be instances where you want to respond to these events in the
main process as well. The main process however does not have a
<code>navigator</code> object and thus cannot detect these events directly. Using
Electron's inter-process communication utilities, the events can be forwarded
to the main process and handled as needed, as shown in the following example.</p>
<p><em>main.js</em></p>
<pre><code class="hljs language-javascript" id="_py13ddck"><span class="hljs-keyword">const</span> {app, BrowserWindow, ipcMain} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> onlineStatusWindow

app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  onlineStatusWindow = <span class="hljs-keyword">new</span> BrowserWindow({ <span class="hljs-attr">width</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span> })
  onlineStatusWindow.loadURL(<span class="hljs-string">`file://<span class="hljs-subst">${__dirname}</span>/online-status.html`</span>)
})

ipcMain.on(<span class="hljs-string">'online-status-changed'</span>, (event, status) =&gt; {
  <span class="hljs-built_in">console</span>.log(status)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_py13ddck">Copy</button></pre>
<p><em>online-status.html</em></p>
<pre><code class="hljs language-html" id="_opdskqkk"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
  <span class="hljs-keyword">const</span> {ipcRenderer} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
  <span class="hljs-keyword">const</span> updateOnlineStatus = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
    ipcRenderer.send(<span class="hljs-string">'online-status-changed'</span>, navigator.onLine ? <span class="hljs-string">'online'</span> : <span class="hljs-string">'offline'</span>)
  }

  <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'online'</span>,  updateOnlineStatus)
  <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'offline'</span>,  updateOnlineStatus)

  updateOnlineStatus()
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_opdskqkk">Copy</button></pre>

  <hr>
  <h1 id="planned-breaking-api-changes"><a href="#planned-breaking-api-changes">Planned Breaking API Changes</a><a class="header-link" href="#planned-breaking-api-changes" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>The following list includes the APIs that will be removed in Electron 2.0.</p>
<p>There is no timetable for when this release will occur but deprecation
warnings will be added at least 90 days beforehand.</p>
<h2 id="app"><a href="#app"><code>app</code></a><a class="header-link" href="#app" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<pre><code class="hljs language-js" id="_k1wjso1"><span class="hljs-comment">// Deprecated</span>
app.getAppMemoryInfo()
<span class="hljs-comment">// Replace with</span>
app.getAppMetrics()</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_k1wjso1">Copy</button></pre>
<h2 id="browserwindow"><a href="#browserwindow"><code>BrowserWindow</code></a><a class="header-link" href="#browserwindow" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<pre><code class="hljs language-js" id="_nkasb10b"><span class="hljs-comment">// Deprecated</span>
<span class="hljs-keyword">let</span> optionsA = {<span class="hljs-attr">webPreferences</span>: {<span class="hljs-attr">blinkFeatures</span>: <span class="hljs-string">''</span>}}
<span class="hljs-keyword">let</span> windowA = <span class="hljs-keyword">new</span> BrowserWindow(optionsA)
<span class="hljs-comment">// Replace with</span>
<span class="hljs-keyword">let</span> optionsB = {<span class="hljs-attr">webPreferences</span>: {<span class="hljs-attr">enableBlinkFeatures</span>: <span class="hljs-string">''</span>}}
<span class="hljs-keyword">let</span> windowB = <span class="hljs-keyword">new</span> BrowserWindow(optionsB)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_nkasb10b">Copy</button></pre>
<pre><code class="hljs language-js" id="_bjzvykj9"><span class="hljs-comment">// Deprecated</span>
<span class="hljs-keyword">let</span> optionsA = {<span class="hljs-attr">titleBarStyle</span>: <span class="hljs-string">'hidden-inset'</span>}
<span class="hljs-keyword">let</span> windowA = <span class="hljs-keyword">new</span> BrowserWindow(optionsA)
<span class="hljs-comment">// Replace with</span>
<span class="hljs-keyword">let</span> optionsB = {<span class="hljs-attr">titleBarStyle</span>: <span class="hljs-string">'hiddenInset'</span>}
<span class="hljs-keyword">let</span> windowB = <span class="hljs-keyword">new</span> BrowserWindow(optionsB)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_bjzvykj9">Copy</button></pre>
<h2 id="clipboard"><a href="#clipboard"><code>clipboard</code></a><a class="header-link" href="#clipboard" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<pre><code class="hljs language-js" id="_ghqtwrd"><span class="hljs-comment">// Deprecated</span>
clipboard.readRtf()
<span class="hljs-comment">// Replace with</span>
clipboard.readRTF()

<span class="hljs-comment">// Deprecated</span>
clipboard.writeRtf()
<span class="hljs-comment">// Replace with</span>
clipboard.writeRTF()

<span class="hljs-comment">// Deprecated</span>
clipboard.readHtml()
<span class="hljs-comment">// Replace with</span>
clipboard.readHTML()

<span class="hljs-comment">// Deprecated</span>
clipboard.writeHtml()
<span class="hljs-comment">// Replace with</span>
clipboard.writeHTML()</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_ghqtwrd">Copy</button></pre>
<h2 id="crashreporter"><a href="#crashreporter"><code>crashReporter</code></a><a class="header-link" href="#crashreporter" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<pre><code class="hljs language-js" id="_uykrzxdw"><span class="hljs-comment">// Deprecated</span>
crashReporter.start({
  <span class="hljs-attr">companyName</span>: <span class="hljs-string">'Crashly'</span>,
  <span class="hljs-attr">submitURL</span>: <span class="hljs-string">'https://crash.server.com'</span>,
  <span class="hljs-attr">autoSubmit</span>: <span class="hljs-literal">true</span>
})
<span class="hljs-comment">// Replace with</span>
crashReporter.start({
  <span class="hljs-attr">companyName</span>: <span class="hljs-string">'Crashly'</span>,
  <span class="hljs-attr">submitURL</span>: <span class="hljs-string">'https://crash.server.com'</span>,
  <span class="hljs-attr">uploadToServer</span>: <span class="hljs-literal">true</span>
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_uykrzxdw">Copy</button></pre>
<h2 id="menu"><a href="#menu"><code>menu</code></a><a class="header-link" href="#menu" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<pre><code class="hljs language-js" id="_l7cnqe5"><span class="hljs-comment">// Deprecated</span>
menu.popup(browserWindow, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">2</span>)
<span class="hljs-comment">// Replace with</span>
menu.popup(browserWindow, {<span class="hljs-attr">x</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">200</span>, <span class="hljs-attr">positioningItem</span>: <span class="hljs-number">2</span>})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_l7cnqe5">Copy</button></pre>
<h2 id="nativeimage"><a href="#nativeimage"><code>nativeImage</code></a><a class="header-link" href="#nativeimage" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<pre><code class="hljs language-js" id="_6iqqfwxd"><span class="hljs-comment">// Deprecated</span>
nativeImage.toPng()
<span class="hljs-comment">// Replace with</span>
nativeImage.toPNG()

<span class="hljs-comment">// Deprecated</span>
nativeImage.toJpeg()
<span class="hljs-comment">// Replace with</span>
nativeImage.toJPEG()

<span class="hljs-comment">// Deprecated</span>
nativeImage.createFromBuffer(buffer, <span class="hljs-number">1.0</span>)
<span class="hljs-comment">// Replace with</span>
nativeImage.createFromBuffer(buffer, {
  <span class="hljs-attr">scaleFactor</span>: <span class="hljs-number">1.0</span>
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_6iqqfwxd">Copy</button></pre>
<h2 id="process"><a href="#process"><code>process</code></a><a class="header-link" href="#process" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<pre><code class="hljs language-js" id="_pefedusr"><span class="hljs-comment">// Deprecated</span>
process.versions[<span class="hljs-string">'atom-shell'</span>]
<span class="hljs-comment">// Replace with</span>
process.versions.electron</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_pefedusr">Copy</button></pre>
<ul>
<li><code>process.versions.electron</code> and <code>process.version.chrome</code> will be made
read-only properties for consistency with the other <code>process.versions</code>
properties set by Node.</li>
</ul>
<h2 id="session"><a href="#session"><code>session</code></a><a class="header-link" href="#session" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<pre><code class="hljs language-js" id="_rblwbxxp"><span class="hljs-comment">// Deprecated</span>
ses.setCertificateVerifyProc(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">hostname, certificate, callback</span>) </span>{
  callback(<span class="hljs-literal">true</span>)
})
<span class="hljs-comment">// Replace with</span>
ses.setCertificateVerifyProc(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">request, callback</span>) </span>{
  callback(<span class="hljs-number">0</span>)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_rblwbxxp">Copy</button></pre>
<h2 id="tray"><a href="#tray"><code>Tray</code></a><a class="header-link" href="#tray" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<pre><code class="hljs language-js" id="_fpmpjbo"><span class="hljs-comment">// Deprecated</span>
tray.setHighlightMode(<span class="hljs-literal">true</span>)
<span class="hljs-comment">// Replace with</span>
tray.setHighlightMode(<span class="hljs-string">'on'</span>)

<span class="hljs-comment">// Deprecated</span>
tray.setHighlightMode(<span class="hljs-literal">false</span>)
<span class="hljs-comment">// Replace with</span>
tray.setHighlightMode(<span class="hljs-string">'off'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_fpmpjbo">Copy</button></pre>
<h2 id="webcontents"><a href="#webcontents"><code>webContents</code></a><a class="header-link" href="#webcontents" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<pre><code class="hljs language-js" id="_eqcr13ev"><span class="hljs-comment">// Deprecated</span>
webContents.openDevTools({<span class="hljs-attr">detach</span>: <span class="hljs-literal">true</span>})
<span class="hljs-comment">// Replace with</span>
webContents.openDevTools({<span class="hljs-attr">mode</span>: <span class="hljs-string">'detach'</span>})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_eqcr13ev">Copy</button></pre>
<pre><code class="hljs language-js" id="_pj3pgls"><span class="hljs-comment">// Deprecated</span>
webContents.setZoomLevelLimits(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)
<span class="hljs-comment">// Replace with</span>
webContents.setVisualZoomLevelLimits(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_pj3pgls">Copy</button></pre>
<h2 id="webframe"><a href="#webframe"><code>webFrame</code></a><a class="header-link" href="#webframe" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<pre><code class="hljs language-js" id="_lrtjcmah"><span class="hljs-comment">// Deprecated</span>
webFrame.setZoomLevelLimits(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)
<span class="hljs-comment">// Replace with</span>
webFrame.setVisualZoomLevelLimits(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)

<span class="hljs-comment">// Deprecated</span>
webFrame.registerURLSchemeAsSecure(<span class="hljs-string">'app'</span>)
<span class="hljs-comment">// Replace with</span>
protocol.registerStandardSchemes([<span class="hljs-string">'app'</span>], {<span class="hljs-attr">secure</span>: <span class="hljs-literal">true</span>})

<span class="hljs-comment">// Deprecated</span>
webFrame.registerURLSchemeAsPrivileged(<span class="hljs-string">'app'</span>, {<span class="hljs-attr">secure</span>: <span class="hljs-literal">true</span>})
<span class="hljs-comment">// Replace with</span>
protocol.registerStandardSchemes([<span class="hljs-string">'app'</span>], {<span class="hljs-attr">secure</span>: <span class="hljs-literal">true</span>})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_lrtjcmah">Copy</button></pre>
<h2 id="webview"><a href="#webview"><code>&lt;webview&gt;</code></a><a class="header-link" href="#webview" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<pre><code class="hljs language-js" id="_m3iqybpm"><span class="hljs-comment">// Deprecated</span>
webview.setZoomLevelLimits(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)
<span class="hljs-comment">// Replace with</span>
webview.setVisualZoomLevelLimits(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_m3iqybpm">Copy</button></pre>
<h2 id="node-headers-url"><a href="#node-headers-url">Node Headers URL</a><a class="header-link" href="#node-headers-url" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>This is the URL specified as <code>disturl</code> in a <code>.npmrc</code> file or as the <code>--dist-url</code>
command line flag when building native Node modules.</p>
<p>Deprecated: <a href="https://atom.io/download/atom-shell">atom.io/download/atom-shell</a></p>
<p>Replace with: <a href="https://atom.io/download/electron">atom.io/download/electron</a></p>
<h2 id="duplicate-arm-assets"><a href="#duplicate-arm-assets">Duplicate ARM Assets</a><a class="header-link" href="#duplicate-arm-assets" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Each Electron release includes two identical ARM builds with slightly different
filenames, like <code>electron-v1.7.3-linux-arm.zip</code> and
<code>electron-v1.7.3-linux-armv7l.zip</code>. The asset with the <code>v7l</code> prefix was added
to clarify to users which ARM version it supports, and to disambiguate it from
future armv6l and arm64 assets that may be produced.</p>
<p>The file <em>without the prefix</em> is still being published to avoid breaking any
setups that may be consuming it. Starting at 2.0, the un-prefixed file will
no longer be published.</p>
<p>For details, see
<a href="https://github.com/electron/electron/pull/6986">6986</a>
and
<a href="https://github.com/electron/electron/pull/7189">7189</a>.</p>
<h2 id="fixme-comments"><a href="#fixme-comments"><code>FIXME</code> comments</a><a class="header-link" href="#fixme-comments" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>FIXME</code> string is used in code comments to denote things that should be
fixed for the 2.0 release. See
<a href="https://github.com/electron/electron/search?q=fixme">github.com/electron/electron/search?q=fixme</a></p>

  <hr>
  <h1 id="point-object"><a href="#point-object">Point Object</a><a class="header-link" href="#point-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>x</code> Number</li>
<li><code>y</code> Number</li>
</ul>

  <hr>
  <h1 id="powermonitor"><a href="#powermonitor">powerMonitor</a><a class="header-link" href="#powermonitor" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Monitor power state changes.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<p>You cannot require or use this module until the <code>ready</code> event of the <code>app</code>
module is emitted.</p>
<p>For example:</p>
<pre><code class="hljs language-javascript" id="_ivmgv9pc"><span class="hljs-keyword">const</span> electron = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">const</span> {app} = electron

app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  electron.powerMonitor.on(<span class="hljs-string">'suspend'</span>, () =&gt; {
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'The system is going to sleep'</span>)
  })
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_ivmgv9pc">Copy</button></pre>
<h2 id="events"><a href="#events">Events</a><a class="header-link" href="#events" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>powerMonitor</code> module emits the following events:</p>
<h3 id="event-suspend"><a href="#event-suspend">Event: 'suspend'</a><a class="header-link" href="#event-suspend" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Emitted when the system is suspending.</p>
<h3 id="event-resume"><a href="#event-resume">Event: 'resume'</a><a class="header-link" href="#event-resume" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Emitted when system is resuming.</p>
<h3 id="event-on-ac-windows"><a href="#event-on-ac-windows">Event: 'on-ac' <em class="platform-label">Windows</em></a><a class="header-link" href="#event-on-ac-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Emitted when the system changes to AC power.</p>
<h3 id="event-on-battery-windows"><a href="#event-on-battery-windows">Event: 'on-battery' <em class="platform-label">Windows</em></a><a class="header-link" href="#event-on-battery-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Emitted when system changes to battery power.</p>

  <hr>
  <h1 id="powersaveblocker"><a href="#powersaveblocker">powerSaveBlocker</a><a class="header-link" href="#powersaveblocker" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Block the system from entering low-power (sleep) mode.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<p>For example:</p>
<pre><code class="hljs language-javascript" id="_mifha6kn"><span class="hljs-keyword">const</span> {powerSaveBlocker} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-keyword">const</span> id = powerSaveBlocker.start(<span class="hljs-string">'prevent-display-sleep'</span>)
<span class="hljs-built_in">console</span>.log(powerSaveBlocker.isStarted(id))

powerSaveBlocker.stop(id)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_mifha6kn">Copy</button></pre>
<h2 id="methods"><a href="#methods">Methods</a><a class="header-link" href="#methods" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>powerSaveBlocker</code> module has the following methods:</p>
<h3 id="powersaveblockerstarttype"><a href="#powersaveblockerstarttype"><code>powerSaveBlocker.start(type)</code></a><a class="header-link" href="#powersaveblockerstarttype" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>type</code> String - Power save blocker type.</p>
<ul>
<li><code>prevent-app-suspension</code> - Prevent the application from being suspended.
Keeps system active but allows screen to be turned off.  Example use cases:
downloading a file or playing audio.</li>
<li><code>prevent-display-sleep</code> - Prevent the display from going to sleep. Keeps
system and screen active.  Example use case: playing video.</li>
</ul>
</li>
</ul>
<p>Returns <code>Integer</code> - The blocker ID that is assigned to this power blocker</p>
<p>Starts preventing the system from entering lower-power mode. Returns an integer
identifying the power save blocker.</p>
<p><strong>Note:</strong> <code>prevent-display-sleep</code> has higher precedence over
<code>prevent-app-suspension</code>. Only the highest precedence type takes effect. In
other words, <code>prevent-display-sleep</code> always takes precedence over
<code>prevent-app-suspension</code>.</p>
<p>For example, an API calling A requests for <code>prevent-app-suspension</code>, and
another calling B requests for <code>prevent-display-sleep</code>. <code>prevent-display-sleep</code>
will be used until B stops its request. After that, <code>prevent-app-suspension</code>
is used.</p>
<h3 id="powersaveblockerstopid"><a href="#powersaveblockerstopid"><code>powerSaveBlocker.stop(id)</code></a><a class="header-link" href="#powersaveblockerstopid" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>id</code> Integer - The power save blocker id returned by <code>powerSaveBlocker.start</code>.</li>
</ul>
<p>Stops the specified power save blocker.</p>
<h3 id="powersaveblockerisstartedid"><a href="#powersaveblockerisstartedid"><code>powerSaveBlocker.isStarted(id)</code></a><a class="header-link" href="#powersaveblockerisstartedid" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>id</code> Integer - The power save blocker id returned by <code>powerSaveBlocker.start</code>.</li>
</ul>
<p>Returns <code>Boolean</code> - Whether the corresponding <code>powerSaveBlocker</code> has started.</p>

  <hr>
  <h1 id="printerinfo-object"><a href="#printerinfo-object">PrinterInfo Object</a><a class="header-link" href="#printerinfo-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>name</code> String</li>
<li><code>description</code> String</li>
<li><code>status</code> Number</li>
<li><code>isDefault</code> Boolean</li>
</ul>
<h2 id="example"><a href="#example">Example</a><a class="header-link" href="#example" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Below is an example of some of the additional options that may be set which
may be different on each platform.</p>
<pre><code class="hljs language-javascript" id="_ydmyb5ek">{
  <span class="hljs-attr">name</span>: <span class="hljs-string">'Zebra_LP2844'</span>,
  <span class="hljs-attr">description</span>: <span class="hljs-string">'Zebra LP2844'</span>,
  <span class="hljs-attr">status</span>: <span class="hljs-number">3</span>,
  <span class="hljs-attr">isDefault</span>: <span class="hljs-literal">false</span>,
  <span class="hljs-attr">options</span>: {
    <span class="hljs-attr">copies</span>: <span class="hljs-string">'1'</span>,
    <span class="hljs-string">'device-uri'</span>: <span class="hljs-string">'usb://Zebra/LP2844?location=14200000'</span>,
    <span class="hljs-attr">finishings</span>: <span class="hljs-string">'3'</span>,
    <span class="hljs-string">'job-cancel-after'</span>: <span class="hljs-string">'10800'</span>,
    <span class="hljs-string">'job-hold-until'</span>: <span class="hljs-string">'no-hold'</span>,
    <span class="hljs-string">'job-priority'</span>: <span class="hljs-string">'50'</span>,
    <span class="hljs-string">'job-sheets'</span>: <span class="hljs-string">'none,none'</span>,
    <span class="hljs-string">'marker-change-time'</span>: <span class="hljs-string">'0'</span>,
    <span class="hljs-string">'number-up'</span>: <span class="hljs-string">'1'</span>,
    <span class="hljs-string">'printer-commands'</span>: <span class="hljs-string">'none'</span>,
    <span class="hljs-string">'printer-info'</span>: <span class="hljs-string">'Zebra LP2844'</span>,
    <span class="hljs-string">'printer-is-accepting-jobs'</span>: <span class="hljs-string">'true'</span>,
    <span class="hljs-string">'printer-is-shared'</span>: <span class="hljs-string">'true'</span>,
    <span class="hljs-string">'printer-location'</span>: <span class="hljs-string">''</span>,
    <span class="hljs-string">'printer-make-and-model'</span>: <span class="hljs-string">'Zebra EPL2 Label Printer'</span>,
    <span class="hljs-string">'printer-state'</span>: <span class="hljs-string">'3'</span>,
    <span class="hljs-string">'printer-state-change-time'</span>: <span class="hljs-string">'1484872644'</span>,
    <span class="hljs-string">'printer-state-reasons'</span>: <span class="hljs-string">'offline-report'</span>,
    <span class="hljs-string">'printer-type'</span>: <span class="hljs-string">'36932'</span>,
    <span class="hljs-string">'printer-uri-supported'</span>: <span class="hljs-string">'ipp://localhost/printers/Zebra_LP2844'</span>,
    <span class="hljs-attr">system_driverinfo</span>: <span class="hljs-string">'Z'</span>
  }
}</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_ydmyb5ek">Copy</button></pre>

  <hr>
  <h1 id="process"><a href="#process">process</a><a class="header-link" href="#process" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Extensions to process object.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a>, <a href="https://electronjs.org/docs/glossary#renderer-process">Renderer</a></p>
<p>Electron's <code>process</code> object is extended from the
<a href="https://nodejs.org/api/process.html">Node.js <code>process</code> object</a>.
It adds the following events, properties, and methods:</p>
<h2 id="events"><a href="#events">Events</a><a class="header-link" href="#events" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<h3 id="event-loaded"><a href="#event-loaded">Event: 'loaded'</a><a class="header-link" href="#event-loaded" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Emitted when Electron has loaded its internal initialization script and is
beginning to load the web page or the main script.</p>
<p>It can be used by the preload script to add removed Node global symbols back to
the global scope when node integration is turned off:</p>
<pre><code class="hljs language-javascript" id="_pesbxj6a"><span class="hljs-comment">// preload.js</span>
<span class="hljs-keyword">const</span> _setImmediate = setImmediate
<span class="hljs-keyword">const</span> _clearImmediate = clearImmediate
process.once(<span class="hljs-string">'loaded'</span>, () =&gt; {
  global.setImmediate = _setImmediate
  global.clearImmediate = _clearImmediate
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_pesbxj6a">Copy</button></pre>
<h2 id="properties"><a href="#properties">Properties</a><a class="header-link" href="#properties" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<h3 id="processdefaultapp"><a href="#processdefaultapp"><code>process.defaultApp</code></a><a class="header-link" href="#processdefaultapp" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>A <code>Boolean</code>. When app is started by being passed as parameter to the default app, this
property is <code>true</code> in the main process, otherwise it is <code>undefined</code>.</p>
<h3 id="processmas"><a href="#processmas"><code>process.mas</code></a><a class="header-link" href="#processmas" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>A <code>Boolean</code>. For Mac App Store build, this property is <code>true</code>, for other builds it is
<code>undefined</code>.</p>
<h3 id="processnoasar"><a href="#processnoasar"><code>process.noAsar</code></a><a class="header-link" href="#processnoasar" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>A <code>Boolean</code> that controls ASAR support inside your application. Setting this to <code>true</code>
will disable the support for <code>asar</code> archives in Node's built-in modules.</p>
<h3 id="processnodeprecation"><a href="#processnodeprecation"><code>process.noDeprecation</code></a><a class="header-link" href="#processnodeprecation" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>A <code>Boolean</code> that controls whether or not deprecation warnings are printed to <code>stderr</code>.<br>
Setting this to <code>true</code> will silence deprecation warnings.  This property is used
instead of the <code>--no-deprecation</code> command line flag.</p>
<h3 id="processresourcespath"><a href="#processresourcespath"><code>process.resourcesPath</code></a><a class="header-link" href="#processresourcespath" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>A <code>String</code> representing the path to the resources directory.</p>
<h3 id="processthrowdeprecation"><a href="#processthrowdeprecation"><code>process.throwDeprecation</code></a><a class="header-link" href="#processthrowdeprecation" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>A <code>Boolean</code> that controls whether or not deprecation warnings will be thrown as
exceptions.  Setting this to <code>true</code> will throw errors for deprecations.  This
property is used instead of the <code>--throw-deprecation</code> command line flag.</p>
<h3 id="processtracedeprecation"><a href="#processtracedeprecation"><code>process.traceDeprecation</code></a><a class="header-link" href="#processtracedeprecation" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>A <code>Boolean</code> that controls whether or not deprecations printed to <code>stderr</code> include
their stack trace.  Setting this to <code>true</code> will print  stack traces for deprecations.
This property is instead of the <code>--trace-deprecation</code> command line flag.</p>
<h3 id="processtraceprocesswarnings"><a href="#processtraceprocesswarnings"><code>process.traceProcessWarnings</code></a><a class="header-link" href="#processtraceprocesswarnings" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>A <code>Boolean</code> that controls whether or not process warnings printed to <code>stderr</code> include
their stack trace.  Setting this to <code>true</code> will print stack traces for process warnings
(including deprecations).  This property is instead of the <code>--trace-warnings</code> command
line flag.</p>
<h3 id="processtype"><a href="#processtype"><code>process.type</code></a><a class="header-link" href="#processtype" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>A <code>String</code> representing the current process's type, can be <code>"browser"</code> (i.e. main process) or <code>"renderer"</code>.</p>
<h3 id="processversionschrome"><a href="#processversionschrome"><code>process.versions.chrome</code></a><a class="header-link" href="#processversionschrome" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>A <code>String</code> representing Chrome's version string.</p>
<h3 id="processversionselectron"><a href="#processversionselectron"><code>process.versions.electron</code></a><a class="header-link" href="#processversionselectron" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>A <code>String</code> representing Electron's version string.</p>
<h3 id="processwindowsstore"><a href="#processwindowsstore"><code>process.windowsStore</code></a><a class="header-link" href="#processwindowsstore" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>A <code>Boolean</code>. If the app is running as a Windows Store app (appx), this property is <code>true</code>,
for otherwise it is <code>undefined</code>.</p>
<h2 id="methods"><a href="#methods">Methods</a><a class="header-link" href="#methods" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>process</code> object has the following methods:</p>
<h3 id="processcrash"><a href="#processcrash"><code>process.crash()</code></a><a class="header-link" href="#processcrash" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Causes the main thread of the current process crash.</p>
<h3 id="processgetcpuusage"><a href="#processgetcpuusage"><code>process.getCPUUsage()</code></a><a class="header-link" href="#processgetcpuusage" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <a href="https://electronjs.org/docs/api/structures/cpu-usage"><code>CPUUsage</code></a></p>
<h3 id="processgetiocounters-windows-linux"><a href="#processgetiocounters-windows-linux"><code>process.getIOCounters()</code> <em class="platform-label">Windows</em> <em class="platform-label">Linux</em></a><a class="header-link" href="#processgetiocounters-windows-linux" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <a href="https://electronjs.org/docs/api/structures/io-counters"><code>IOCounters</code></a></p>
<h3 id="processgetprocessmemoryinfo"><a href="#processgetprocessmemoryinfo"><code>process.getProcessMemoryInfo()</code></a><a class="header-link" href="#processgetprocessmemoryinfo" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Object</code>:</p>
<ul>
<li><code>workingSetSize</code> Integer - The amount of memory currently pinned to actual physical
RAM.</li>
<li><code>peakWorkingSetSize</code> Integer - The maximum amount of memory that has ever been pinned
to actual physical RAM.</li>
<li><code>privateBytes</code> Integer - The amount of memory not shared by other processes, such as
JS heap or HTML content.</li>
<li><code>sharedBytes</code> Integer - The amount of memory shared between processes, typically
memory consumed by the Electron code itself</li>
</ul>
<p>Returns an object giving memory usage statistics about the current process. Note
that all statistics are reported in Kilobytes.</p>
<h3 id="processgetsystemmemoryinfo"><a href="#processgetsystemmemoryinfo"><code>process.getSystemMemoryInfo()</code></a><a class="header-link" href="#processgetsystemmemoryinfo" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Object</code>:</p>
<ul>
<li><code>total</code> Integer - The total amount of physical memory in Kilobytes available to the
system.</li>
<li><code>free</code> Integer - The total amount of memory not being used by applications or disk
cache.</li>
<li><code>swapTotal</code> Integer - The total amount of swap memory in Kilobytes available to the
system.  <em class="platform-label">Windows</em> <em class="platform-label">Linux</em></li>
<li><code>swapFree</code> Integer - The free amount of swap memory in Kilobytes available to the
system.  <em class="platform-label">Windows</em> <em class="platform-label">Linux</em></li>
</ul>
<p>Returns an object giving memory usage statistics about the entire system. Note
that all statistics are reported in Kilobytes.</p>
<h3 id="processhang"><a href="#processhang"><code>process.hang()</code></a><a class="header-link" href="#processhang" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Causes the main thread of the current process hang.</p>
<h3 id="processsetfdlimitmaxdescriptors-macos-linux"><a href="#processsetfdlimitmaxdescriptors-macos-linux"><code>process.setFdLimit(maxDescriptors)</code> <em class="platform-label">macOS</em> <em class="platform-label">Linux</em></a><a class="header-link" href="#processsetfdlimitmaxdescriptors-macos-linux" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>maxDescriptors</code> Integer</li>
</ul>
<p>Sets the file descriptor soft limit to <code>maxDescriptors</code> or the OS hard
limit, whichever is lower for the current process.</p>

  <hr>
  <h1 id="processmetric-object"><a href="#processmetric-object">ProcessMetric Object</a><a class="header-link" href="#processmetric-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>pid</code> Integer - Process id of the process.</li>
<li><code>type</code> String - Process type (Browser or Tab or GPU etc).</li>
<li><code>memory</code> <a href="https://electronjs.org/docs/api/structures/memory-info">MemoryInfo</a> - Memory information for the process.</li>
<li><code>cpu</code> <a href="https://electronjs.org/docs/api/structures/cpu-usage">CPUUsage</a> - CPU usage of the process.</li>
</ul>

  <hr>
  <h1 id="protocol"><a href="#protocol">protocol</a><a class="header-link" href="#protocol" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Register a custom protocol and intercept existing protocol requests.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<p>An example of implementing a protocol that has the same effect as the
<code>file://</code> protocol:</p>
<pre><code class="hljs language-javascript" id="_huogow"><span class="hljs-keyword">const</span> {app, protocol} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>)

app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  protocol.registerFileProtocol(<span class="hljs-string">'atom'</span>, (request, callback) =&gt; {
    <span class="hljs-keyword">const</span> url = request.url.substr(<span class="hljs-number">7</span>)
    callback({<span class="hljs-attr">path</span>: path.normalize(<span class="hljs-string">`<span class="hljs-subst">${__dirname}</span>/<span class="hljs-subst">${url}</span>`</span>)})
  }, (error) =&gt; {
    <span class="hljs-keyword">if</span> (error) <span class="hljs-built_in">console</span>.error(<span class="hljs-string">'Failed to register protocol'</span>)
  })
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_huogow">Copy</button></pre>
<p><strong>Note:</strong> All methods unless specified can only be used after the <code>ready</code> event
of the <code>app</code> module gets emitted.</p>
<h2 id="methods"><a href="#methods">Methods</a><a class="header-link" href="#methods" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>protocol</code> module has the following methods:</p>
<h3 id="protocolregisterstandardschemesschemes-options"><a href="#protocolregisterstandardschemesschemes-options"><code>protocol.registerStandardSchemes(schemes[, options])</code></a><a class="header-link" href="#protocolregisterstandardschemesschemes-options" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>schemes</code> String[] - Custom schemes to be registered as standard schemes.</li>
<li>
<p><code>options</code> Object (optional)</p>
<ul>
<li><code>secure</code> Boolean (optional) - <code>true</code> to register the scheme as secure.
Default <code>false</code>.</li>
</ul>
</li>
</ul>
<p>A standard scheme adheres to what RFC 3986 calls <a href="https://tools.ietf.org/html/rfc3986#section-3">generic URI
syntax</a>. For example <code>http</code> and
<code>https</code> are standard schemes, while <code>file</code> is not.</p>
<p>Registering a scheme as standard, will allow relative and absolute resources to
be resolved correctly when served. Otherwise the scheme will behave like the
<code>file</code> protocol, but without the ability to resolve relative URLs.</p>
<p>For example when you load following page with custom protocol without
registering it as standard scheme, the image will not be loaded because
non-standard schemes can not recognize relative URLs:</p>
<pre><code class="hljs language-html" id="_oqyuzs88"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">'test.png'</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_oqyuzs88">Copy</button></pre>
<p>Registering a scheme as standard will allow access to files through the
<a href="https://developer.mozilla.org/en-US/docs/Web/API/LocalFileSystem">FileSystem API</a>. Otherwise the renderer will throw a security
error for the scheme.</p>
<p>By default web storage apis (localStorage, sessionStorage, webSQL, indexedDB, cookies)
are disabled for non standard schemes. So in general if you want to register a
custom protocol to replace the <code>http</code> protocol, you have to register it as a standard scheme:</p>
<pre><code class="hljs language-javascript" id="_6ls0jqvv"><span class="hljs-keyword">const</span> {app, protocol} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

protocol.registerStandardSchemes([<span class="hljs-string">'atom'</span>])
app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  protocol.registerHttpProtocol(<span class="hljs-string">'atom'</span>, <span class="hljs-string">'...'</span>)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_6ls0jqvv">Copy</button></pre>
<p><strong>Note:</strong> This method can only be used before the <code>ready</code> event of the <code>app</code>
module gets emitted.</p>
<h3 id="protocolregisterserviceworkerschemesschemes"><a href="#protocolregisterserviceworkerschemesschemes"><code>protocol.registerServiceWorkerSchemes(schemes)</code></a><a class="header-link" href="#protocolregisterserviceworkerschemesschemes" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>schemes</code> String[] - Custom schemes to be registered to handle service workers.</li>
</ul>
<h3 id="protocolregisterfileprotocolscheme-handler-completion"><a href="#protocolregisterfileprotocolscheme-handler-completion"><code>protocol.registerFileProtocol(scheme, handler[, completion])</code></a><a class="header-link" href="#protocolregisterfileprotocolscheme-handler-completion" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>scheme</code> String</li>
<li>
<p><code>handler</code> Function</p>
<ul>
<li>
<p><code>request</code> Object</p>
<ul>
<li><code>url</code> String</li>
<li><code>referrer</code> String</li>
<li><code>method</code> String</li>
<li><code>uploadData</code> <a href="https://electronjs.org/docs/api/structures/upload-data">UploadData[]</a></li>
</ul>
</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>filePath</code> String (optional)</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>completion</code> Function (optional)</p>
<ul>
<li><code>error</code> Error</li>
</ul>
</li>
</ul>
<p>Registers a protocol of <code>scheme</code> that will send the file as a response. The
<code>handler</code> will be called with <code>handler(request, callback)</code> when a <code>request</code> is
going to be created with <code>scheme</code>. <code>completion</code> will be called with
<code>completion(null)</code> when <code>scheme</code> is successfully registered or
<code>completion(error)</code> when failed.</p>
<p>To handle the <code>request</code>, the <code>callback</code> should be called with either the file's
path or an object that has a <code>path</code> property, e.g. <code>callback(filePath)</code> or
<code>callback({path: filePath})</code>.</p>
<p>When <code>callback</code> is called with nothing, a number, or an object that has an
<code>error</code> property, the <code>request</code> will fail with the <code>error</code> number you
specified. For the available error numbers you can use, please see the
<a href="https://code.google.com/p/chromium/codesearch#chromium/src/net/base/net_error_list.h">net error list</a>.</p>
<p>By default the <code>scheme</code> is treated like <code>http:</code>, which is parsed differently
than protocols that follow the "generic URI syntax" like <code>file:</code>, so you
probably want to call <code>protocol.registerStandardSchemes</code> to have your scheme
treated as a standard scheme.</p>
<h3 id="protocolregisterbufferprotocolscheme-handler-completion"><a href="#protocolregisterbufferprotocolscheme-handler-completion"><code>protocol.registerBufferProtocol(scheme, handler[, completion])</code></a><a class="header-link" href="#protocolregisterbufferprotocolscheme-handler-completion" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>scheme</code> String</li>
<li>
<p><code>handler</code> Function</p>
<ul>
<li>
<p><code>request</code> Object</p>
<ul>
<li><code>url</code> String</li>
<li><code>referrer</code> String</li>
<li><code>method</code> String</li>
<li><code>uploadData</code> <a href="https://electronjs.org/docs/api/structures/upload-data">UploadData[]</a></li>
</ul>
</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>buffer</code> (Buffer | <a href="https://electronjs.org/docs/api/structures/mime-typed-buffer">MimeTypedBuffer</a>) (optional)</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>completion</code> Function (optional)</p>
<ul>
<li><code>error</code> Error</li>
</ul>
</li>
</ul>
<p>Registers a protocol of <code>scheme</code> that will send a <code>Buffer</code> as a response.</p>
<p>The usage is the same with <code>registerFileProtocol</code>, except that the <code>callback</code>
should be called with either a <code>Buffer</code> object or an object that has the <code>data</code>,
<code>mimeType</code>, and <code>charset</code> properties.</p>
<p>Example:</p>
<pre><code class="hljs language-javascript" id="_gk0k8qr8"><span class="hljs-keyword">const</span> {protocol} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

protocol.registerBufferProtocol(<span class="hljs-string">'atom'</span>, (request, callback) =&gt; {
  callback({<span class="hljs-attr">mimeType</span>: <span class="hljs-string">'text/html'</span>, <span class="hljs-attr">data</span>: Buffer.from(<span class="hljs-string">'&lt;h5&gt;Response&lt;/h5&gt;'</span>)})
}, (error) =&gt; {
  <span class="hljs-keyword">if</span> (error) <span class="hljs-built_in">console</span>.error(<span class="hljs-string">'Failed to register protocol'</span>)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_gk0k8qr8">Copy</button></pre>
<h3 id="protocolregisterstringprotocolscheme-handler-completion"><a href="#protocolregisterstringprotocolscheme-handler-completion"><code>protocol.registerStringProtocol(scheme, handler[, completion])</code></a><a class="header-link" href="#protocolregisterstringprotocolscheme-handler-completion" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>scheme</code> String</li>
<li>
<p><code>handler</code> Function</p>
<ul>
<li>
<p><code>request</code> Object</p>
<ul>
<li><code>url</code> String</li>
<li><code>referrer</code> String</li>
<li><code>method</code> String</li>
<li><code>uploadData</code> <a href="https://electronjs.org/docs/api/structures/upload-data">UploadData[]</a></li>
</ul>
</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>data</code> String (optional)</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>completion</code> Function (optional)</p>
<ul>
<li><code>error</code> Error</li>
</ul>
</li>
</ul>
<p>Registers a protocol of <code>scheme</code> that will send a <code>String</code> as a response.</p>
<p>The usage is the same with <code>registerFileProtocol</code>, except that the <code>callback</code>
should be called with either a <code>String</code> or an object that has the <code>data</code>,
<code>mimeType</code>, and <code>charset</code> properties.</p>
<h3 id="protocolregisterhttpprotocolscheme-handler-completion"><a href="#protocolregisterhttpprotocolscheme-handler-completion"><code>protocol.registerHttpProtocol(scheme, handler[, completion])</code></a><a class="header-link" href="#protocolregisterhttpprotocolscheme-handler-completion" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>scheme</code> String</li>
<li>
<p><code>handler</code> Function</p>
<ul>
<li>
<p><code>request</code> Object</p>
<ul>
<li><code>url</code> String</li>
<li><code>referrer</code> String</li>
<li><code>method</code> String</li>
<li><code>uploadData</code> <a href="https://electronjs.org/docs/api/structures/upload-data">UploadData[]</a></li>
</ul>
</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li>
<p><code>redirectRequest</code> Object</p>
<ul>
<li><code>url</code> String</li>
<li><code>method</code> String</li>
<li><code>session</code> Object (optional)</li>
<li>
<p><code>uploadData</code> Object (optional)</p>
<ul>
<li><code>contentType</code> String - MIME type of the content.</li>
<li><code>data</code> String - Content to be sent.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>completion</code> Function (optional)</p>
<ul>
<li><code>error</code> Error</li>
</ul>
</li>
</ul>
<p>Registers a protocol of <code>scheme</code> that will send an HTTP request as a response.</p>
<p>The usage is the same with <code>registerFileProtocol</code>, except that the <code>callback</code>
should be called with a <code>redirectRequest</code> object that has the <code>url</code>, <code>method</code>,
<code>referrer</code>, <code>uploadData</code> and <code>session</code> properties.</p>
<p>By default the HTTP request will reuse the current session. If you want the
request to have a different session you should set <code>session</code> to <code>null</code>.</p>
<p>For POST requests the <code>uploadData</code> object must be provided.</p>
<h3 id="protocolregisterstreamprotocolscheme-handler-completion"><a href="#protocolregisterstreamprotocolscheme-handler-completion"><code>protocol.registerStreamProtocol(scheme, handler[, completion])</code></a><a class="header-link" href="#protocolregisterstreamprotocolscheme-handler-completion" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>scheme</code> String</li>
<li>
<p><code>handler</code> Function</p>
<ul>
<li>
<p><code>request</code> Object</p>
<ul>
<li><code>url</code> String</li>
<li><code>headers</code> Object</li>
<li><code>referrer</code> String</li>
<li><code>method</code> String</li>
<li><code>uploadData</code> <a href="https://electronjs.org/docs/api/structures/upload-data">UploadData[]</a></li>
</ul>
</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>stream</code> (ReadableStream | <a href="https://electronjs.org/docs/api/structures/stream-protocol-response">StreamProtocolResponse</a>) (optional)</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>completion</code> Function (optional)</p>
<ul>
<li><code>error</code> Error</li>
</ul>
</li>
</ul>
<p>Registers a protocol of <code>scheme</code> that will send a <code>Readable</code> as a response.</p>
<p>The usage is similar to the other <code>register{Any}Protocol</code>, except that the
<code>callback</code> should be called with either a <code>Readable</code> object or an object that
has the <code>data</code>, <code>statusCode</code>, and <code>headers</code> properties.</p>
<p>Example:</p>
<pre><code class="hljs language-javascript" id="_13und4mg"><span class="hljs-keyword">const</span> {protocol} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">const</span> {PassThrough} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'stream'</span>)

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createStream</span> (<span class="hljs-params">text</span>) </span>{
  <span class="hljs-keyword">const</span> rv = <span class="hljs-keyword">new</span> PassThrough()  <span class="hljs-comment">// PassThrough is also a Readable stream</span>
  rv.push(text)
  rv.push(<span class="hljs-literal">null</span>)
  <span class="hljs-keyword">return</span> rv
}

protocol.registerStreamProtocol(<span class="hljs-string">'atom'</span>, (request, callback) =&gt; {
  callback({
    <span class="hljs-attr">statusCode</span>: <span class="hljs-number">200</span>,
    <span class="hljs-attr">headers</span>: {
      <span class="hljs-string">'content-type'</span>: <span class="hljs-string">'text/html'</span>
    },
    <span class="hljs-attr">data</span>: createStream(<span class="hljs-string">'&lt;h5&gt;Response&lt;/h5&gt;'</span>)
  })
}, (error) =&gt; {
  <span class="hljs-keyword">if</span> (error) <span class="hljs-built_in">console</span>.error(<span class="hljs-string">'Failed to register protocol'</span>)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_13und4mg">Copy</button></pre>
<p>It is possible to pass any object that implements the readable stream API (emits
<code>data</code>/<code>end</code>/<code>error</code> events). For example, here's how a file could be returned:</p>
<pre><code class="hljs language-javascript" id="_0huafqt"><span class="hljs-keyword">const</span> {protocol} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>)

protocol.registerStreamProtocol(<span class="hljs-string">'atom'</span>, (request, callback) =&gt; {
  callback(fs.createReadStream(<span class="hljs-string">'index.html'</span>))
}, (error) =&gt; {
  <span class="hljs-keyword">if</span> (error) <span class="hljs-built_in">console</span>.error(<span class="hljs-string">'Failed to register protocol'</span>)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_0huafqt">Copy</button></pre>
<h3 id="protocolunregisterprotocolscheme-completion"><a href="#protocolunregisterprotocolscheme-completion"><code>protocol.unregisterProtocol(scheme[, completion])</code></a><a class="header-link" href="#protocolunregisterprotocolscheme-completion" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>scheme</code> String</li>
<li>
<p><code>completion</code> Function (optional)</p>
<ul>
<li><code>error</code> Error</li>
</ul>
</li>
</ul>
<p>Unregisters the custom protocol of <code>scheme</code>.</p>
<h3 id="protocolisprotocolhandledscheme-callback"><a href="#protocolisprotocolhandledscheme-callback"><code>protocol.isProtocolHandled(scheme, callback)</code></a><a class="header-link" href="#protocolisprotocolhandledscheme-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>scheme</code> String</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>error</code> Error</li>
</ul>
</li>
</ul>
<p>The <code>callback</code> will be called with a boolean that indicates whether there is
already a handler for <code>scheme</code>.</p>
<h3 id="protocolinterceptfileprotocolscheme-handler-completion"><a href="#protocolinterceptfileprotocolscheme-handler-completion"><code>protocol.interceptFileProtocol(scheme, handler[, completion])</code></a><a class="header-link" href="#protocolinterceptfileprotocolscheme-handler-completion" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>scheme</code> String</li>
<li>
<p><code>handler</code> Function</p>
<ul>
<li>
<p><code>request</code> Object</p>
<ul>
<li><code>url</code> String</li>
<li><code>referrer</code> String</li>
<li><code>method</code> String</li>
<li><code>uploadData</code> <a href="https://electronjs.org/docs/api/structures/upload-data">UploadData[]</a></li>
</ul>
</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>filePath</code> String</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>completion</code> Function (optional)</p>
<ul>
<li><code>error</code> Error</li>
</ul>
</li>
</ul>
<p>Intercepts <code>scheme</code> protocol and uses <code>handler</code> as the protocol's new handler
which sends a file as a response.</p>
<h3 id="protocolinterceptstringprotocolscheme-handler-completion"><a href="#protocolinterceptstringprotocolscheme-handler-completion"><code>protocol.interceptStringProtocol(scheme, handler[, completion])</code></a><a class="header-link" href="#protocolinterceptstringprotocolscheme-handler-completion" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>scheme</code> String</li>
<li>
<p><code>handler</code> Function</p>
<ul>
<li>
<p><code>request</code> Object</p>
<ul>
<li><code>url</code> String</li>
<li><code>referrer</code> String</li>
<li><code>method</code> String</li>
<li><code>uploadData</code> <a href="https://electronjs.org/docs/api/structures/upload-data">UploadData[]</a></li>
</ul>
</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>data</code> String (optional)</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>completion</code> Function (optional)</p>
<ul>
<li><code>error</code> Error</li>
</ul>
</li>
</ul>
<p>Intercepts <code>scheme</code> protocol and uses <code>handler</code> as the protocol's new handler
which sends a <code>String</code> as a response.</p>
<h3 id="protocolinterceptbufferprotocolscheme-handler-completion"><a href="#protocolinterceptbufferprotocolscheme-handler-completion"><code>protocol.interceptBufferProtocol(scheme, handler[, completion])</code></a><a class="header-link" href="#protocolinterceptbufferprotocolscheme-handler-completion" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>scheme</code> String</li>
<li>
<p><code>handler</code> Function</p>
<ul>
<li>
<p><code>request</code> Object</p>
<ul>
<li><code>url</code> String</li>
<li><code>referrer</code> String</li>
<li><code>method</code> String</li>
<li><code>uploadData</code> <a href="https://electronjs.org/docs/api/structures/upload-data">UploadData[]</a></li>
</ul>
</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>buffer</code> Buffer (optional)</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>completion</code> Function (optional)</p>
<ul>
<li><code>error</code> Error</li>
</ul>
</li>
</ul>
<p>Intercepts <code>scheme</code> protocol and uses <code>handler</code> as the protocol's new handler
which sends a <code>Buffer</code> as a response.</p>
<h3 id="protocolintercepthttpprotocolscheme-handler-completion"><a href="#protocolintercepthttpprotocolscheme-handler-completion"><code>protocol.interceptHttpProtocol(scheme, handler[, completion])</code></a><a class="header-link" href="#protocolintercepthttpprotocolscheme-handler-completion" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>scheme</code> String</li>
<li>
<p><code>handler</code> Function</p>
<ul>
<li>
<p><code>request</code> Object</p>
<ul>
<li><code>url</code> String</li>
<li><code>referrer</code> String</li>
<li><code>method</code> String</li>
<li><code>uploadData</code> <a href="https://electronjs.org/docs/api/structures/upload-data">UploadData[]</a></li>
</ul>
</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li>
<p><code>redirectRequest</code> Object</p>
<ul>
<li><code>url</code> String</li>
<li><code>method</code> String</li>
<li><code>session</code> Object (optional)</li>
<li>
<p><code>uploadData</code> Object (optional)</p>
<ul>
<li><code>contentType</code> String - MIME type of the content.</li>
<li><code>data</code> String - Content to be sent.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>completion</code> Function (optional)</p>
<ul>
<li><code>error</code> Error</li>
</ul>
</li>
</ul>
<p>Intercepts <code>scheme</code> protocol and uses <code>handler</code> as the protocol's new handler
which sends a new HTTP request as a response.</p>
<h3 id="protocolinterceptstreamprotocolscheme-handler-completion"><a href="#protocolinterceptstreamprotocolscheme-handler-completion"><code>protocol.interceptStreamProtocol(scheme, handler[, completion])</code></a><a class="header-link" href="#protocolinterceptstreamprotocolscheme-handler-completion" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>scheme</code> String</li>
<li>
<p><code>handler</code> Function</p>
<ul>
<li>
<p><code>request</code> Object</p>
<ul>
<li><code>url</code> String</li>
<li><code>headers</code> Object</li>
<li><code>referrer</code> String</li>
<li><code>method</code> String</li>
<li><code>uploadData</code> <a href="https://electronjs.org/docs/api/structures/upload-data">UploadData[]</a></li>
</ul>
</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>stream</code> (ReadableStream | <a href="https://electronjs.org/docs/api/structures/stream-protocol-response">StreamProtocolResponse</a>) (optional)</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>completion</code> Function (optional)</p>
<ul>
<li><code>error</code> Error</li>
</ul>
</li>
</ul>
<p>Same as <code>protocol.registerStreamProtocol</code>, except that it replaces an existing
protocol handler.</p>
<h3 id="protocoluninterceptprotocolscheme-completion"><a href="#protocoluninterceptprotocolscheme-completion"><code>protocol.uninterceptProtocol(scheme[, completion])</code></a><a class="header-link" href="#protocoluninterceptprotocolscheme-completion" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>scheme</code> String</li>
<li>
<p><code>completion</code> Function (optional)</p>
<ul>
<li><code>error</code> Error</li>
</ul>
</li>
</ul>
<p>Remove the interceptor installed for <code>scheme</code> and restore its original handler.</p>

  <hr>
  <h1 id="quick-start"><a href="#quick-start">Quick Start</a><a class="header-link" href="#quick-start" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>Electron enables you to create desktop applications with pure JavaScript by
providing a runtime with rich native (operating system) APIs. You could see it
as a variant of the Node.js runtime that is focused on desktop applications
instead of web servers.</p>
<p>This doesn't mean Electron is a JavaScript binding to graphical user interface
(GUI) libraries. Instead, Electron uses web pages as its GUI, so you could also
see it as a minimal Chromium browser, controlled by JavaScript.</p>
<h3 id="main-process"><a href="#main-process">Main Process</a><a class="header-link" href="#main-process" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>In Electron, the process that runs <code>package.json</code>'s <code>main</code> script is called
<strong>the main process</strong>. The script that runs in the main process can display a GUI
by creating web pages.</p>
<h3 id="renderer-process"><a href="#renderer-process">Renderer Process</a><a class="header-link" href="#renderer-process" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Since Electron uses Chromium for displaying web pages, Chromium's
multi-process architecture is also used. Each web page in Electron runs in
its own process, which is called <strong>the renderer process</strong>.</p>
<p>In normal browsers, web pages usually run in a sandboxed environment and are not
allowed access to native resources. Electron users, however, have the power to
use Node.js APIs in web pages allowing lower level operating system
interactions.</p>
<h3 id="differences-between-main-process-and-renderer-process"><a href="#differences-between-main-process-and-renderer-process">Differences Between Main Process and Renderer Process</a><a class="header-link" href="#differences-between-main-process-and-renderer-process" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The main process creates web pages by creating <code>BrowserWindow</code> instances. Each
<code>BrowserWindow</code> instance runs the web page in its own renderer process. When a
<code>BrowserWindow</code> instance is destroyed, the corresponding renderer process
is also terminated.</p>
<p>The main process manages all web pages and their corresponding renderer
processes. Each renderer process is isolated and only cares about the web page
running in it.</p>
<p>In web pages, calling native GUI related APIs is not allowed because managing
native GUI resources in web pages is very dangerous and it is easy to leak
resources. If you want to perform GUI operations in a web page, the renderer
process of the web page must communicate with the main process to request that
the main process perform those operations.</p>
<p>In Electron, we have several ways to communicate between the main process and
renderer processes. Like <a href="https://electronjs.org/docs/api/ipc-renderer"><code>ipcRenderer</code></a> and
<a href="https://electronjs.org/docs/api/ipc-main"><code>ipcMain</code></a> modules for sending messages, and the
<a href="https://electronjs.org/docs/api/remote">remote</a> module for RPC style communication. There is also
an FAQ entry on <a href="https://electronjs.org/docs/faq#how-to-share-data-between-web-pages">how to share data between web pages</a>.</p>
<h2 id="write-your-first-electron-app"><a href="#write-your-first-electron-app">Write your First Electron App</a><a class="header-link" href="#write-your-first-electron-app" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Generally, an Electron app is structured like this:</p>
<pre><code class="hljs language-text" id="_gkri7ye2">your-app/
├── package<span class="hljs-selector-class">.json</span>
├── main<span class="hljs-selector-class">.js</span>
└── index.html</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_gkri7ye2">Copy</button></pre>
<p>The format of <code>package.json</code> is exactly the same as that of Node's modules, and
the script specified by the <code>main</code> field is the startup script of your app,
which will run the main process. An example of your <code>package.json</code> might look
like this:</p>
<pre><code class="hljs language-json" id="_k01hii6">{
  <span class="hljs-attr">"name"</span>    : <span class="hljs-string">"your-app"</span>,
  <span class="hljs-attr">"version"</span> : <span class="hljs-string">"0.1.0"</span>,
  <span class="hljs-attr">"main"</span>    : <span class="hljs-string">"main.js"</span>
}</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_k01hii6">Copy</button></pre>
<p><strong>Note</strong>: If the <code>main</code> field is not present in <code>package.json</code>, Electron will
attempt to load an <code>index.js</code>.</p>
<p>The <code>main.js</code> should create windows and handle system events, a typical
example being:</p>
<pre><code class="hljs language-javascript" id="_mlcg7vrp"><span class="hljs-keyword">const</span> {app, BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>)
<span class="hljs-keyword">const</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">'url'</span>)

<span class="hljs-comment">// Keep a global reference of the window object, if you don't, the window will</span>
<span class="hljs-comment">// be closed automatically when the JavaScript object is garbage collected.</span>
<span class="hljs-keyword">let</span> win

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createWindow</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-comment">// Create the browser window.</span>
  win = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">width</span>: <span class="hljs-number">800</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">600</span>})

  <span class="hljs-comment">// and load the index.html of the app.</span>
  win.loadURL(url.format({
    <span class="hljs-attr">pathname</span>: path.join(__dirname, <span class="hljs-string">'index.html'</span>),
    <span class="hljs-attr">protocol</span>: <span class="hljs-string">'file:'</span>,
    <span class="hljs-attr">slashes</span>: <span class="hljs-literal">true</span>
  }))

  <span class="hljs-comment">// Open the DevTools.</span>
  win.webContents.openDevTools()

  <span class="hljs-comment">// Emitted when the window is closed.</span>
  win.on(<span class="hljs-string">'closed'</span>, () =&gt; {
    <span class="hljs-comment">// Dereference the window object, usually you would store windows</span>
    <span class="hljs-comment">// in an array if your app supports multi windows, this is the time</span>
    <span class="hljs-comment">// when you should delete the corresponding element.</span>
    win = <span class="hljs-literal">null</span>
  })
}

<span class="hljs-comment">// This method will be called when Electron has finished</span>
<span class="hljs-comment">// initialization and is ready to create browser windows.</span>
<span class="hljs-comment">// Some APIs can only be used after this event occurs.</span>
app.on(<span class="hljs-string">'ready'</span>, createWindow)

<span class="hljs-comment">// Quit when all windows are closed.</span>
app.on(<span class="hljs-string">'window-all-closed'</span>, () =&gt; {
  <span class="hljs-comment">// On macOS it is common for applications and their menu bar</span>
  <span class="hljs-comment">// to stay active until the user quits explicitly with Cmd + Q</span>
  <span class="hljs-keyword">if</span> (process.platform !== <span class="hljs-string">'darwin'</span>) {
    app.quit()
  }
})

app.on(<span class="hljs-string">'activate'</span>, () =&gt; {
  <span class="hljs-comment">// On macOS it's common to re-create a window in the app when the</span>
  <span class="hljs-comment">// dock icon is clicked and there are no other windows open.</span>
  <span class="hljs-keyword">if</span> (win === <span class="hljs-literal">null</span>) {
    createWindow()
  }
})

<span class="hljs-comment">// In this file you can include the rest of your app's specific main process</span>
<span class="hljs-comment">// code. You can also put them in separate files and require them here.</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_mlcg7vrp">Copy</button></pre>
<p>Finally the <code>index.html</code> is the web page you want to show:</p>
<pre><code class="hljs language-html" id="_e6k8dbzc"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
    We are using node <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-built_in">document</span>.write(process.versions.node)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>,
    Chrome <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-built_in">document</span>.write(process.versions.chrome)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>,
    and Electron <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-built_in">document</span>.write(process.versions.electron)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>.
  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_e6k8dbzc">Copy</button></pre>
<h2 id="run-your-app"><a href="#run-your-app">Run your app</a><a class="header-link" href="#run-your-app" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Once you've created your initial <code>main.js</code>, <code>index.html</code>, and <code>package.json</code> files,
you'll probably want to try running your app locally to test it and make sure it's
working as expected.</p>
<h3 id="electron"><a href="#electron"><code>electron</code></a><a class="header-link" href="#electron" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p><a href="https://github.com/electron-userland/electron-prebuilt"><code>electron</code></a> is
an <code>npm</code> module that contains pre-compiled versions of Electron.</p>
<p>If you've installed it globally with <code>npm</code>, then you will only need to run the
following in your app's source directory:</p>
<pre><code class="hljs language-sh" id="_ldtp3h7">electron .</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_ldtp3h7">Copy</button></pre>
<p>If you've installed it locally, then run:</p>
<h4 id="macos--linux"><a href="#macos--linux">macOS / Linux</a><a class="header-link" href="#macos--linux" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<pre><code class="hljs language-sh" id="_4lj8ii2">$ ./node_modules/.bin/electron .</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_4lj8ii2">Copy</button></pre>
<h4 id="windows"><a href="#windows">Windows</a><a class="header-link" href="#windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<pre><code class="hljs language-sh" id="_r6l66q8">$ .\node_modules\.bin\electron .</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_r6l66q8">Copy</button></pre>
<h4 id="node-v820-and-later"><a href="#node-v820-and-later">Node v8.2.0 and later</a><a class="header-link" href="#node-v820-and-later" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<pre><code class="hljs language-sh" id="_pzn013jk">$ npx electron .</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_pzn013jk">Copy</button></pre>
<h3 id="manually-downloaded-electron-binary"><a href="#manually-downloaded-electron-binary">Manually Downloaded Electron Binary</a><a class="header-link" href="#manually-downloaded-electron-binary" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>If you downloaded Electron manually, you can also use the included
binary to execute your app directly.</p>
<h4 id="macos"><a href="#macos">macOS</a><a class="header-link" href="#macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<pre><code class="hljs language-sh" id="_qzwn50qr">$ ./Electron.app/Contents/MacOS/Electron your-app/</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_qzwn50qr">Copy</button></pre>
<h4 id="linux"><a href="#linux">Linux</a><a class="header-link" href="#linux" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<pre><code class="hljs language-sh" id="_411kg2ca">$ ./electron/electron your-app/</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_411kg2ca">Copy</button></pre>
<h4 id="windows-1"><a href="#windows-1">Windows</a><a class="header-link" href="#windows-1" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<pre><code class="hljs language-sh" id="_fvnv728">$ .\electron\electron.exe your-app\</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_fvnv728">Copy</button></pre>
<p><code>Electron.app</code> here is part of the Electron's release package, you can download
it from <a href="https://github.com/electron/electron/releases">here</a>.</p>
<h3 id="run-as-a-distribution"><a href="#run-as-a-distribution">Run as a distribution</a><a class="header-link" href="#run-as-a-distribution" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>After you're done writing your app, you can create a distribution by
following the <a href="https://electronjs.org/docs/tutorial/application-distribution">Application Distribution</a> guide
and then executing the packaged app.</p>
<h3 id="try-this-example"><a href="#try-this-example">Try this Example</a><a class="header-link" href="#try-this-example" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Clone and run the code in this tutorial by using the <a href="https://github.com/electron/electron-quick-start"><code>electron/electron-quick-start</code></a>
repository.</p>
<p><strong>Note</strong>: Running this requires <a href="https://git-scm.com/">Git</a> and <a href="https://nodejs.org/en/download/">Node.js</a> (which includes <a href="https://npmjs.org/">npm</a>) on your system.</p>
<pre><code class="hljs language-sh" id="_ja5kiwke"><span class="hljs-comment"># Clone the repository</span>
$ git <span class="hljs-built_in">clone</span> https://github.com/electron/electron-quick-start
<span class="hljs-comment"># Go into the repository</span>
$ <span class="hljs-built_in">cd</span> electron-quick-start
<span class="hljs-comment"># Install dependencies</span>
$ npm install
<span class="hljs-comment"># Run the app</span>
$ npm start</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_ja5kiwke">Copy</button></pre>
<p>For more example apps, see the
<a href="https://electronjs.org/community#boilerplates">list of boilerplates</a>
created by the awesome electron community.</p>

  <hr>
  <p>Please make sure that you use the documents that match your Electron version.
The version number should be a part of the page URL. If it's not, you are
probably using the documentation of a development branch which may contain API
changes that are not compatible with your Electron version. To view older
versions of the documentation, you can
<a href="https://github.com/electron/electron/tree/v1.4.0">browse by tag</a>
on GitHub by opening the "Switch branches/tags" dropdown and selecting the tag
that matches your version.</p>
<h2 id="faq"><a href="#faq">FAQ</a><a class="header-link" href="#faq" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>There are questions that are asked quite often. Check this out before creating
an issue:</p>
<ul>
<li><a href="https://electronjs.org/docs/faq">Electron FAQ</a></li>
</ul>
<h2 id="guides"><a href="#guides">Guides</a><a class="header-link" href="#guides" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<ul>
<li><a href="https://electronjs.org/docs/glossary">Glossary of Terms</a></li>
<li><a href="https://electronjs.org/docs/tutorial/supported-platforms">Supported Platforms</a></li>
<li><a href="https://electronjs.org/docs/tutorial/security">Security</a></li>
<li><a href="https://electronjs.org/docs/tutorial/electron-versioning">Versioning</a></li>
<li><a href="https://electronjs.org/docs/tutorial/application-distribution">Application Distribution</a></li>
<li><a href="https://electronjs.org/docs/tutorial/mac-app-store-submission-guide">Mac App Store Submission Guide</a></li>
<li><a href="https://electronjs.org/docs/tutorial/windows-store-guide">Windows Store Guide</a></li>
<li><a href="https://electronjs.org/docs/tutorial/snapcraft-guide">Snapcraft Guide</a></li>
<li><a href="https://electronjs.org/docs/tutorial/application-packaging">Application Packaging</a></li>
<li><a href="https://electronjs.org/docs/tutorial/using-native-node-modules">Using Native Node Modules</a></li>
<li><a href="https://electronjs.org/docs/tutorial/debugging-main-process">Debugging Main Process</a></li>
<li><a href="https://electronjs.org/docs/tutorial/using-selenium-and-webdriver">Using Selenium and WebDriver</a></li>
<li><a href="https://electronjs.org/docs/tutorial/devtools-extension">DevTools Extension</a></li>
<li><a href="https://electronjs.org/docs/tutorial/using-pepper-flash-plugin">Using Pepper Flash Plugin</a></li>
<li><a href="https://electronjs.org/docs/tutorial/using-widevine-cdm-plugin">Using Widevine CDM Plugin</a></li>
<li><a href="https://electronjs.org/docs/tutorial/testing-on-headless-ci">Testing on Headless CI Systems (Travis, Jenkins)</a></li>
<li><a href="https://electronjs.org/docs/tutorial/offscreen-rendering">Offscreen Rendering</a></li>
<li><a href="https://electronjs.org/docs/tutorial/keyboard-shortcuts">Keyboard Shortcuts</a></li>
<li><a href="https://electronjs.org/docs/tutorial/updates">Updating Applications</a></li>
</ul>
<h2 id="tutorials"><a href="#tutorials">Tutorials</a><a class="header-link" href="#tutorials" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<ul>
<li><a href="https://electronjs.org/docs/tutorial/quick-start">Quick Start</a></li>
<li><a href="https://electronjs.org/docs/tutorial/desktop-environment-integration">Desktop Environment Integration</a></li>
<li><a href="https://electronjs.org/docs/tutorial/online-offline-events">Online/Offline Event Detection</a></li>
<li><a href="https://electronjs.org/docs/tutorial/repl">REPL</a></li>
<li><a href="https://electronjs.org/docs/tutorial/notifications">Native Notifications</a></li>
</ul>
<h2 id="api-references"><a href="#api-references">API References</a><a class="header-link" href="#api-references" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<ul>
<li><a href="https://electronjs.org/docs/api/synopsis">Synopsis</a></li>
<li><a href="https://electronjs.org/docs/api/process">Process Object</a></li>
<li><a href="https://electronjs.org/docs/api/chrome-command-line-switches">Supported Chrome Command Line Switches</a></li>
<li><a href="https://electronjs.org/docs/api/environment-variables">Environment Variables</a></li>
</ul>
<h3 id="custom-dom-elements"><a href="#custom-dom-elements">Custom DOM Elements:</a><a class="header-link" href="#custom-dom-elements" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><a href="https://electronjs.org/docs/api/file-object"><code>File</code> Object</a></li>
<li><a href="https://electronjs.org/docs/api/webview-tag"><code>&lt;webview&gt;</code> Tag</a></li>
<li><a href="https://electronjs.org/docs/api/window-open"><code>window.open</code> Function</a></li>
</ul>
<h3 id="modules-for-the-main-process"><a href="#modules-for-the-main-process">Modules for the Main Process:</a><a class="header-link" href="#modules-for-the-main-process" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><a href="https://electronjs.org/docs/api/app">app</a></li>
<li><a href="https://electronjs.org/docs/api/auto-updater">autoUpdater</a></li>
<li><a href="https://electronjs.org/docs/api/browser-view">BrowserView</a></li>
<li><a href="https://electronjs.org/docs/api/browser-window">BrowserWindow</a></li>
<li><a href="https://electronjs.org/docs/api/content-tracing">contentTracing</a></li>
<li><a href="https://electronjs.org/docs/api/dialog">dialog</a></li>
<li><a href="https://electronjs.org/docs/api/global-shortcut">globalShortcut</a></li>
<li><a href="https://electronjs.org/docs/api/in-app-purchase">inAppPurchase</a></li>
<li><a href="https://electronjs.org/docs/api/ipc-main">ipcMain</a></li>
<li><a href="https://electronjs.org/docs/api/menu">Menu</a></li>
<li><a href="https://electronjs.org/docs/api/menu-item">MenuItem</a></li>
<li><a href="https://electronjs.org/docs/api/net">net</a></li>
<li><a href="https://electronjs.org/docs/api/power-monitor">powerMonitor</a></li>
<li><a href="https://electronjs.org/docs/api/power-save-blocker">powerSaveBlocker</a></li>
<li><a href="https://electronjs.org/docs/api/protocol">protocol</a></li>
<li><a href="https://electronjs.org/docs/api/session">session</a></li>
<li><a href="https://electronjs.org/docs/api/system-preferences">systemPreferences</a></li>
<li><a href="https://electronjs.org/docs/api/tray">Tray</a></li>
<li><a href="https://electronjs.org/docs/api/web-contents">webContents</a></li>
</ul>
<h3 id="modules-for-the-renderer-process-web-page"><a href="#modules-for-the-renderer-process-web-page">Modules for the Renderer Process (Web Page):</a><a class="header-link" href="#modules-for-the-renderer-process-web-page" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><a href="https://electronjs.org/docs/api/desktop-capturer">desktopCapturer</a></li>
<li><a href="https://electronjs.org/docs/api/ipc-renderer">ipcRenderer</a></li>
<li><a href="https://electronjs.org/docs/api/remote">remote</a></li>
<li><a href="https://electronjs.org/docs/api/web-frame">webFrame</a></li>
</ul>
<h3 id="modules-for-both-processes"><a href="#modules-for-both-processes">Modules for Both Processes:</a><a class="header-link" href="#modules-for-both-processes" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><a href="https://electronjs.org/docs/api/clipboard">clipboard</a></li>
<li><a href="https://electronjs.org/docs/api/crash-reporter">crashReporter</a></li>
<li><a href="https://electronjs.org/docs/api/native-image">nativeImage</a></li>
<li><a href="https://electronjs.org/docs/api/screen">screen</a></li>
<li><a href="https://electronjs.org/docs/api/shell">shell</a></li>
</ul>
<h2 id="development"><a href="#development">Development</a><a class="header-link" href="#development" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<ul>
<li><a href="https://electronjs.org/docs/development/coding-style">Coding Style</a></li>
<li><a href="https://electronjs.org/docs/development/clang-format">Using clang-format on C++ Code</a></li>
<li><a href="https://electronjs.org/docs/development/testing">Testing</a></li>
<li><a href="https://electronjs.org/docs/development/source-code-directory-structure">Source Code Directory Structure</a></li>
<li><a href="https://electronjs.org/docs/development/atom-shell-vs-node-webkit">Technical Differences to NW.js (formerly node-webkit)</a></li>
<li><a href="https://electronjs.org/docs/development/build-system-overview">Build System Overview</a></li>
<li><a href="https://electronjs.org/docs/development/build-instructions-osx">Build Instructions (macOS)</a></li>
<li><a href="https://electronjs.org/docs/development/build-instructions-windows">Build Instructions (Windows)</a></li>
<li><a href="https://electronjs.org/docs/development/build-instructions-linux">Build Instructions (Linux)</a></li>
<li><a href="https://electronjs.org/docs/development/debugging-instructions-macos">Debug Instructions (macOS)</a></li>
<li><a href="https://electronjs.org/docs/development/debug-instructions-windows">Debug Instructions (Windows)</a></li>
<li><a href="https://electronjs.org/docs/development/setting-up-symbol-server">Setting Up Symbol Server in debugger</a></li>
<li><a href="https://electronjs.org/docs/styleguide">Documentation Styleguide</a></li>
<li><a href="https://electronjs.org/docs/development/upgrading-chromium">Upgrading Chromium</a></li>
<li><a href="https://electronjs.org/docs/development/chromium-development">Chromium Development</a></li>
<li><a href="https://electronjs.org/docs/development/v8-development">V8 Development</a></li>
</ul>

  <hr>
  <h1 id="rectangle-object"><a href="#rectangle-object">Rectangle Object</a><a class="header-link" href="#rectangle-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>x</code> Number - The x coordinate of the origin of the rectangle (must be an integer)</li>
<li><code>y</code> Number - The y coordinate of the origin of the rectangle (must be an integer)</li>
<li><code>width</code> Number - The width of the rectangle (must be an integer)</li>
<li><code>height</code> Number - The height of the rectangle (must be an integer)</li>
</ul>

  <hr>
  <h1 id="releasing"><a href="#releasing">Releasing</a><a class="header-link" href="#releasing" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>This document describes the process for releasing a new version of Electron.</p>
<h2 id="determine-which-branch-to-release-from"><a href="#determine-which-branch-to-release-from">Determine which branch to release from</a><a class="header-link" href="#determine-which-branch-to-release-from" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<ul>
<li><strong>If releasing beta,</strong> run the scripts below from <code>master</code>.</li>
<li><strong>If releasing a stable version,</strong> run the scripts below from <code>1-7-x</code> or
<code>1-6-x</code>, depending on which version you are releasing for.</li>
</ul>
<h2 id="find-out-what-version-change-is-needed"><a href="#find-out-what-version-change-is-needed">Find out what version change is needed</a><a class="header-link" href="#find-out-what-version-change-is-needed" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Run <code>npm run prepare-release -- --notesOnly</code> to view auto generated release
notes. The notes generated should help you determine if this is a major, minor,
patch, or beta version change. Read the
<a href="https://electronjs.org/docs/tutorial/electron-versioning#semver">Version Change Rules</a> for more information.</p>
<h2 id="run-the-prepare-release-script"><a href="#run-the-prepare-release-script">Run the prepare-release script</a><a class="header-link" href="#run-the-prepare-release-script" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The prepare release script will do the following:
1. Check if a release is already in process and if so it will halt.
2. Create a release branch.
3. Bump the version number in several files. See <a href="https://github.com/electron/electron/commit/78ec1b8f89b3886b856377a1756a51617bc33f5a">this bump commit</a> for an example.
4. Create a draft release on GitHub with auto-generated release notes.
5. Push the release branch.
6. Call the APIs to run the release builds.</p>
<p>Once you have determined which type of version change is needed, run the
<code>prepare-release</code> script with arguments according to your need:</p>
<ul>
<li><code>[major|minor|patch|beta]</code> to increment one of the version numbers, or</li>
<li><code>--stable</code> to indicate this is a stable version</li>
</ul>
<p>For example:</p>
<h3 id="major-version-change"><a href="#major-version-change">Major version change</a><a class="header-link" href="#major-version-change" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-sh" id="_8s4ksd0h">npm run prepare-release -- major</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_8s4ksd0h">Copy</button></pre>
<h3 id="minor-version-change"><a href="#minor-version-change">Minor version change</a><a class="header-link" href="#minor-version-change" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-sh" id="_wslr5e1f">npm run prepare-release -- minor</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_wslr5e1f">Copy</button></pre>
<h3 id="patch-version-change"><a href="#patch-version-change">Patch version change</a><a class="header-link" href="#patch-version-change" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-sh" id="_opmay81r">npm run prepare-release -- patch</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_opmay81r">Copy</button></pre>
<h3 id="beta-version-change"><a href="#beta-version-change">Beta version change</a><a class="header-link" href="#beta-version-change" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-sh" id="_ervalvsa">npm run prepare-release -- beta</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_ervalvsa">Copy</button></pre>
<h3 id="promote-beta-to-stable"><a href="#promote-beta-to-stable">Promote beta to stable</a><a class="header-link" href="#promote-beta-to-stable" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-sh" id="_g32s2cho">npm run prepare-release -- --stable</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_g32s2cho">Copy</button></pre>
<h2 id="wait-for-builds-hourglass_flowing_sand"><a href="#wait-for-builds-hourglass_flowing_sand">Wait for builds :hourglass_flowing_sand:</a><a class="header-link" href="#wait-for-builds-hourglass_flowing_sand" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>prepare-release</code> script will trigger the builds via API calls.
To monitor the build progress, see the following pages:</p>
<ul>
<li><a href="https://mac-ci.electronjs.org/blue/organizations/jenkins/electron-mas-x64-release/activity">mac-ci.electronjs.org/blue/organizations/jenkins/electron-mas-x64-release/activity</a> for Mac App Store</li>
<li><a href="https://mac-ci.electronjs.org/blue/organizations/jenkins/electron-osx-x64-release/activity">mac-ci.electronjs.org/blue/organizations/jenkins/electron-osx-x64-release/activity</a> for OS X</li>
<li><a href="https://circleci.com/gh/electron">circleci.com/gh/electron/electron</a> for Linux</li>
<li><a href="https://windows-ci.electronjs.org/project/AppVeyor/electron">windows-ci.electronjs.org/project/AppVeyor/electron</a> for Windows</li>
</ul>
<h2 id="compile-release-notes"><a href="#compile-release-notes">Compile release notes</a><a class="header-link" href="#compile-release-notes" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Writing release notes is a good way to keep yourself busy while the builds are running.
For prior art, see existing releases on <a href="https://github.com/electron/electron/releases">the releases page</a>.</p>
<p>Tips:</p>
<ul>
<li>Each listed item should reference a PR on electron/electron, not an issue, nor a PR from another repo like libcc.</li>
<li>No need to use link markup when referencing PRs. Strings like <code>#123</code> will automatically be converted to links on github.com.</li>
<li>To see the version of Chromium, V8, and Node in every version of Electron, visit <a href="https://atom.io/download/electron/index.json">atom.io/download/electron/index.json</a>.</li>
</ul>
<h3 id="patch-releases"><a href="#patch-releases">Patch releases</a><a class="header-link" href="#patch-releases" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>For a <code>patch</code> release, use the following format:</p>
<pre><code class="hljs language-sh" id="_3fbqixdl"><span class="hljs-comment">## Bug Fixes</span>

* Fixed a cross-platform thing. <span class="hljs-comment">#123</span>

<span class="hljs-comment">### Linux</span>

* Fixed a Linux thing. <span class="hljs-comment">#123</span>

<span class="hljs-comment">### macOS</span>

* Fixed a macOS thing. <span class="hljs-comment">#123</span>

<span class="hljs-comment">### Windows</span>

* Fixed a Windows thing. <span class="hljs-comment">#1234</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_3fbqixdl">Copy</button></pre>
<h3 id="minor-releases"><a href="#minor-releases">Minor releases</a><a class="header-link" href="#minor-releases" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>For a <code>minor</code> release, e.g. <code>1.8.0</code>, use this format:</p>
<pre><code class="hljs language-sh" id="_7xdyjp8"><span class="hljs-comment">## Upgrades</span>

- Upgraded from Node `oldVersion` to `newVersion`. <span class="hljs-comment">#123</span>

<span class="hljs-comment">## API Changes</span>

* Changed a thing. <span class="hljs-comment">#123</span>

<span class="hljs-comment">### Linux</span>

* Changed a Linux thing. <span class="hljs-comment">#123</span>

<span class="hljs-comment">### macOS</span>

* Changed a macOS thing. <span class="hljs-comment">#123</span>

<span class="hljs-comment">### Windows</span>

* Changed a Windows thing. <span class="hljs-comment">#123</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_7xdyjp8">Copy</button></pre>
<h3 id="major-releases"><a href="#major-releases">Major releases</a><a class="header-link" href="#major-releases" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-sh" id="_4gws6rs7"><span class="hljs-comment">## Upgrades</span>

- Upgraded from Chromium `oldVersion` to `newVersion`. <span class="hljs-comment">#123</span>
- Upgraded from Node `oldVersion` to `newVersion`. <span class="hljs-comment">#123</span>

<span class="hljs-comment">## Breaking API changes</span>

* Changed a thing. <span class="hljs-comment">#123</span>

<span class="hljs-comment">### Linux</span>

* Changed a Linux thing. <span class="hljs-comment">#123</span>

<span class="hljs-comment">### macOS</span>

* Changed a macOS thing. <span class="hljs-comment">#123</span>

<span class="hljs-comment">### Windows</span>

* Changed a Windows thing. <span class="hljs-comment">#123</span>

<span class="hljs-comment">## Other Changes</span>

- Some other change. <span class="hljs-comment">#123</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_4gws6rs7">Copy</button></pre>
<h3 id="beta-releases"><a href="#beta-releases">Beta releases</a><a class="header-link" href="#beta-releases" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Use the same formats as the ones suggested above, but add the following note at the beginning of the changelog:</p>
<pre><code class="hljs language-sh" id="_u5t7cxdh">**Note:** This is a beta release and most likely will have have some instability and/or regressions.

Please file new issues <span class="hljs-keyword">for</span> any bugs you find <span class="hljs-keyword">in</span> it.

This release is published to [npm](https://www.npmjs.com/package/electron) under the `beta` tag and can be installed via `npm install electron@beta`.</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_u5t7cxdh">Copy</button></pre>
<h2 id="edit-the-release-draft"><a href="#edit-the-release-draft">Edit the release draft</a><a class="header-link" href="#edit-the-release-draft" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<ol>
<li>Visit <a href="https://github.com/electron/electron/releases">the releases page</a> and you'll see a new draft release with placeholder release notes.</li>
<li>Edit the release and add release notes.</li>
<li>Uncheck the <code>prerelease</code> checkbox if you're publishing a stable release; leave it checked for beta releases.</li>
<li>Click 'Save draft'. <strong>Do not click 'Publish release'!</strong></li>
<li>Wait for all builds to pass before proceeding.</li>
<li>You can run <code>npm run release -- --validateRelease</code> to verify that all of the
required files have been created for the release.</li>
</ol>
<h2 id="merge-temporary-branch"><a href="#merge-temporary-branch">Merge temporary branch</a><a class="header-link" href="#merge-temporary-branch" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Once the release builds have finished, merge the <code>release</code> branch back into
the source release branch using the <code>merge-release</code> script.
If the branch cannot be successfully merged back this script will automatically
rebase the <code>release</code> branch and push the changes which will trigger the release
builds again, which means you will need to wait for the release builds to run
again before proceeding.</p>
<h3 id="merging-back-into-master"><a href="#merging-back-into-master">Merging back into master</a><a class="header-link" href="#merging-back-into-master" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-sh" id="_k3ec2okq">npm run merge-release -- master</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_k3ec2okq">Copy</button></pre>
<h3 id="merging-back-into-old-release-branch"><a href="#merging-back-into-old-release-branch">Merging back into old release branch</a><a class="header-link" href="#merging-back-into-old-release-branch" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-sh" id="_h8nqxvih">npm run merge-release -- 1-7-x</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_h8nqxvih">Copy</button></pre>
<h2 id="publish-the-release"><a href="#publish-the-release">Publish the release</a><a class="header-link" href="#publish-the-release" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Once the merge has finished successfully, run the <code>release</code> script
via <code>npm run release</code> to finish the release process. This script will do the
following:
1. Build the project to validate that the correct version number is being released.
2. Download the binaries and generate the node headers and the .lib linker used
on Windows by node-gyp to build native modules.
3. Create and upload the SHASUMS files stored on S3 for the node files.
4. Create and upload the SHASUMS256.txt file stored on the GitHub release.
5. Validate that all of the required files are present on GitHub and S3 and have
the correct checksums as specified in the SHASUMS files.
6. Publish the release on GitHub
7. Delete the <code>release</code> branch.</p>
<h2 id="publish-to-npm"><a href="#publish-to-npm">Publish to npm</a><a class="header-link" href="#publish-to-npm" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Once the publish is successful, run <code>npm run publish-to-npm</code> to publish to
release to npm.</p>
<h2 id="fix-missing-binaries-of-a-release-manually"><a href="#fix-missing-binaries-of-a-release-manually">Fix missing binaries of a release manually</a><a class="header-link" href="#fix-missing-binaries-of-a-release-manually" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>In the case of a corrupted release with broken CI machines, we might have to
re-upload the binaries for an already published release.</p>
<p>The first step is to go to the
<a href="https://github.com/electron/electron/releases">Releases</a> page and delete the
corrupted binaries with the <code>SHASUMS256.txt</code> checksum file.</p>
<p>Then manually create distributions for each platform and upload them:</p>
<pre><code class="hljs language-sh" id="_zxhl00un"><span class="hljs-comment"># Checkout the version to re-upload.</span>
git checkout vTHE.RELEASE.VERSION

<span class="hljs-comment"># Do release build, specifying one target architecture.</span>
./script/bootstrap.py --target_arch [arm|x64|ia32]
./script/build.py -c R
./script/create-dist.py

<span class="hljs-comment"># Explicitly allow overwritting a published release.</span>
./script/upload.py --overwrite</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_zxhl00un">Copy</button></pre>
<p>After re-uploading all distributions, publish again to upload the checksum
file:</p>
<pre><code class="hljs language-sh" id="_f4183j4k">npm run release</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_f4183j4k">Copy</button></pre>

  <hr>
  <h1 id="remote"><a href="#remote">remote</a><a class="header-link" href="#remote" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Use main process modules from the renderer process.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#renderer-process">Renderer</a></p>
<p>The <code>remote</code> module provides a simple way to do inter-process communication
(IPC) between the renderer process (web page) and the main process.</p>
<p>In Electron, GUI-related modules (such as <code>dialog</code>, <code>menu</code> etc.) are only
available in the main process, not in the renderer process. In order to use them
from the renderer process, the <code>ipc</code> module is necessary to send inter-process
messages to the main process. With the <code>remote</code> module, you can invoke methods
of the main process object without explicitly sending inter-process messages,
similar to Java's <a href="http://en.wikipedia.org/wiki/Java_remote_method_invocation">RMI</a>. An example of creating a browser window from a
renderer process:</p>
<pre><code class="hljs language-javascript" id="_x223vih"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>).remote
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">width</span>: <span class="hljs-number">800</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">600</span>})
win.loadURL(<span class="hljs-string">'https://github.com'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_x223vih">Copy</button></pre>
<p><strong>Note:</strong> For the reverse (access the renderer process from the main process),
you can use <a href="https://electronjs.org/docs/api/web-contents#contentsexecutejavascriptcode-usergesture-callback">webContents.executeJavascript</a>.</p>
<h2 id="remote-objects"><a href="#remote-objects">Remote Objects</a><a class="header-link" href="#remote-objects" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Each object (including functions) returned by the <code>remote</code> module represents an
object in the main process (we call it a remote object or remote function).
When you invoke methods of a remote object, call a remote function, or create
a new object with the remote constructor (function), you are actually sending
synchronous inter-process messages.</p>
<p>In the example above, both <code>BrowserWindow</code> and <code>win</code> were remote objects and
<code>new BrowserWindow</code> didn't create a <code>BrowserWindow</code> object in the renderer
process. Instead, it created a <code>BrowserWindow</code> object in the main process and
returned the corresponding remote object in the renderer process, namely the
<code>win</code> object.</p>
<p><strong>Note:</strong> Only <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties">enumerable properties</a> which are present
when the remote object is first referenced are accessible via remote.</p>
<p><strong>Note:</strong> Arrays and Buffers are copied over IPC when accessed via the <code>remote</code>
module. Modifying them in the renderer process does not modify them in the main
process and vice versa.</p>
<h2 id="lifetime-of-remote-objects"><a href="#lifetime-of-remote-objects">Lifetime of Remote Objects</a><a class="header-link" href="#lifetime-of-remote-objects" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Electron makes sure that as long as the remote object in the renderer process
lives (in other words, has not been garbage collected), the corresponding object
in the main process will not be released. When the remote object has been
garbage collected, the corresponding object in the main process will be
dereferenced.</p>
<p>If the remote object is leaked in the renderer process (e.g. stored in a map but
never freed), the corresponding object in the main process will also be leaked,
so you should be very careful not to leak remote objects.</p>
<p>Primary value types like strings and numbers, however, are sent by copy.</p>
<h2 id="passing-callbacks-to-the-main-process"><a href="#passing-callbacks-to-the-main-process">Passing callbacks to the main process</a><a class="header-link" href="#passing-callbacks-to-the-main-process" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Code in the main process can accept callbacks from the renderer - for instance
the <code>remote</code> module - but you should be extremely careful when using this
feature.</p>
<p>First, in order to avoid deadlocks, the callbacks passed to the main process
are called asynchronously. You should not expect the main process to
get the return value of the passed callbacks.</p>
<p>For instance you can't use a function from the renderer process in an
<code>Array.map</code> called in the main process:</p>
<pre><code class="hljs language-javascript" id="_6hi6tn0d"><span class="hljs-comment">// main process mapNumbers.js</span>
exports.withRendererCallback = <span class="hljs-function">(<span class="hljs-params">mapper</span>) =&gt;</span> {
  <span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].map(mapper)
}

exports.withLocalCallback = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
  <span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].map(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x + <span class="hljs-number">1</span>)
}</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_6hi6tn0d">Copy</button></pre>
<pre><code class="hljs language-javascript" id="_qn9klyvm"><span class="hljs-comment">// renderer process</span>
<span class="hljs-keyword">const</span> mapNumbers = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>).remote.require(<span class="hljs-string">'./mapNumbers'</span>)
<span class="hljs-keyword">const</span> withRendererCb = mapNumbers.withRendererCallback(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x + <span class="hljs-number">1</span>)
<span class="hljs-keyword">const</span> withLocalCb = mapNumbers.withLocalCallback()

<span class="hljs-built_in">console</span>.log(withRendererCb, withLocalCb)
<span class="hljs-comment">// [undefined, undefined, undefined], [2, 3, 4]</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_qn9klyvm">Copy</button></pre>
<p>As you can see, the renderer callback's synchronous return value was not as
expected, and didn't match the return value of an identical callback that lives
in the main process.</p>
<p>Second, the callbacks passed to the main process will persist until the
main process garbage-collects them.</p>
<p>For example, the following code seems innocent at first glance. It installs a
callback for the <code>close</code> event on a remote object:</p>
<pre><code class="hljs language-javascript" id="_qcfccizh"><span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>).remote.getCurrentWindow().on(<span class="hljs-string">'close'</span>, () =&gt; {
  <span class="hljs-comment">// window was closed...</span>
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_qcfccizh">Copy</button></pre>
<p>But remember the callback is referenced by the main process until you
explicitly uninstall it. If you do not, each time you reload your window the
callback will be installed again, leaking one callback for each restart.</p>
<p>To make things worse, since the context of previously installed callbacks has
been released, exceptions will be raised in the main process when the <code>close</code>
event is emitted.</p>
<p>To avoid this problem, ensure you clean up any references to renderer callbacks
passed to the main process. This involves cleaning up event handlers, or
ensuring the main process is explicitly told to deference callbacks that came
from a renderer process that is exiting.</p>
<h2 id="accessing-built-in-modules-in-the-main-process"><a href="#accessing-built-in-modules-in-the-main-process">Accessing built-in modules in the main process</a><a class="header-link" href="#accessing-built-in-modules-in-the-main-process" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The built-in modules in the main process are added as getters in the <code>remote</code>
module, so you can use them directly like the <code>electron</code> module.</p>
<pre><code class="hljs language-javascript" id="_0w883krp"><span class="hljs-keyword">const</span> app = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>).remote.app
<span class="hljs-built_in">console</span>.log(app)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_0w883krp">Copy</button></pre>
<h2 id="methods"><a href="#methods">Methods</a><a class="header-link" href="#methods" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>remote</code> module has the following methods:</p>
<h3 id="remoterequiremodule"><a href="#remoterequiremodule"><code>remote.require(module)</code></a><a class="header-link" href="#remoterequiremodule" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>module</code> String</li>
</ul>
<p>Returns <code>any</code> - The object returned by <code>require(module)</code> in the main process.
Modules specified by their relative path will resolve relative to the entrypoint
of the main process.</p>
<p>e.g.</p>
<pre><code class="hljs language-sh" id="_j4rej2ul">project/
├── main
│&nbsp;&nbsp; ├── foo.js
│&nbsp;&nbsp; └── index.js
├── package.json
└── renderer
    └── index.js</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_j4rej2ul">Copy</button></pre>
<pre><code class="hljs language-js" id="_mwxfn7tp"><span class="hljs-comment">// main process: main/index.js</span>
<span class="hljs-keyword">const</span> {app} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
app.on(<span class="hljs-string">'ready'</span>, () =&gt; { <span class="hljs-comment">/* ... */</span> })</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_mwxfn7tp">Copy</button></pre>
<pre><code class="hljs language-js" id="_g88nt5m"><span class="hljs-comment">// some relative module: main/foo.js</span>
<span class="hljs-built_in">module</span>.exports = <span class="hljs-string">'bar'</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_g88nt5m">Copy</button></pre>
<pre><code class="hljs language-js" id="_mkigu2j"><span class="hljs-comment">// renderer process: renderer/index.js</span>
<span class="hljs-keyword">const</span> foo = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>).remote.require(<span class="hljs-string">'./foo'</span>) <span class="hljs-comment">// bar</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_mkigu2j">Copy</button></pre>
<h3 id="remotegetcurrentwindow"><a href="#remotegetcurrentwindow"><code>remote.getCurrentWindow()</code></a><a class="header-link" href="#remotegetcurrentwindow" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <a href="https://electronjs.org/docs/api/browser-window"><code>BrowserWindow</code></a> - The window to which this web page
belongs.</p>
<h3 id="remotegetcurrentwebcontents"><a href="#remotegetcurrentwebcontents"><code>remote.getCurrentWebContents()</code></a><a class="header-link" href="#remotegetcurrentwebcontents" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <a href="https://electronjs.org/docs/api/web-contents"><code>WebContents</code></a> - The web contents of this web page.</p>
<h3 id="remotegetglobalname"><a href="#remotegetglobalname"><code>remote.getGlobal(name)</code></a><a class="header-link" href="#remotegetglobalname" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>name</code> String</li>
</ul>
<p>Returns <code>any</code> - The global variable of <code>name</code> (e.g. <code>global[name]</code>) in the main
process.</p>
<h2 id="properties"><a href="#properties">Properties</a><a class="header-link" href="#properties" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<h3 id="remoteprocess"><a href="#remoteprocess"><code>remote.process</code></a><a class="header-link" href="#remoteprocess" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The <code>process</code> object in the main process. This is the same as
<code>remote.getGlobal('process')</code> but is cached.</p>

  <hr>
  <h1 id="removeclientcertificate-object"><a href="#removeclientcertificate-object">RemoveClientCertificate Object</a><a class="header-link" href="#removeclientcertificate-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>type</code> String - <code>clientCertificate</code>.</li>
<li><code>origin</code> String - Origin of the server whose associated client certificate
must be removed from the cache.</li>
</ul>

  <hr>
  <h1 id="removepassword-object"><a href="#removepassword-object">RemovePassword Object</a><a class="header-link" href="#removepassword-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>type</code> String - <code>password</code>.</li>
<li><code>origin</code> String (optional) - When provided, the authentication info
related to the origin will only be removed otherwise the entire cache
will be cleared.</li>
<li><code>scheme</code> String (optional) - Scheme of the authentication.
Can be <code>basic</code>, <code>digest</code>, <code>ntlm</code>, <code>negotiate</code>. Must be provided if
removing by <code>origin</code>.</li>
<li><code>realm</code> String (optional) - Realm of the authentication. Must be provided if
removing by <code>origin</code>.</li>
<li><code>username</code> String (optional) - Credentials of the authentication. Must be
provided if removing by <code>origin</code>.</li>
<li><code>password</code> String (optional) - Credentials of the authentication. Must be
provided if removing by <code>origin</code>.</li>
</ul>

  <hr>
  <h1 id="repl"><a href="#repl">REPL</a><a class="header-link" href="#repl" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>Read-Eval-Print-Loop (REPL) is a simple, interactive computer programming
environment that takes single user inputs (i.e. single expressions), evaluates
them, and returns the result to the user.</p>
<p>The <code>repl</code> module provides a REPL implementation that can be accessed using:</p>
<ul>
<li>
<p>Assuming you have <code>electron</code> or <code>electron-prebuilt</code> installed as a local
project dependency:</p>
<pre><code class="hljs language-sh" id="_43sxr3il">./node_modules/.bin/electron --interactive</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_43sxr3il">Copy</button></pre>
</li>
<li>
<p>Assuming you have <code>electron</code> or <code>electron-prebuilt</code> installed globally:</p>
<pre><code class="hljs language-sh" id="_vc60gmk7">electron --interactive</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_vc60gmk7">Copy</button></pre>
</li>
</ul>
<p>This only creates a REPL for the main process. You can use the Console
tab of the Dev Tools to get a REPL for the renderer processes.</p>
<p><strong>Note:</strong> <code>electron --interactive</code> is not available on Windows.</p>
<p>More information can be found in the <a href="https://nodejs.org/dist/latest/docs/api/repl.html">Node.js REPL docs</a>.</p>

  <hr>
  <h1 id="sandbox-option"><a href="#sandbox-option"><code>sandbox</code> Option</a><a class="header-link" href="#sandbox-option" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Create a browser window with a renderer that can run inside Chromium OS sandbox. With this
option enabled, the renderer must communicate via IPC to the main process in order to access node APIs.
However, in order to enable the Chromium OS sandbox, electron must be run with the <code>--enable-sandbox</code>
command line argument.</p>
</blockquote>
<p>One of the key security features of Chromium is that all blink rendering/JavaScript
code is executed within a sandbox. This sandbox uses OS-specific features to ensure
that exploits in the renderer process cannot harm the system.</p>
<p>In other words, when the sandbox is enabled, the renderers can only make changes
to the system by delegating tasks to the main process via IPC.
<a href="https://www.chromium.org/developers/design-documents/sandbox">Here's</a> more
information about the sandbox.</p>
<p>Since a major feature in electron is the ability to run node.js in the
renderer process (making it easier to develop desktop applications using web
technologies), the sandbox is disabled by electron. This is because
most node.js APIs require system access. <code>require()</code> for example, is not
possible without file system permissions, which are not available in a sandboxed
environment.</p>
<p>Usually this is not a problem for desktop applications since the code is always
trusted, but it makes electron less secure than chromium for displaying
untrusted web content. For applications that require more security, the
<code>sandbox</code> flag will force electron to spawn a classic chromium renderer that is
compatible with the sandbox.</p>
<p>A sandboxed renderer doesn't have a node.js environment running and doesn't
expose node.js JavaScript APIs to client code. The only exception is the preload script,
which has access to a subset of the electron renderer API.</p>
<p>Another difference is that sandboxed renderers don't modify any of the default
JavaScript APIs. Consequently, some APIs such as <code>window.open</code> will work as they
do in chromium (i.e. they do not return a <code>BrowserWindowProxy</code>).</p>
<h2 id="example"><a href="#example">Example</a><a class="header-link" href="#example" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>To create a sandboxed window, simply pass <code>sandbox: true</code> to <code>webPreferences</code>:</p>
<pre><code class="hljs language-js" id="_t8vet1v"><span class="hljs-keyword">let</span> win
app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  win = <span class="hljs-keyword">new</span> BrowserWindow({
    <span class="hljs-attr">webPreferences</span>: {
      <span class="hljs-attr">sandbox</span>: <span class="hljs-literal">true</span>
    }
  })
  win.loadURL(<span class="hljs-string">'http://google.com'</span>)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_t8vet1v">Copy</button></pre>
<p>In the above code the <code>BrowserWindow</code> that was created has node.js disabled and can communicate
only via IPC. The use of this option stops electron from creating a node.js runtime in the renderer. Also,
within this new window <code>window.open</code> follows the native behaviour (by default electron creates a <code>BrowserWindow</code>
and returns a proxy to this via <code>window.open</code>).</p>
<p>It is important to note that this option alone won't enable the OS-enforced sandbox. To enable this feature, the
<code>--enable-sandbox</code> command-line argument must be passed to electron, which will
force <code>sandbox: true</code> for all <code>BrowserWindow</code> instances.</p>
<p>To enable OS-enforced sandbox on <code>BrowserWindow</code> or <code>webview</code> process with <code>sandbox:true</code> without causing
entire app to be in sandbox, <code>--enable-mixed-sandbox</code> command-line argument must be passed to electron.
This option is currently only supported on macOS and Windows.</p>
<pre><code class="hljs language-js" id="_63fo8j5r"><span class="hljs-keyword">let</span> win
app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  <span class="hljs-comment">// no need to pass `sandbox: true` since `--enable-sandbox` was enabled.</span>
  win = <span class="hljs-keyword">new</span> BrowserWindow()
  win.loadURL(<span class="hljs-string">'http://google.com'</span>)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_63fo8j5r">Copy</button></pre>
<p>Note that it is not enough to call
<code>app.commandLine.appendSwitch('--enable-sandbox')</code>, as electron/node startup
code runs after it is possible to make changes to chromium sandbox settings. The
switch must be passed to electron on the command-line:</p>
<pre><code class="hljs language-sh" id="_abge0r9">electron --<span class="hljs-built_in">enable</span>-sandbox app.js</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_abge0r9">Copy</button></pre>
<p>It is not possible to have the OS sandbox active only for some renderers, if
<code>--enable-sandbox</code> is enabled, normal electron windows cannot be created.</p>
<p>If you need to mix sandboxed and non-sandboxed renderers in one application,
simply omit the <code>--enable-sandbox</code> argument. Without this argument, windows
created with <code>sandbox: true</code> will still have node.js disabled and communicate
only via IPC, which by itself is already a gain from security POV.</p>
<h2 id="preload"><a href="#preload">Preload</a><a class="header-link" href="#preload" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>An app can make customizations to sandboxed renderers using a preload script.
Here's an example:</p>
<pre><code class="hljs language-js" id="_3jwsf5iy"><span class="hljs-keyword">let</span> win
app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  win = <span class="hljs-keyword">new</span> BrowserWindow({
    <span class="hljs-attr">webPreferences</span>: {
      <span class="hljs-attr">sandbox</span>: <span class="hljs-literal">true</span>,
      <span class="hljs-attr">preload</span>: <span class="hljs-string">'preload.js'</span>
    }
  })
  win.loadURL(<span class="hljs-string">'http://google.com'</span>)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_3jwsf5iy">Copy</button></pre>
<p>and preload.js:</p>
<pre><code class="hljs language-js" id="_uf2xo4qd"><span class="hljs-comment">// This file is loaded whenever a javascript context is created. It runs in a</span>
<span class="hljs-comment">// private scope that can access a subset of electron renderer APIs. We must be</span>
<span class="hljs-comment">// careful to not leak any objects into the global scope!</span>
<span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>)
<span class="hljs-keyword">const</span> {ipcRenderer} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-comment">// read a configuration file using the `fs` module</span>
<span class="hljs-keyword">const</span> buf = fs.readFileSync(<span class="hljs-string">'allowed-popup-urls.json'</span>)
<span class="hljs-keyword">const</span> allowedUrls = <span class="hljs-built_in">JSON</span>.parse(buf.toString(<span class="hljs-string">'utf8'</span>))

<span class="hljs-keyword">const</span> defaultWindowOpen = <span class="hljs-built_in">window</span>.open

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">customWindowOpen</span> (<span class="hljs-params">url, ...args</span>) </span>{
  <span class="hljs-keyword">if</span> (allowedUrls.indexOf(url) === <span class="hljs-number">-1</span>) {
    ipcRenderer.sendSync(<span class="hljs-string">'blocked-popup-notification'</span>, location.origin, url)
    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>
  }
  <span class="hljs-keyword">return</span> defaultWindowOpen(url, ...args)
}

<span class="hljs-built_in">window</span>.open = customWindowOpen</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_uf2xo4qd">Copy</button></pre>
<p>Important things to notice in the preload script:</p>
<ul>
<li>Even though the sandboxed renderer doesn't have node.js running, it still has
access to a limited node-like environment: <code>Buffer</code>, <code>process</code>, <code>setImmediate</code>
and <code>require</code> are available.</li>
<li>The preload script can indirectly access all APIs from the main process through the
<code>remote</code> and <code>ipcRenderer</code> modules. This is how <code>fs</code> (used above) and other
modules are implemented: They are proxies to remote counterparts in the main
process.</li>
<li>The preload script must be contained in a single script, but it is possible to have
complex preload code composed with multiple modules by using a tool like
browserify, as explained below. In fact, browserify is already used by
electron to provide a node-like environment to the preload script.</li>
</ul>
<p>To create a browserify bundle and use it as a preload script, something like
the following should be used:</p>
<pre><code class="hljs language-sh" id="_629yp3bj">  browserify preload/index.js \
    -x electron \
    -x fs \
    --insert-global-vars=__filename,__dirname -o preload.js</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_629yp3bj">Copy</button></pre>
<p>The <code>-x</code> flag should be used with any required module that is already exposed in
the preload scope, and tells browserify to use the enclosing <code>require</code> function
for it. <code>--insert-global-vars</code> will ensure that <code>process</code>, <code>Buffer</code> and
<code>setImmediate</code> are also taken from the enclosing scope(normally browserify
injects code for those).</p>
<p>Currently the <code>require</code> function provided in the preload scope exposes the
following modules:</p>
<ul>
<li><code>child_process</code></li>
<li>
<p><code>electron</code></p>
<ul>
<li><code>crashReporter</code></li>
<li><code>remote</code></li>
<li><code>ipcRenderer</code></li>
<li><code>webFrame</code></li>
</ul>
</li>
<li><code>fs</code></li>
<li><code>os</code></li>
<li><code>timers</code></li>
<li><code>url</code></li>
</ul>
<p>More may be added as needed to expose more electron APIs in the sandbox, but any
module in the main process can already be used through
<code>electron.remote.require</code>.</p>
<h2 id="status"><a href="#status">Status</a><a class="header-link" href="#status" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Please use the <code>sandbox</code> option with care, as it is still an experimental
feature. We are still not aware of the security implications of exposing some
electron renderer APIs to the preload script, but here are some things to
consider before rendering untrusted content:</p>
<ul>
<li>A preload script can accidentaly leak privileged APIs to untrusted code.</li>
<li>Some bug in V8 engine may allow malicious code to access the renderer preload
APIs, effectively granting full access to the system through the <code>remote</code>
module.</li>
</ul>
<p>Since rendering untrusted content in electron is still uncharted territory,
the APIs exposed to the sandbox preload script should be considered more
unstable than the rest of electron APIs, and may have breaking changes to fix
security issues.</p>
<p>One planned enhancement that should greatly increase security is to block IPC
messages from sandboxed renderers by default, allowing the main process to
explicitly define a set of messages the renderer is allowed to send.</p>

  <hr>
  <h1 id="screen"><a href="#screen">screen</a><a class="header-link" href="#screen" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Retrieve information about screen size, displays, cursor position, etc.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a>, <a href="https://electronjs.org/docs/glossary#renderer-process">Renderer</a></p>
<p>You cannot require or use this module until the <code>ready</code> event of the <code>app</code>
module is emitted.</p>
<p><code>screen</code> is an <a href="https://nodejs.org/api/events.html#events_class_eventemitter">EventEmitter</a>.</p>
<p><strong>Note:</strong> In the renderer / DevTools, <code>window.screen</code> is a reserved DOM
property, so writing <code>let {screen} = require('electron')</code> will not work.</p>
<p>An example of creating a window that fills the whole screen:</p>
<pre><code class="hljs language-javascript" id="_i3h0ffp"><span class="hljs-keyword">const</span> electron = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">const</span> {app, BrowserWindow} = electron

<span class="hljs-keyword">let</span> win

app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  <span class="hljs-keyword">const</span> {width, height} = electron.screen.getPrimaryDisplay().workAreaSize
  win = <span class="hljs-keyword">new</span> BrowserWindow({width, height})
  win.loadURL(<span class="hljs-string">'https://github.com'</span>)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_i3h0ffp">Copy</button></pre>
<p>Another example of creating a window in the external display:</p>
<pre><code class="hljs language-javascript" id="_hoi783b"><span class="hljs-keyword">const</span> electron = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">const</span> {app, BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-keyword">let</span> win

app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  <span class="hljs-keyword">let</span> displays = electron.screen.getAllDisplays()
  <span class="hljs-keyword">let</span> externalDisplay = displays.find(<span class="hljs-function">(<span class="hljs-params">display</span>) =&gt;</span> {
    <span class="hljs-keyword">return</span> display.bounds.x !== <span class="hljs-number">0</span> || display.bounds.y !== <span class="hljs-number">0</span>
  })

  <span class="hljs-keyword">if</span> (externalDisplay) {
    win = <span class="hljs-keyword">new</span> BrowserWindow({
      <span class="hljs-attr">x</span>: externalDisplay.bounds.x + <span class="hljs-number">50</span>,
      <span class="hljs-attr">y</span>: externalDisplay.bounds.y + <span class="hljs-number">50</span>
    })
    win.loadURL(<span class="hljs-string">'https://github.com'</span>)
  }
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_hoi783b">Copy</button></pre>
<h2 id="events"><a href="#events">Events</a><a class="header-link" href="#events" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>screen</code> module emits the following events:</p>
<h3 id="event-display-added"><a href="#event-display-added">Event: 'display-added'</a><a class="header-link" href="#event-display-added" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>newDisplay</code> <a href="https://electronjs.org/docs/api/structures/display">Display</a></li>
</ul>
<p>Emitted when <code>newDisplay</code> has been added.</p>
<h3 id="event-display-removed"><a href="#event-display-removed">Event: 'display-removed'</a><a class="header-link" href="#event-display-removed" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>oldDisplay</code> <a href="https://electronjs.org/docs/api/structures/display">Display</a></li>
</ul>
<p>Emitted when <code>oldDisplay</code> has been removed.</p>
<h3 id="event-display-metrics-changed"><a href="#event-display-metrics-changed">Event: 'display-metrics-changed'</a><a class="header-link" href="#event-display-metrics-changed" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>display</code> <a href="https://electronjs.org/docs/api/structures/display">Display</a></li>
<li><code>changedMetrics</code> String[]</li>
</ul>
<p>Emitted when one or more metrics change in a <code>display</code>. The <code>changedMetrics</code> is
an array of strings that describe the changes. Possible changes are <code>bounds</code>,
<code>workArea</code>, <code>scaleFactor</code> and <code>rotation</code>.</p>
<h2 id="methods"><a href="#methods">Methods</a><a class="header-link" href="#methods" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>screen</code> module has the following methods:</p>
<h3 id="screengetcursorscreenpoint"><a href="#screengetcursorscreenpoint"><code>screen.getCursorScreenPoint()</code></a><a class="header-link" href="#screengetcursorscreenpoint" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <a href="https://electronjs.org/docs/api/structures/point"><code>Point</code></a></p>
<p>The current absolute position of the mouse pointer.</p>
<h3 id="screengetmenubarheight-macos"><a href="#screengetmenubarheight-macos"><code>screen.getMenuBarHeight()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#screengetmenubarheight-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Integer</code> - The height of the menu bar in pixels.</p>
<h3 id="screengetprimarydisplay"><a href="#screengetprimarydisplay"><code>screen.getPrimaryDisplay()</code></a><a class="header-link" href="#screengetprimarydisplay" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <a href="https://electronjs.org/docs/api/structures/display"><code>Display</code></a> - The primary display.</p>
<h3 id="screengetalldisplays"><a href="#screengetalldisplays"><code>screen.getAllDisplays()</code></a><a class="header-link" href="#screengetalldisplays" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <a href="https://electronjs.org/docs/api/structures/display"><code>Display[]</code></a> - An array of displays that are currently available.</p>
<h3 id="screengetdisplaynearestpointpoint"><a href="#screengetdisplaynearestpointpoint"><code>screen.getDisplayNearestPoint(point)</code></a><a class="header-link" href="#screengetdisplaynearestpointpoint" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>point</code> <a href="https://electronjs.org/docs/api/structures/point">Point</a></li>
</ul>
<p>Returns <a href="https://electronjs.org/docs/api/structures/display"><code>Display</code></a> - The display nearest the specified point.</p>
<h3 id="screengetdisplaymatchingrect"><a href="#screengetdisplaymatchingrect"><code>screen.getDisplayMatching(rect)</code></a><a class="header-link" href="#screengetdisplaymatchingrect" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>rect</code> <a href="https://electronjs.org/docs/api/structures/rectangle">Rectangle</a></li>
</ul>
<p>Returns <a href="https://electronjs.org/docs/api/structures/display"><code>Display</code></a> - The display that most closely
intersects the provided bounds.</p>

  <hr>
  <h1 id="scrubberitem-object"><a href="#scrubberitem-object">ScrubberItem Object</a><a class="header-link" href="#scrubberitem-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>label</code> String - (optional) The text to appear in this item</li>
<li><code>icon</code> NativeImage - (optional) The image to appear in this item</li>
</ul>

  <hr>
  <h1 id="security-native-capabilities-and-your-responsibility"><a href="#security-native-capabilities-and-your-responsibility">Security, Native Capabilities, and Your Responsibility</a><a class="header-link" href="#security-native-capabilities-and-your-responsibility" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>As web developers, we usually enjoy the strong security net of the browser -
the risks associated with the code we write are relatively small. Our websites
are granted limited powers in a sandbox, and we trust that our users enjoy a
browser built by a large team of engineers that is able to quickly respond to
newly discovered security threats.</p>
<p>When working with Electron, it is important to understand that Electron is not
a web browser. It allows you to build feature-rich desktop applications with
familiar web technologies, but your code wields much greater power. JavaScript
can access the filesystem, user shell, and more. This allows you to build
high quality native applications, but the inherent security risks scale with
the additional powers granted to your code.</p>
<p>With that in mind, be aware that displaying arbitrary content from untrusted
sources poses a severe security risk that Electron is not intended to handle.
In fact, the most popular Electron apps (Atom, Slack, Visual Studio Code, etc)
display primarily local content (or trusted, secure remote content without Node
integration) – if your application executes code from an online source, it is
your responsibility to ensure that the code is not malicious.</p>
<h2 id="reporting-security-issues"><a href="#reporting-security-issues">Reporting Security Issues</a><a class="header-link" href="#reporting-security-issues" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>For information on how to properly disclose an Electron vulnerability,
see <a href="https://github.com/electron/electron/tree/master/SECURITY.md">SECURITY.md</a></p>
<h2 id="chromium-security-issues-and-upgrades"><a href="#chromium-security-issues-and-upgrades">Chromium Security Issues and Upgrades</a><a class="header-link" href="#chromium-security-issues-and-upgrades" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>While Electron strives to support new versions of Chromium as soon as possible,
developers should be aware that upgrading is a serious undertaking - involving
hand-editing dozens or even hundreds of files. Given the resources and
contributions available today, Electron will often not be on the very latest
version of Chromium, lagging behind by either days or weeks.</p>
<p>We feel that our current system of updating the Chromium component strikes an
appropriate balance between the resources we have available and the needs of
the majority of applications built on top of the framework. We definitely are
interested in hearing more about specific use cases from the people that build
things on top of Electron. Pull requests and contributions supporting this
effort are always very welcome.</p>
<h2 id="ignoring-above-advice"><a href="#ignoring-above-advice">Ignoring Above Advice</a><a class="header-link" href="#ignoring-above-advice" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>A security issue exists whenever you receive code from a remote destination and
execute it locally. As an example, consider a remote website being displayed
inside a <a href="https://electronjs.org/docs/api/browser-window"><code>BrowserWindow</code></a>. If an attacker somehow manages to
change said content (either by attacking the source directly, or by sitting
between  your app and the actual destination), they will be able to execute
native code on the user's machine.</p>
<blockquote>
<p>:warning: Under no circumstances should you load and execute remote code with
Node.js integration enabled. Instead, use only local files (packaged together
with your application) to execute Node.js code. To display remote content, use
the <a href="https://electronjs.org/docs/api/web-view"><code>webview</code></a> tag and make sure to disable the <code>nodeIntegration</code>.</p>
</blockquote>
<h2 id="electron-security-warnings"><a href="#electron-security-warnings">Electron Security Warnings</a><a class="header-link" href="#electron-security-warnings" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>From Electron 2.0 on, developers will see warnings and recommendations printed
to the developer console. They only show op when the binary's name is Electron,
indicating that a developer is currently looking at the console.</p>
<p>You can force-enable or force-disable these warnings by setting
<code>ELECTRON_ENABLE_SECURITY_WARNINGS</code> or <code>ELECTRON_DISABLE_SECURITY_WARNINGS</code> on
either <code>process.env</code> or the <code>window</code> object.</p>
<h2 id="checklist-security-recommendations"><a href="#checklist-security-recommendations">Checklist: Security Recommendations</a><a class="header-link" href="#checklist-security-recommendations" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>This is not bulletproof, but at the least, you should follow these steps to
improve the security of your application.</p>
<p>1) <a href="#only-load-secure-content">Only load secure content</a>
2) <a href="#disable-node.js-integration-for-remote-content">Disable the Node.js integration in all renderers that display remote content</a>
3) <a href="#enable-context-isolation-for-remote-content">Enable context isolation in all renderers that display remote content</a>
4) <a href="#handle-session-permission-requests-from-remote-content">Use <code>ses.setPermissionRequestHandler()</code> in all sessions that load remote content</a>
5) <a href="#do-not-disable-websecurity">Do not disable <code>webSecurity</code></a>
6) <a href="#define-a-content-security-policy">Define a <code>Content-Security-Policy</code></a>
and use restrictive rules (i.e. <code>script-src 'self'</code>)
7) <a href="#override-and-disable-eval">Override and disable <code>eval</code></a>
, which allows strings to be executed as code.
8) <a href="#do-not-set-allowRunningInsecureContent-to-true">Do not set <code>allowRunningInsecureContent</code> to <code>true</code></a>
9) <a href="#do-not-enable-experimental-features">Do not enable experimental features</a>
10) <a href="#do-not-use-blinkfeatures">Do not use <code>blinkFeatures</code></a>
11) <a href="#do-not-use-allowpopups">WebViews: Do not use <code>allowpopups</code></a>
12) <a href="#verify-webview-options-before-creation">WebViews: Verify the options and params of all <code>&lt;webview&gt;</code> tags</a></p>
<h2 id="1-only-load-secure-content"><a href="#1-only-load-secure-content">1) Only Load Secure Content</a><a class="header-link" href="#1-only-load-secure-content" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Any resources not included with your application should be loaded using a
secure protocol like <code>HTTPS</code>. In other words, do not use insecure protocols
like <code>HTTP</code>. Similarly, we recommed the use of <code>WSS</code> over <code>WS</code>, <code>FTPS</code> over
<code>FTP</code>, and so on.</p>
<h3 id="why"><a href="#why">Why?</a><a class="header-link" href="#why" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p><code>HTTPS</code> has three main benefits:</p>
<p>1) It authenticates the remote server, ensuring your app connects to the correct
host instead of an impersonator.
2) It ensures data integrity, asserting that the data was not modified while in
transit between your application and the host.
3) It encrypts the traffic between your user and the destination host, making it
more difficult to eavesdrop on the information sent between your app and
the host.</p>
<h3 id="how"><a href="#how">How?</a><a class="header-link" href="#how" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-js" id="_am4rlomj"><span class="hljs-comment">// Bad</span>
browserWindow.loadURL(<span class="hljs-string">'http://my-website.com'</span>)

<span class="hljs-comment">// Good</span>
browserWindow.loadURL(<span class="hljs-string">'https://my-website.com'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_am4rlomj">Copy</button></pre>
<pre><code class="hljs language-html" id="_toe2pniu"><span class="hljs-comment">&lt;!-- Bad --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://cdn.com/react.js"</span>&gt;</span><span class="null"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://cdn.com/style.css"</span>&gt;</span>

<span class="hljs-comment">&lt;!-- Good --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">crossorigin</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.com/react.js"</span>&gt;</span><span class="null"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://cdn.com/style.css"</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_toe2pniu">Copy</button></pre>
<h2 id="2-disable-nodejs-integration-for-remote-content"><a href="#2-disable-nodejs-integration-for-remote-content">2) Disable Node.js Integration for Remote Content</a><a class="header-link" href="#2-disable-nodejs-integration-for-remote-content" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>It is paramount that you disable Node.js integration in any renderer
(<a href="https://electronjs.org/docs/api/browser-window"><code>BrowserWindow</code></a>, <a href="https://electronjs.org/docs/api/browser-view"><code>BrowserView</code></a>, or
<a href="https://electronjs.org/docs/api/web-view"><code>WebView</code></a>) that loads remote content. The goal is to limit the
powers you grant to remote content, thus making it dramatically more difficult
for an attacker to harm your users should they gain the ability to execute
JavaScript on your website.</p>
<p>After this, you can grant additional permissions for specific hosts. For example,
if you are opening a BrowserWindow pointed at `<a href="https://my-website.com/%22">my-website.com/"</a>, you can
give that website exactly the abilities it needs, but no more.</p>
<h3 id="why-1"><a href="#why-1">Why?</a><a class="header-link" href="#why-1" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>A cross-site-scripting (XSS) attack is more dangerous if an attacker can jump
out of the renderer process and execute code on the user's computer.
Cross-site-scripting attacks are fairly common - and while an issue, their
power is usually limited to messing with the website that they are executed on.
Disabling Node.js integration helps prevent an XSS from being escalated into a
so-called "Remote Code Execution" (RCE) attack.</p>
<h3 id="how-1"><a href="#how-1">How?</a><a class="header-link" href="#how-1" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-js" id="_o76s0jby"><span class="hljs-comment">// Bad</span>
<span class="hljs-keyword">const</span> mainWindow = <span class="hljs-keyword">new</span> BrowserWindow()
mainWindow.loadURL(<span class="hljs-string">'https://my-website.com'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_o76s0jby">Copy</button></pre>
<pre><code class="hljs language-js" id="_kxhctd5"><span class="hljs-comment">// Good</span>
<span class="hljs-keyword">const</span> mainWindow = <span class="hljs-keyword">new</span> BrowserWindow({
  <span class="hljs-attr">webPreferences</span>: {
    <span class="hljs-attr">nodeIntegration</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-attr">preload</span>: <span class="hljs-string">'./preload.js'</span>
  }
})

mainWindow.loadURL(<span class="hljs-string">'https://my-website.com'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_kxhctd5">Copy</button></pre>
<pre><code class="hljs language-html" id="_4jqtf46n"><span class="hljs-comment">&lt;!-- Bad --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">webview</span> <span class="hljs-attr">nodeIntegration</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"page.html"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">webview</span>&gt;</span>

<span class="hljs-comment">&lt;!-- Good --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">webview</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"page.html"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">webview</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_4jqtf46n">Copy</button></pre>
<p>When disabling Node.js integration, you can still expose APIs to your website that
do consume Node.js modules or features. Preload scripts continue to have access
to <code>require</code> and other Node.js features, allowing developers to expose a custom
API to remotely loaded content.</p>
<p>In the following example preload script, the later loaded website will have
access to a <code>window.readConfig()</code> method, but no Node.js features.</p>
<pre><code class="hljs language-js" id="_udkl4bk"><span class="hljs-keyword">const</span> { readFileSync } = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>)

<span class="hljs-built_in">window</span>.readConfig = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> data = readFileSync(<span class="hljs-string">'./config.json'</span>)
  <span class="hljs-keyword">return</span> data
}</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_udkl4bk">Copy</button></pre>
<h2 id="3-enable-context-isolation-for-remote-content"><a href="#3-enable-context-isolation-for-remote-content">3) Enable Context Isolation for Remote Content</a><a class="header-link" href="#3-enable-context-isolation-for-remote-content" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Context isolation is an Electron feature that allows developers to run code
in preload scripts and in Electron APIs in a dedicated JavaScript context. In
practice, that means that global objects like <code>Array.prototype.push</code> or
<code>JSON.parse</code> cannot be modified by scripts running in the renderer process.</p>
<p>Electron uses the same technology as Chromium's <a href="https://developer.chrome.com/extensions/content_scripts#execution-environment">Content Scripts</a>
to enable this behavior.</p>
<h3 id="why-2"><a href="#why-2">Why?</a><a class="header-link" href="#why-2" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Context isolation allows each the scripts on running in the renderer to make
changes to its JavaScript environment without worrying about conflicting with
the scripts in the Electron API or the preload script.</p>
<p>While still an experimental Electron feature, context isolation adds an
additional layer of security. It creates a new JavaScript world for Electron
APIs and preload scripts.</p>
<p>At the same time, preload scripts still have access to the  <code>document</code> and
<code>window</code> objects. In other words, you're getting a decent return on a likely
very small investment.</p>
<h3 id="how-2"><a href="#how-2">How?</a><a class="header-link" href="#how-2" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-js" id="_rkl1ny"><span class="hljs-comment">// Main process</span>
<span class="hljs-keyword">const</span> mainWindow = <span class="hljs-keyword">new</span> BrowserWindow({
  <span class="hljs-attr">webPreferences</span>: {
    <span class="hljs-attr">contextIsolation</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">preload</span>: <span class="hljs-string">'preload.js'</span>
  }
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_rkl1ny">Copy</button></pre>
<pre><code class="hljs language-js" id="_r1mnqabg"><span class="hljs-comment">// Preload script</span>

<span class="hljs-comment">// Set a variable in the page before it loads</span>
webFrame.executeJavaScript(<span class="hljs-string">'window.foo = "foo";'</span>)

<span class="hljs-comment">// The loaded page will not be able to access this, it is only available</span>
<span class="hljs-comment">// in this context</span>
<span class="hljs-built_in">window</span>.bar = <span class="hljs-string">'bar'</span>

<span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'DOMContentLoaded'</span>, () =&gt; {
  <span class="hljs-comment">// Will log out 'undefined' since window.foo is only available in the main</span>
  <span class="hljs-comment">// context</span>
  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.foo)

  <span class="hljs-comment">// Will log out 'bar' since window.bar is available in this context</span>
  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.bar)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_r1mnqabg">Copy</button></pre>
<h2 id="4-handle-session-permission-requests-from-remote-content"><a href="#4-handle-session-permission-requests-from-remote-content">4) Handle Session Permission Requests From Remote Content</a><a class="header-link" href="#4-handle-session-permission-requests-from-remote-content" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>You may have seen permission requests while using Chrome: They pop up whenever
the website attempts to use a feature that the user has to manually approve (
like notifications).</p>
<p>The API is based on the <a href="https://developer.chrome.com/extensions/permissions">Chromium permissions API</a>
and implements the same types of permissions.</p>
<h3 id="why-3"><a href="#why-3">Why?</a><a class="header-link" href="#why-3" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>By default, Electron will automatically approve all permission requests unless
the developer has manually configured a custom handler. While a solid default,
security-conscious developers might want to assume the very opposite.</p>
<h3 id="how-3"><a href="#how-3">How?</a><a class="header-link" href="#how-3" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-js" id="_b5lyimr4"><span class="hljs-keyword">const</span> { session } = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

session
  .fromPartition(<span class="hljs-string">'some-partition'</span>)
  .setPermissionRequestHandler(<span class="hljs-function">(<span class="hljs-params">webContents, permission, callback</span>) =&gt;</span> {
    <span class="hljs-keyword">const</span> url = webContents.getURL()

    <span class="hljs-keyword">if</span> (permission === <span class="hljs-string">'notifications'</span>) {
      <span class="hljs-comment">// Approves the permissions request</span>
      callback(<span class="hljs-literal">true</span>)
    }

    <span class="hljs-keyword">if</span> (!url.startsWith(<span class="hljs-string">'https://my-website.com'</span>)) {
      <span class="hljs-comment">// Denies the permissions request</span>
      <span class="hljs-keyword">return</span> callback(<span class="hljs-literal">false</span>)
    }
  })</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_b5lyimr4">Copy</button></pre>
<h2 id="5-do-not-disable-websecurity"><a href="#5-do-not-disable-websecurity">5) Do Not Disable WebSecurity</a><a class="header-link" href="#5-do-not-disable-websecurity" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p><em>Recommendation is Electron's default</em></p>
<p>You may have already guessed that disabling the <code>webSecurity</code> property on a
renderer process (<a href="https://electronjs.org/docs/api/browser-window"><code>BrowserWindow</code></a>,
<a href="https://electronjs.org/docs/api/browser-view"><code>BrowserView</code></a>, or <a href="https://electronjs.org/docs/api/web-view"><code>WebView</code></a>) disables crucial
security features.</p>
<p>Do not disable <code>webSecurity</code> in production applications.</p>
<h3 id="why-4"><a href="#why-4">Why?</a><a class="header-link" href="#why-4" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Disabling <code>webSecurity</code> will disable the same-origin policy and set
<code>allowRunningInsecureContent</code> property to <code>true</code>. In other words, it allows
the execution of insecure code from different domains.</p>
<h3 id="how-4"><a href="#how-4">How?</a><a class="header-link" href="#how-4" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-js" id="_c1bryven"><span class="hljs-comment">// Bad</span>
<span class="hljs-keyword">const</span> mainWindow = <span class="hljs-keyword">new</span> BrowserWindow({
  <span class="hljs-attr">webPreferences</span>: {
    <span class="hljs-attr">webSecurity</span>: <span class="hljs-literal">false</span>
  }
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_c1bryven">Copy</button></pre>
<pre><code class="hljs language-js" id="_zzk6mp1"><span class="hljs-comment">// Good</span>
<span class="hljs-keyword">const</span> mainWindow = <span class="hljs-keyword">new</span> BrowserWindow()</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_zzk6mp1">Copy</button></pre>
<pre><code class="hljs language-html" id="_v4fe99g"><span class="hljs-comment">&lt;!-- Bad --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">webview</span> <span class="hljs-attr">disablewebsecurity</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"page.html"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">webview</span>&gt;</span>

<span class="hljs-comment">&lt;!-- Good --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">webview</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"page.html"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">webview</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_v4fe99g">Copy</button></pre>
<h2 id="6-define-a-content-security-policy"><a href="#6-define-a-content-security-policy">6) Define a Content Security Policy</a><a class="header-link" href="#6-define-a-content-security-policy" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>A Content Security Policy (CSP) is an additional layer of protection against
cross-site-scripting attacks and data injection attacks. We recommend that they
be enabled by any website you load inside Electron.</p>
<h3 id="why-5"><a href="#why-5">Why?</a><a class="header-link" href="#why-5" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>CSP allows the server serving content to restrict and control the resources
Electron can load for that given web page. <code>https://your-page.com</code> should
be allowed to load scripts from the origins you defined while scripts from
<code>https://evil.attacker.com</code> should not be allowed to run. Defining a CSP is an
easy way to improve your applications security.</p>
<h3 id="how-5"><a href="#how-5">How?</a><a class="header-link" href="#how-5" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Electron respects <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">the <code>Content-Security-Policy</code> HTTP header</a>
and the respective <code>&lt;meta&gt;</code> tag.</p>
<p>The following CSP will allow Electron to execute scripts from the current
website and from <code>apis.mydomain.com</code>.</p>
<pre><code class="hljs language-txt" id="_2ubvr9uw"><span class="hljs-comment">// Bad</span>
Content-Security-<span class="hljs-string">Policy:</span> <span class="hljs-string">'*'</span>

<span class="hljs-comment">// Good</span>
Content-Security-<span class="hljs-string">Policy:</span> script-src <span class="hljs-string">'self'</span> <span class="hljs-string">https:</span><span class="hljs-comment">//apis.mydomain.com</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_2ubvr9uw">Copy</button></pre>
<h2 id="7-override-and-disable-eval"><a href="#7-override-and-disable-eval">7) Override and Disable <code>eval</code></a><a class="header-link" href="#7-override-and-disable-eval" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p><code>eval()</code> is a core JavaScript method that allows the execution of JavaScript
from a string. Disabling it disables your app's ability to evaluate JavaScript
that is not known in advance.</p>
<h3 id="why-6"><a href="#why-6">Why?</a><a class="header-link" href="#why-6" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The <code>eval()</code> method has precisely one mission: To evaluate a series of
characters as JavaScript and execute it. It is a required method whenever you
need to evaluate code that is not known ahead of time. While legitimate use
cases exist, just like any other code generators, <code>eval()</code> is difficult to
harden.</p>
<p>Generally speaking, it is easier to completely disable <code>eval()</code> than to make
it bulletproof. Thus, if you do not need it, it is a good idea to disable it.</p>
<h3 id="how-6"><a href="#how-6">How?</a><a class="header-link" href="#how-6" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-js" id="_qgkutt1"><span class="hljs-comment">// ESLint will warn about any use of eval(), even this one</span>
<span class="hljs-comment">// eslint-disable-next-line</span>
<span class="hljs-built_in">window</span>.eval = global.eval = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">`Sorry, this app does not support window.eval().`</span>)
}</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_qgkutt1">Copy</button></pre>
<h2 id="8-do-not-set-allowrunninginsecurecontent-to-true"><a href="#8-do-not-set-allowrunninginsecurecontent-to-true">8) Do Not Set <code>allowRunningInsecureContent</code> to <code>true</code></a><a class="header-link" href="#8-do-not-set-allowrunninginsecurecontent-to-true" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p><em>Recommendation is Electron's default</em></p>
<p>By default, Electron will now allow websites loaded over <code>HTTPS</code> to load and
execute scripts, CSS, or plugins from insecure sources (<code>HTTP</code>). Setting the
property <code>allowRunningInsecureContent</code> to <code>true</code> disables that protection.</p>
<p>Loading the initial HTML of a website over <code>HTTPS</code> and attempting to load
subsequent resources via <code>HTTP</code> is also known as "mixed content".</p>
<h3 id="why-7"><a href="#why-7">Why?</a><a class="header-link" href="#why-7" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Simply put, loading content over <code>HTTPS</code> assures the authenticity and integrity
of the loaded resources while encrypting the traffic itself. See the section on
<a href="#only-display-secure-content">only displaying secure content</a> for more details.</p>
<h3 id="how-7"><a href="#how-7">How?</a><a class="header-link" href="#how-7" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-js" id="_rtw02sw9"><span class="hljs-comment">// Bad</span>
<span class="hljs-keyword">const</span> mainWindow = <span class="hljs-keyword">new</span> BrowserWindow({
  <span class="hljs-attr">webPreferences</span>: {
    <span class="hljs-attr">allowRunningInsecureContent</span>: <span class="hljs-literal">true</span>
  }
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_rtw02sw9">Copy</button></pre>
<pre><code class="hljs language-js" id="_22is5t8"><span class="hljs-comment">// Good</span>
<span class="hljs-keyword">const</span> mainWindow = <span class="hljs-keyword">new</span> BrowserWindow({})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_22is5t8">Copy</button></pre>
<h2 id="9-do-not-enable-experimental-features"><a href="#9-do-not-enable-experimental-features">9) Do Not Enable Experimental Features</a><a class="header-link" href="#9-do-not-enable-experimental-features" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p><em>Recommendation is Electron's default</em></p>
<p>Advanced users of Electron can enable experimental Chromium features using the
<code>experimentalFeatures</code> and <code>experimentalCanvasFeatures</code> properties.</p>
<h3 id="why-8"><a href="#why-8">Why?</a><a class="header-link" href="#why-8" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Experimental features are, as the name suggests, experimental and have not been
enabled for all Chromium users. Futhermore, their impact on Electron as a whole
has likely not been tested.</p>
<p>Legitimate use cases exist, but unless you know what you are doing, you should
not enable this property.</p>
<h3 id="how-8"><a href="#how-8">How?</a><a class="header-link" href="#how-8" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-js" id="_t3as8rh"><span class="hljs-comment">// Bad</span>
<span class="hljs-keyword">const</span> mainWindow = <span class="hljs-keyword">new</span> BrowserWindow({
  <span class="hljs-attr">webPreferences</span>: {
    <span class="hljs-attr">experimentalFeatures</span>: <span class="hljs-literal">true</span>
  }
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_t3as8rh">Copy</button></pre>
<pre><code class="hljs language-js" id="_ajhwtvrk"><span class="hljs-comment">// Good</span>
<span class="hljs-keyword">const</span> mainWindow = <span class="hljs-keyword">new</span> BrowserWindow({})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_ajhwtvrk">Copy</button></pre>
<h2 id="10-do-not-use-blinkfeatures"><a href="#10-do-not-use-blinkfeatures">10) Do Not Use <code>blinkFeatures</code></a><a class="header-link" href="#10-do-not-use-blinkfeatures" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p><em>Recommendation is Electron's default</em></p>
<p>Blink is the name of the rendering engine behind Chromium. As with
<code>experimentalFeatures</code>, the <code>blinkFeatures</code> property allows developers to
enable features that have been disabled by default.</p>
<h3 id="why-9"><a href="#why-9">Why?</a><a class="header-link" href="#why-9" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Generally speaking, there are likely good reasons if a feature was not enabled
by default. Legitimate use cases for enabling specific features exist. As a
developer, you should know exactly why you need to enable a feature, what the
ramifications are, and how it impacts the security of your application. Under
no circumstances should you enable features speculatively.</p>
<h3 id="how-9"><a href="#how-9">How?</a><a class="header-link" href="#how-9" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-js" id="_fiba120c"><span class="hljs-comment">// Bad</span>
<span class="hljs-keyword">const</span> mainWindow = <span class="hljs-keyword">new</span> BrowserWindow({
  <span class="hljs-attr">webPreferences</span>: {
    <span class="hljs-attr">blinkFeatures</span>: [<span class="hljs-string">'ExecCommandInJavaScript'</span>]
  }
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_fiba120c">Copy</button></pre>
<pre><code class="hljs language-js" id="_muw0u5gn"><span class="hljs-comment">// Good</span>
<span class="hljs-keyword">const</span> mainWindow = <span class="hljs-keyword">new</span> BrowserWindow()</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_muw0u5gn">Copy</button></pre>
<h2 id="11-do-not-use-allowpopups"><a href="#11-do-not-use-allowpopups">11) Do Not Use <code>allowpopups</code></a><a class="header-link" href="#11-do-not-use-allowpopups" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p><em>Recommendation is Electron's default</em></p>
<p>If you are using <a href="https://electronjs.org/docs/tutorial/web-view"><code>WebViews</code></a>, you might need the pages and scripts
loaded in your <code>&lt;webview&gt;</code> tag to open new windows. The <code>allowpopups</code> attribute
enables them to create new <a href="https://electronjs.org/docs/tutorial/browser-window"><code>BrowserWindows</code></a> using the
<code>window.open()</code> method. <code>WebViews</code> are otherwise not allowed to create new
windows.</p>
<h3 id="why-10"><a href="#why-10">Why?</a><a class="header-link" href="#why-10" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>If you do not need popups, you are better off not allowing the creation of
new <a href="https://electronjs.org/docs/tutorial/browser-window"><code>BrowserWindows</code></a> by default. This follows the principle
of minimally required access: Don't let a website create new popups unless
you know it needs that feature.</p>
<h3 id="how-10"><a href="#how-10">How?</a><a class="header-link" href="#how-10" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-html" id="_7mthj1f5"><span class="hljs-comment">&lt;!-- Bad --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">webview</span> <span class="hljs-attr">allowpopups</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"page.html"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">webview</span>&gt;</span>

<span class="hljs-comment">&lt;!-- Good --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">webview</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"page.html"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">webview</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_7mthj1f5">Copy</button></pre>
<h2 id="12-verify-webview-options-before-creation"><a href="#12-verify-webview-options-before-creation">12) Verify WebView Options Before Creation</a><a class="header-link" href="#12-verify-webview-options-before-creation" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>A WebView created in a renderer process that does not have Node.js integration
enabled will not be able to enable integration itself. However, a WebView will
always create an independent renderer process with its own <code>webPreferences</code>.</p>
<p>It is a good idea to control the creation of new <a href="https://electronjs.org/docs/tutorial/web-view"><code>WebViews</code></a> from
the main process and to verify that their webPreferences do not disable
security features.</p>
<h3 id="why-11"><a href="#why-11">Why?</a><a class="header-link" href="#why-11" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Since WebViews live in the DOM, they can be created by a script running on your
website even if Node.js integration is otherwise disabled.</p>
<p>Electron enables developers to disable various security features that control
a renderer process. In most cases, developers do not need to disable any of
those features - and you should therefore not allow different configurations
for newly created <a href="https://electronjs.org/docs/tutorial/web-view"><code>&lt;WebView&gt;</code></a> tags.</p>
<h3 id="how-11"><a href="#how-11">How?</a><a class="header-link" href="#how-11" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Before a <a href="https://electronjs.org/docs/tutorial/web-view"><code>&lt;WebView&gt;</code></a> tag is attached, Electron will fire the
<code>will-attach-webview</code> event on the hosting <code>webContents</code>. Use the event to
prevent the creation of WebViews with possibly insecure options.</p>
<pre><code class="hljs language-js" id="_hpwz0kv">app.on(<span class="hljs-string">'web-contents-created'</span>, (event, contents) =&gt; {
  contents.on(<span class="hljs-string">'will-attach-webview'</span>, (event, webPreferences, params) =&gt; {
    <span class="hljs-comment">// Strip away preload scripts if unused or verify their location is legitimate</span>
    <span class="hljs-keyword">delete</span> webPreferences.preload
    <span class="hljs-keyword">delete</span> webPreferences.preloadURL

    <span class="hljs-comment">// Disable Node.js integration</span>
    webPreferences.nodeIntegration = <span class="hljs-literal">false</span>

    <span class="hljs-comment">// Verify URL being loaded</span>
    <span class="hljs-keyword">if</span> (!params.src.startsWith(<span class="hljs-string">'https://yourapp.com/'</span>)) {
      event.preventDefault()
    }
  })
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_hpwz0kv">Copy</button></pre>
<p>Again, this list merely minimizes the risk, it does not remove it. If your goal
is to display a website, a browser will be a more secure option.</p>

  <hr>
  <h1 id="segmentedcontrolsegment-object"><a href="#segmentedcontrolsegment-object">SegmentedControlSegment Object</a><a class="header-link" href="#segmentedcontrolsegment-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>label</code> String - (optional) The text to appear in this segment</li>
<li><code>icon</code> NativeImage - (optional) The image to appear in this segment</li>
<li><code>enabled</code> Boolean - (optional) Whether this segment is selectable. Default: true</li>
</ul>

  <hr>
  <h1 id="session"><a href="#session">session</a><a class="header-link" href="#session" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Manage browser sessions, cookies, cache, proxy settings, etc.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<p>The <code>session</code> module can be used to create new <code>Session</code> objects.</p>
<p>You can also access the <code>session</code> of existing pages by using the <code>session</code>
property of <a href="https://electronjs.org/docs/api/web-contents"><code>WebContents</code></a>, or from the <code>session</code> module.</p>
<pre><code class="hljs language-javascript" id="_rxwr4vc8"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">width</span>: <span class="hljs-number">800</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">600</span>})
win.loadURL(<span class="hljs-string">'http://github.com'</span>)

<span class="hljs-keyword">const</span> ses = win.webContents.session
<span class="hljs-built_in">console</span>.log(ses.getUserAgent())</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_rxwr4vc8">Copy</button></pre>
<h2 id="methods"><a href="#methods">Methods</a><a class="header-link" href="#methods" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>session</code> module has the following methods:</p>
<h3 id="sessionfrompartitionpartition-options"><a href="#sessionfrompartitionpartition-options"><code>session.fromPartition(partition[, options])</code></a><a class="header-link" href="#sessionfrompartitionpartition-options" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>partition</code> String</li>
<li>
<p><code>options</code> Object (optional)</p>
<ul>
<li><code>cache</code> Boolean - Whether to enable cache.</li>
</ul>
</li>
</ul>
<p>Returns <code>Session</code> - A session instance from <code>partition</code> string. When there is an existing
<code>Session</code> with the same <code>partition</code>, it will be returned; otherwise a new
<code>Session</code> instance will be created with <code>options</code>.</p>
<p>If <code>partition</code> starts with <code>persist:</code>, the page will use a persistent session
available to all pages in the app with the same <code>partition</code>. if there is no
<code>persist:</code> prefix, the page will use an in-memory session. If the <code>partition</code> is
empty then default session of the app will be returned.</p>
<p>To create a <code>Session</code> with <code>options</code>, you have to ensure the <code>Session</code> with the
<code>partition</code> has never been used before. There is no way to change the <code>options</code>
of an existing <code>Session</code> object.</p>
<h2 id="properties"><a href="#properties">Properties</a><a class="header-link" href="#properties" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>session</code> module has the following properties:</p>
<h3 id="sessiondefaultsession"><a href="#sessiondefaultsession"><code>session.defaultSession</code></a><a class="header-link" href="#sessiondefaultsession" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>A <code>Session</code> object, the default session object of the app.</p>
<h2 id="class-session"><a href="#class-session">Class: Session</a><a class="header-link" href="#class-session" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>Get and set properties of a session.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<p>You can create a <code>Session</code> object in the <code>session</code> module:</p>
<pre><code class="hljs language-javascript" id="_yvik7e6g"><span class="hljs-keyword">const</span> {session} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">const</span> ses = session.fromPartition(<span class="hljs-string">'persist:name'</span>)
<span class="hljs-built_in">console</span>.log(ses.getUserAgent())</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_yvik7e6g">Copy</button></pre>
<h3 id="instance-events"><a href="#instance-events">Instance Events</a><a class="header-link" href="#instance-events" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The following events are available on instances of <code>Session</code>:</p>
<h4 id="event-will-download"><a href="#event-will-download">Event: 'will-download'</a><a class="header-link" href="#event-will-download" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>event</code> Event</li>
<li><code>item</code> <a href="https://electronjs.org/docs/api/download-item">DownloadItem</a></li>
<li><code>webContents</code> <a href="https://electronjs.org/docs/api/web-contents">WebContents</a></li>
</ul>
<p>Emitted when Electron is about to download <code>item</code> in <code>webContents</code>.</p>
<p>Calling <code>event.preventDefault()</code> will cancel the download and <code>item</code> will not be
available from next tick of the process.</p>
<pre><code class="hljs language-javascript" id="_kp8f0eal"><span class="hljs-keyword">const</span> {session} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
session.defaultSession.on(<span class="hljs-string">'will-download'</span>, (event, item, webContents) =&gt; {
  event.preventDefault()
  <span class="hljs-built_in">require</span>(<span class="hljs-string">'request'</span>)(item.getURL(), (data) =&gt; {
    <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>).writeFileSync(<span class="hljs-string">'/somewhere'</span>, data)
  })
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_kp8f0eal">Copy</button></pre>
<h3 id="instance-methods"><a href="#instance-methods">Instance Methods</a><a class="header-link" href="#instance-methods" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The following methods are available on instances of <code>Session</code>:</p>
<h4 id="sesgetcachesizecallback"><a href="#sesgetcachesizecallback"><code>ses.getCacheSize(callback)</code></a><a class="header-link" href="#sesgetcachesizecallback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>size</code> Integer - Cache size used in bytes.</li>
</ul>
</li>
</ul>
<p>Callback is invoked with the session's current cache size.</p>
<h4 id="sesclearcachecallback"><a href="#sesclearcachecallback"><code>ses.clearCache(callback)</code></a><a class="header-link" href="#sesclearcachecallback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>callback</code> Function - Called when operation is done</li>
</ul>
<p>Clears the session’s HTTP cache.</p>
<h4 id="sesclearstoragedataoptions-callback"><a href="#sesclearstoragedataoptions-callback"><code>ses.clearStorageData([options, callback])</code></a><a class="header-link" href="#sesclearstoragedataoptions-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>options</code> Object (optional)</p>
<ul>
<li><code>origin</code> String - (optional) Should follow <code>window.location.origin</code>’s representation
<code>scheme://host:port</code>.</li>
<li><code>storages</code> String[] - (optional) The types of storages to clear, can contain:
<code>appcache</code>, <code>cookies</code>, <code>filesystem</code>, <code>indexdb</code>, <code>localstorage</code>,
<code>shadercache</code>, <code>websql</code>, <code>serviceworkers</code></li>
<li><code>quotas</code> String[] - (optional) The types of quotas to clear, can contain:
<code>temporary</code>, <code>persistent</code>, <code>syncable</code>.</li>
</ul>
</li>
<li><code>callback</code> Function (optional) - Called when operation is done.</li>
</ul>
<p>Clears the data of web storages.</p>
<h4 id="sesflushstoragedata"><a href="#sesflushstoragedata"><code>ses.flushStorageData()</code></a><a class="header-link" href="#sesflushstoragedata" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Writes any unwritten DOMStorage data to disk.</p>
<h4 id="sessetproxyconfig-callback"><a href="#sessetproxyconfig-callback"><code>ses.setProxy(config, callback)</code></a><a class="header-link" href="#sessetproxyconfig-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>config</code> Object</p>
<ul>
<li><code>pacScript</code> String - The URL associated with the PAC file.</li>
<li><code>proxyRules</code> String - Rules indicating which proxies to use.</li>
<li><code>proxyBypassRules</code> String - Rules indicating which URLs should
bypass the proxy settings.</li>
</ul>
</li>
<li><code>callback</code> Function - Called when operation is done.</li>
</ul>
<p>Sets the proxy settings.</p>
<p>When <code>pacScript</code> and <code>proxyRules</code> are provided together, the <code>proxyRules</code>
option is ignored and <code>pacScript</code> configuration is applied.</p>
<p>The <code>proxyRules</code> has to follow the rules below:</p>
<pre><code class="hljs language-sh" id="_vtu8n89g">proxyRules = schemeProxies[<span class="hljs-string">";"</span>&lt;schemeProxies&gt;]
schemeProxies = [&lt;urlScheme&gt;<span class="hljs-string">"="</span>]&lt;proxyURIList&gt;
urlScheme = <span class="hljs-string">"http"</span> | <span class="hljs-string">"https"</span> | <span class="hljs-string">"ftp"</span> | <span class="hljs-string">"socks"</span>
proxyURIList = &lt;proxyURL&gt;[<span class="hljs-string">","</span>&lt;proxyURIList&gt;]
proxyURL = [&lt;proxyScheme&gt;<span class="hljs-string">"://"</span>]&lt;proxyHost&gt;[<span class="hljs-string">":"</span>&lt;proxyPort&gt;]</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_vtu8n89g">Copy</button></pre>
<p>For example:</p>
<ul>
<li><code>http=foopy:80;ftp=foopy2</code> - Use HTTP proxy <code>foopy:80</code> for <code>http://</code> URLs, and
HTTP proxy <code>foopy2:80</code> for <code>ftp://</code> URLs.</li>
<li><code>foopy:80</code> - Use HTTP proxy <code>foopy:80</code> for all URLs.</li>
<li><code>foopy:80,bar,direct://</code> - Use HTTP proxy <code>foopy:80</code> for all URLs, failing
over to <code>bar</code> if <code>foopy:80</code> is unavailable, and after that using no proxy.</li>
<li><code>socks4://foopy</code> - Use SOCKS v4 proxy <code>foopy:1080</code> for all URLs.</li>
<li><code>http=foopy,socks5://bar.com</code> - Use HTTP proxy <code>foopy</code> for http URLs, and fail
over to the SOCKS5 proxy <code>bar.com</code> if <code>foopy</code> is unavailable.</li>
<li><code>http=foopy,direct://</code> - Use HTTP proxy <code>foopy</code> for http URLs, and use no
proxy if <code>foopy</code> is unavailable.</li>
<li><code>http=foopy;socks=foopy2</code> -  Use HTTP proxy <code>foopy</code> for http URLs, and use
<code>socks4://foopy2</code> for all other URLs.</li>
</ul>
<p>The <code>proxyBypassRules</code> is a comma separated list of rules described below:</p>
<ul>
<li>
<p><code>[ URL_SCHEME "://" ] HOSTNAME_PATTERN [ ":" &lt;port&gt; ]</code></p>
<p> Match all hostnames that match the pattern HOSTNAME_PATTERN.</p>
<p> Examples:
"foobar.com", "<em>foobar.com", "</em>.foobar.com", "<em>foobar.com:99",
"<a href="https://x/">x</a>.</em>.y.com:99"</p>
</li>
<li>
<p><code>"." HOSTNAME_SUFFIX_PATTERN [ ":" PORT ]</code></p>
<p>Match a particular domain suffix.</p>
<p>Examples:
".google.com", ".com", "<a href="http://.google.com/">.google.com</a>"</p>
</li>
<li>
<p><code>[ SCHEME "://" ] IP_LITERAL [ ":" PORT ]</code></p>
<p> Match URLs which are IP address literals.</p>
<p> Examples:
"127.0.1", "[0:0::1]", "[::1]", "<a href="http://%5B::1%5D:99">[::1]:99</a>"</p>
</li>
<li>
<p><code>IP_LITERAL "/" PREFIX_LENGHT_IN_BITS</code></p>
<p>Match any URL that is to an IP literal that falls between the
given range. IP range is specified using CIDR notation.</p>
<p>Examples:
"192.168.1.1/16", "fefe:13::abc/33".</p>
</li>
<li>
<p><code>&lt;local&gt;</code></p>
<p>Match local addresses. The meaning of <code>&lt;local&gt;</code> is whether the
host matches one of: "127.0.0.1", "::1", "localhost".</p>
</li>
</ul>
<h4 id="sesresolveproxyurl-callback"><a href="#sesresolveproxyurl-callback"><code>ses.resolveProxy(url, callback)</code></a><a class="header-link" href="#sesresolveproxyurl-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>url</code> URL</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>proxy</code> String</li>
</ul>
</li>
</ul>
<p>Resolves the proxy information for <code>url</code>. The <code>callback</code> will be called with
<code>callback(proxy)</code> when the request is performed.</p>
<h4 id="sessetdownloadpathpath"><a href="#sessetdownloadpathpath"><code>ses.setDownloadPath(path)</code></a><a class="header-link" href="#sessetdownloadpathpath" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>path</code> String - The download location</li>
</ul>
<p>Sets download saving directory. By default, the download directory will be the
<code>Downloads</code> under the respective app folder.</p>
<h4 id="sesenablenetworkemulationoptions"><a href="#sesenablenetworkemulationoptions"><code>ses.enableNetworkEmulation(options)</code></a><a class="header-link" href="#sesenablenetworkemulationoptions" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>offline</code> Boolean (optional) - Whether to emulate network outage. Defaults
to false.</li>
<li><code>latency</code> Double (optional) - RTT in ms. Defaults to 0 which will disable
latency throttling.</li>
<li><code>downloadThroughput</code> Double (optional) - Download rate in Bps. Defaults to 0
which will disable download throttling.</li>
<li><code>uploadThroughput</code> Double (optional) - Upload rate in Bps. Defaults to 0
which will disable upload throttling.</li>
</ul>
</li>
</ul>
<p>Emulates network with the given configuration for the <code>session</code>.</p>
<pre><code class="hljs language-javascript" id="_qcgz9vec"><span class="hljs-comment">// To emulate a GPRS connection with 50kbps throughput and 500 ms latency.</span>
<span class="hljs-built_in">window</span>.webContents.session.enableNetworkEmulation({
  <span class="hljs-attr">latency</span>: <span class="hljs-number">500</span>,
  <span class="hljs-attr">downloadThroughput</span>: <span class="hljs-number">6400</span>,
  <span class="hljs-attr">uploadThroughput</span>: <span class="hljs-number">6400</span>
})

<span class="hljs-comment">// To emulate a network outage.</span>
<span class="hljs-built_in">window</span>.webContents.session.enableNetworkEmulation({<span class="hljs-attr">offline</span>: <span class="hljs-literal">true</span>})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_qcgz9vec">Copy</button></pre>
<h4 id="sesdisablenetworkemulation"><a href="#sesdisablenetworkemulation"><code>ses.disableNetworkEmulation()</code></a><a class="header-link" href="#sesdisablenetworkemulation" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Disables any network emulation already active for the <code>session</code>. Resets to
the original network configuration.</p>
<h4 id="sessetcertificateverifyprocproc"><a href="#sessetcertificateverifyprocproc"><code>ses.setCertificateVerifyProc(proc)</code></a><a class="header-link" href="#sessetcertificateverifyprocproc" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>proc</code> Function</p>
<ul>
<li>
<p><code>request</code> Object</p>
<ul>
<li><code>hostname</code> String</li>
<li><code>certificate</code> <a href="https://electronjs.org/docs/api/structures/certificate">Certificate</a></li>
<li><code>verificationResult</code> String - Verification result from chromium.</li>
<li><code>errorCode</code> Integer - Error code.</li>
</ul>
</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li>
<p><code>verificationResult</code> Integer - Value can be one of certificate error codes
from <a href="https://code.google.com/p/chromium/codesearch#chromium/src/net/base/net_error_list.h">here</a>.
Apart from the certificate error codes, the following special codes can be used.</p>
<ul>
<li><code>0</code> - Indicates success and disables Certificate Transparency verification.</li>
<li><code>-2</code> - Indicates failure.</li>
<li><code>-3</code> - Uses the verification result from chromium.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Sets the certificate verify proc for <code>session</code>, the <code>proc</code> will be called with
<code>proc(request, callback)</code> whenever a server certificate
verification is requested. Calling <code>callback(0)</code> accepts the certificate,
calling <code>callback(-2)</code> rejects it.</p>
<p>Calling <code>setCertificateVerifyProc(null)</code> will revert back to default certificate
verify proc.</p>
<pre><code class="hljs language-javascript" id="_7adipjcv"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow()

win.webContents.session.setCertificateVerifyProc(<span class="hljs-function">(<span class="hljs-params">request, callback</span>) =&gt;</span> {
  <span class="hljs-keyword">const</span> {hostname} = request
  <span class="hljs-keyword">if</span> (hostname === <span class="hljs-string">'github.com'</span>) {
    callback(<span class="hljs-number">0</span>)
  } <span class="hljs-keyword">else</span> {
    callback(<span class="hljs-number">-2</span>)
  }
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_7adipjcv">Copy</button></pre>
<h4 id="sessetpermissionrequesthandlerhandler"><a href="#sessetpermissionrequesthandlerhandler"><code>ses.setPermissionRequestHandler(handler)</code></a><a class="header-link" href="#sessetpermissionrequesthandlerhandler" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>handler</code> Function | null</p>
<ul>
<li><code>webContents</code> <a href="https://electronjs.org/docs/api/web-contents">WebContents</a> - WebContents requesting the permission.</li>
<li><code>permission</code> String - Enum of 'media', 'geolocation', 'notifications', 'midiSysex',
'pointerLock', 'fullscreen', 'openExternal'.</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>permissionGranted</code> Boolean - Allow or deny the permission</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Sets the handler which can be used to respond to permission requests for the <code>session</code>.
Calling <code>callback(true)</code> will allow the permission and <code>callback(false)</code> will reject it.
To clear the handler, call <code>setPermissionRequestHandler(null)</code>.</p>
<pre><code class="hljs language-javascript" id="_h8yo3iwf"><span class="hljs-keyword">const</span> {session} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
session.fromPartition(<span class="hljs-string">'some-partition'</span>).setPermissionRequestHandler(<span class="hljs-function">(<span class="hljs-params">webContents, permission, callback</span>) =&gt;</span> {
  <span class="hljs-keyword">if</span> (webContents.getURL() === <span class="hljs-string">'some-host'</span> &amp;&amp; permission === <span class="hljs-string">'notifications'</span>) {
    <span class="hljs-keyword">return</span> callback(<span class="hljs-literal">false</span>) <span class="hljs-comment">// denied.</span>
  }

  callback(<span class="hljs-literal">true</span>)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_h8yo3iwf">Copy</button></pre>
<h4 id="sesclearhostresolvercachecallback"><a href="#sesclearhostresolvercachecallback"><code>ses.clearHostResolverCache([callback])</code></a><a class="header-link" href="#sesclearhostresolvercachecallback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>callback</code> Function (optional) - Called when operation is done.</li>
</ul>
<p>Clears the host resolver cache.</p>
<h4 id="sesallowntlmcredentialsfordomainsdomains"><a href="#sesallowntlmcredentialsfordomainsdomains"><code>ses.allowNTLMCredentialsForDomains(domains)</code></a><a class="header-link" href="#sesallowntlmcredentialsfordomainsdomains" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>domains</code> String - A comma-seperated list of servers for which
integrated authentication is enabled.</li>
</ul>
<p>Dynamically sets whether to always send credentials for HTTP NTLM or Negotiate
authentication.</p>
<pre><code class="hljs language-javascript" id="_o7gxivz"><span class="hljs-keyword">const</span> {session} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-comment">// consider any url ending with `example.com`, `foobar.com`, `baz`</span>
<span class="hljs-comment">// for integrated authentication.</span>
session.defaultSession.allowNTLMCredentialsForDomains(<span class="hljs-string">'*example.com, *foobar.com, *baz'</span>)

<span class="hljs-comment">// consider all urls for integrated authentication.</span>
session.defaultSession.allowNTLMCredentialsForDomains(<span class="hljs-string">'*'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_o7gxivz">Copy</button></pre>
<h4 id="sessetuseragentuseragent-acceptlanguages"><a href="#sessetuseragentuseragent-acceptlanguages"><code>ses.setUserAgent(userAgent[, acceptLanguages])</code></a><a class="header-link" href="#sessetuseragentuseragent-acceptlanguages" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>userAgent</code> String</li>
<li><code>acceptLanguages</code> String (optional)</li>
</ul>
<p>Overrides the <code>userAgent</code> and <code>acceptLanguages</code> for this session.</p>
<p>The <code>acceptLanguages</code> must a comma separated ordered list of language codes, for
example <code>"en-US,fr,de,ko,zh-CN,ja"</code>.</p>
<p>This doesn't affect existing <code>WebContents</code>, and each <code>WebContents</code> can use
<code>webContents.setUserAgent</code> to override the session-wide user agent.</p>
<h4 id="sesgetuseragent"><a href="#sesgetuseragent"><code>ses.getUserAgent()</code></a><a class="header-link" href="#sesgetuseragent" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>String</code> - The user agent for this session.</p>
<h4 id="sesgetblobdataidentifier-callback"><a href="#sesgetblobdataidentifier-callback"><code>ses.getBlobData(identifier, callback)</code></a><a class="header-link" href="#sesgetblobdataidentifier-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>identifier</code> String - Valid UUID.</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>result</code> Buffer - Blob data.</li>
</ul>
</li>
</ul>
<p>Returns <code>Blob</code> - The blob data associated with the <code>identifier</code>.</p>
<h4 id="sescreateinterrupteddownloadoptions"><a href="#sescreateinterrupteddownloadoptions"><code>ses.createInterruptedDownload(options)</code></a><a class="header-link" href="#sescreateinterrupteddownloadoptions" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>path</code> String - Absolute path of the download.</li>
<li><code>urlChain</code> String[] - Complete URL chain for the download.</li>
<li><code>mimeType</code> String (optional)</li>
<li><code>offset</code> Integer - Start range for the download.</li>
<li><code>length</code> Integer - Total length of the download.</li>
<li><code>lastModified</code> String - Last-Modified header value.</li>
<li><code>eTag</code> String - ETag header value.</li>
<li><code>startTime</code> Double (optional) - Time when download was started in
number of seconds since UNIX epoch.</li>
</ul>
</li>
</ul>
<p>Allows resuming <code>cancelled</code> or <code>interrupted</code> downloads from previous <code>Session</code>.
The API will generate a <a href="https://electronjs.org/docs/api/download-item">DownloadItem</a> that can be accessed with the <a href="#event-will-download">will-download</a>
event. The <a href="https://electronjs.org/docs/api/download-item">DownloadItem</a> will not have any <code>WebContents</code> associated with it and
the initial state will be <code>interrupted</code>. The download will start only when the
<code>resume</code> API is called on the <a href="https://electronjs.org/docs/api/download-item">DownloadItem</a>.</p>
<h4 id="sesclearauthcacheoptions-callback"><a href="#sesclearauthcacheoptions-callback"><code>ses.clearAuthCache(options[, callback])</code></a><a class="header-link" href="#sesclearauthcacheoptions-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>options</code> (<a href="https://electronjs.org/docs/api/structures/remove-password">RemovePassword</a> | <a href="https://electronjs.org/docs/api/structures/remove-client-certificate">RemoveClientCertificate</a>)</li>
<li><code>callback</code> Function (optional) - Called when operation is done</li>
</ul>
<p>Clears the session’s HTTP authentication cache.</p>
<h3 id="instance-properties"><a href="#instance-properties">Instance Properties</a><a class="header-link" href="#instance-properties" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The following properties are available on instances of <code>Session</code>:</p>
<h4 id="sescookies"><a href="#sescookies"><code>ses.cookies</code></a><a class="header-link" href="#sescookies" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <a href="https://electronjs.org/docs/api/cookies">Cookies</a> object for this session.</p>
<h4 id="seswebrequest"><a href="#seswebrequest"><code>ses.webRequest</code></a><a class="header-link" href="#seswebrequest" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <a href="https://electronjs.org/docs/api/web-request">WebRequest</a> object for this session.</p>
<h4 id="sesprotocol"><a href="#sesprotocol"><code>ses.protocol</code></a><a class="header-link" href="#sesprotocol" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <a href="https://electronjs.org/docs/api/protocol">Protocol</a> object for this session.</p>
<pre><code class="hljs language-javascript" id="_4iwvd09v"><span class="hljs-keyword">const</span> {app, session} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>)

app.on(<span class="hljs-string">'ready'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> protocol = session.fromPartition(<span class="hljs-string">'some-partition'</span>).protocol
  protocol.registerFileProtocol(<span class="hljs-string">'atom'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">request, callback</span>) </span>{
    <span class="hljs-keyword">var</span> url = request.url.substr(<span class="hljs-number">7</span>)
    callback({<span class="hljs-attr">path</span>: path.normalize(<span class="hljs-string">`<span class="hljs-subst">${__dirname}</span>/<span class="hljs-subst">${url}</span>`</span>)})
  }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>{
    <span class="hljs-keyword">if</span> (error) <span class="hljs-built_in">console</span>.error(<span class="hljs-string">'Failed to register protocol'</span>)
  })
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_4iwvd09v">Copy</button></pre>

  <hr>
  <h1 id="setting-up-symbol-server-in-debugger"><a href="#setting-up-symbol-server-in-debugger">Setting Up Symbol Server in Debugger</a><a class="header-link" href="#setting-up-symbol-server-in-debugger" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>Debug symbols allow you to have better debugging sessions. They have information
about the functions contained in executables and dynamic libraries and provide
you with information to get clean call stacks. A Symbol Server allows the
debugger to load the correct symbols, binaries and sources automatically without
forcing users to download large debugging files. The server functions like
<a href="https://support.microsoft.com/kb/311503">Microsoft's symbol server</a> so the
documentation there can be useful.</p>
<p>Note that because released Electron builds are heavily optimized, debugging is
not always easy. The debugger will not be able to show you the content of all
variables and the execution path can seem strange because of inlining, tail
calls, and other compiler optimizations. The only workaround is to build an
unoptimized local build.</p>
<p>The official symbol server URL for Electron is
<a href="https://electron-symbols.githubapp.com/">electron-symbols.githubapp.com</a>.
You cannot visit this URL directly, you must add it to the symbol path of your
debugging tool. In the examples below, a local cache directory is used to avoid
repeatedly fetching the PDB from the server. Replace <code>c:\code\symbols</code> with an
appropriate cache directory on your machine.</p>
<h2 id="using-the-symbol-server-in-windbg"><a href="#using-the-symbol-server-in-windbg">Using the Symbol Server in Windbg</a><a class="header-link" href="#using-the-symbol-server-in-windbg" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The Windbg symbol path is configured with a string value delimited with asterisk
characters. To use only the Electron symbol server, add the following entry to
your symbol path (<strong>Note:</strong> you can replace <code>c:\code\symbols</code> with any writable
directory on your computer, if you'd prefer a different location for downloaded
symbols):</p>
<pre><code class="hljs language-powershell" id="_qx3yneu">SRV*c:\code\symbols\*https://electron-symbols.githubapp.com</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_qx3yneu">Copy</button></pre>
<p>Set this string as <code>_NT_SYMBOL_PATH</code> in the environment, using the Windbg menus,
or by typing the <code>.sympath</code> command. If you would like to get symbols from
Microsoft's symbol server as well, you should list that first:</p>
<pre><code class="hljs language-powershell" id="_xf1t761n">SRV*c:\code\symbols\*https://msdl.microsoft.com/download/symbols;SRV*c:\code\symbols\*https://electron-symbols.githubapp.com</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_xf1t761n">Copy</button></pre>
<h2 id="using-the-symbol-server-in-visual-studio"><a href="#using-the-symbol-server-in-visual-studio">Using the symbol server in Visual Studio</a><a class="header-link" href="#using-the-symbol-server-in-visual-studio" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<img src="All%20the%20Electron%20Docs!%20%20%20Electron_files/symbol-server-vc8express-menu.jpg">
<img src="All%20the%20Electron%20Docs!%20%20%20Electron_files/2005_options.gif">
<h2 id="troubleshooting-symbols-will-not-load"><a href="#troubleshooting-symbols-will-not-load">Troubleshooting: Symbols will not load</a><a class="header-link" href="#troubleshooting-symbols-will-not-load" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Type the following commands in Windbg to print why symbols are not loading:</p>
<pre><code class="hljs language-powershell" id="_n6jmo439">&gt; !sym noisy
&gt; .reload /f electron.exe</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_n6jmo439">Copy</button></pre>

  <hr>
  <h1 id="shell"><a href="#shell">shell</a><a class="header-link" href="#shell" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Manage files and URLs using their default applications.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a>, <a href="https://electronjs.org/docs/glossary#renderer-process">Renderer</a></p>
<p>The <code>shell</code> module provides functions related to desktop integration.</p>
<p>An example of opening a URL in the user's default browser:</p>
<pre><code class="hljs language-javascript" id="_bsz44w4"><span class="hljs-keyword">const</span> {shell} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

shell.openExternal(<span class="hljs-string">'https://github.com'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_bsz44w4">Copy</button></pre>
<h2 id="methods"><a href="#methods">Methods</a><a class="header-link" href="#methods" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>shell</code> module has the following methods:</p>
<h3 id="shellshowiteminfolderfullpath"><a href="#shellshowiteminfolderfullpath"><code>shell.showItemInFolder(fullPath)</code></a><a class="header-link" href="#shellshowiteminfolderfullpath" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>fullPath</code> String</li>
</ul>
<p>Returns <code>Boolean</code> - Whether the item was successfully shown</p>
<p>Show the given file in a file manager. If possible, select the file.</p>
<h3 id="shellopenitemfullpath"><a href="#shellopenitemfullpath"><code>shell.openItem(fullPath)</code></a><a class="header-link" href="#shellopenitemfullpath" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>fullPath</code> String</li>
</ul>
<p>Returns <code>Boolean</code> - Whether the item was successfully opened.</p>
<p>Open the given file in the desktop's default manner.</p>
<h3 id="shellopenexternalurl-options-callback"><a href="#shellopenexternalurl-options-callback"><code>shell.openExternal(url[, options, callback])</code></a><a class="header-link" href="#shellopenexternalurl-options-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>url</code> String - max 2081 characters on windows, or the function returns false</li>
<li>
<p><code>options</code> Object (optional) <em class="platform-label">macOS</em></p>
<ul>
<li><code>activate</code> Boolean - <code>true</code> to bring the opened application to the
foreground. The default is <code>true</code>.</li>
</ul>
</li>
<li>
<p><code>callback</code> Function (optional) - If specified will perform the open asynchronously. <em class="platform-label">macOS</em></p>
<ul>
<li><code>error</code> Error</li>
</ul>
</li>
</ul>
<p>Returns <code>Boolean</code> - Whether an application was available to open the URL.
If callback is specified, always returns true.</p>
<p>Open the given external protocol URL in the desktop's default manner. (For
example, mailto: URLs in the user's default mail agent).</p>
<h3 id="shellmoveitemtotrashfullpath"><a href="#shellmoveitemtotrashfullpath"><code>shell.moveItemToTrash(fullPath)</code></a><a class="header-link" href="#shellmoveitemtotrashfullpath" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>fullPath</code> String</li>
</ul>
<p>Returns <code>Boolean</code> - Whether the item was successfully moved to the trash</p>
<p>Move the given file to trash and returns a boolean status for the operation.</p>
<h3 id="shellbeep"><a href="#shellbeep"><code>shell.beep()</code></a><a class="header-link" href="#shellbeep" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Play the beep sound.</p>
<h3 id="shellwriteshortcutlinkshortcutpath-operation-options-windows"><a href="#shellwriteshortcutlinkshortcutpath-operation-options-windows"><code>shell.writeShortcutLink(shortcutPath[, operation], options)</code> <em class="platform-label">Windows</em></a><a class="header-link" href="#shellwriteshortcutlinkshortcutpath-operation-options-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>shortcutPath</code> String</li>
<li>
<p><code>operation</code> String (optional) - Default is <code>create</code>, can be one of following:</p>
<ul>
<li><code>create</code> - Creates a new shortcut, overwriting if necessary.</li>
<li><code>update</code> - Updates specified properties only on an existing shortcut.</li>
<li><code>replace</code> - Overwrites an existing shortcut, fails if the shortcut doesn't
exist.</li>
</ul>
</li>
<li><code>options</code> <a href="https://electronjs.org/docs/api/structures/shortcut-details">ShortcutDetails</a></li>
</ul>
<p>Returns <code>Boolean</code> - Whether the shortcut was created successfully</p>
<p>Creates or updates a shortcut link at <code>shortcutPath</code>.</p>
<h3 id="shellreadshortcutlinkshortcutpath-windows"><a href="#shellreadshortcutlinkshortcutpath-windows"><code>shell.readShortcutLink(shortcutPath)</code> <em class="platform-label">Windows</em></a><a class="header-link" href="#shellreadshortcutlinkshortcutpath-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>shortcutPath</code> String</li>
</ul>
<p>Returns <a href="https://electronjs.org/docs/api/structures/shortcut-details"><code>ShortcutDetails</code></a></p>
<p>Resolves the shortcut link at <code>shortcutPath</code>.</p>
<p>An exception will be thrown when any error happens.</p>

  <hr>
  <h1 id="shortcutdetails-object"><a href="#shortcutdetails-object">ShortcutDetails Object</a><a class="header-link" href="#shortcutdetails-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>target</code> String - The target to launch from this shortcut.</li>
<li><code>cwd</code> String (optional) - The working directory. Default is empty.</li>
<li><code>args</code> String (optional) - The arguments to be applied to <code>target</code> when
launching from this shortcut. Default is empty.</li>
<li><code>description</code> String (optional) - The description of the shortcut. Default
is empty.</li>
<li><code>icon</code> String (optional) - The path to the icon, can be a DLL or EXE. <code>icon</code>
and <code>iconIndex</code> have to be set together. Default is empty, which uses the
target's icon.</li>
<li><code>iconIndex</code> Number (optional) - The resource ID of icon when <code>icon</code> is a
DLL or EXE. Default is 0.</li>
<li><code>appUserModelId</code> String (optional) - The Application User Model ID. Default
is empty.</li>
</ul>

  <hr>
  <h1 id="size-object"><a href="#size-object">Size Object</a><a class="header-link" href="#size-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>width</code> Number</li>
<li><code>height</code> Number</li>
</ul>

  <hr>
  <h1 id="snapcraft-guide-ubuntu-software-center--more"><a href="#snapcraft-guide-ubuntu-software-center--more">Snapcraft Guide (Ubuntu Software Center &amp; More)</a><a class="header-link" href="#snapcraft-guide-ubuntu-software-center--more" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>This guide provides information on how to package your Electron application
for any Snapcraft environment, including the Ubuntu Software Center.</p>
<h2 id="background-and-requirements"><a href="#background-and-requirements">Background and Requirements</a><a class="header-link" href="#background-and-requirements" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Together with the broader Linux community, Canonical aims to fix many of the
common software installation problems with the <a href="https://snapcraft.io/"><code>snapcraft</code></a>
project. Snaps are containerized software packages that include required
dependencies, auto-update, and work on all major Linux distributions without
system modification.</p>
<p>There are three ways to create a <code>.snap</code> file:</p>
<p>1) Using <a href="https://github.com/electron-userland/electron-forge"><code>electron-forge</code></a> or
<a href="https://github.com/electron-userland/electron-builder"><code>electron-builder</code></a>, both tools that come with <code>snap</code>
support out of the box. This is the easiest option.
2) Using <code>electron-installer-snap</code>, which takes <code>electron-packager</code>'s output.
3) Using an already created <code>.deb</code> package.</p>
<p>In all cases, you will need to have the <code>snapcraft</code> tool installed. We
recommend building on Ubuntu 16.04 (or the current LTS).</p>
<pre><code class="hljs language-sh" id="_su7dgxbm">snap install snapcraft --classic</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_su7dgxbm">Copy</button></pre>
<p>While it <em>is possible</em> to install <code>snapcraft</code> on macOS using Homebrew, it
is not able to build <code>snap</code> packages and is focused on managing packages
in the store.</p>
<h2 id="using-electron-installer-snap"><a href="#using-electron-installer-snap">Using <code>electron-installer-snap</code></a><a class="header-link" href="#using-electron-installer-snap" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The module works like <a href="https://github.com/electron/windows-installer"><code>electron-winstaller</code></a> and similar
modules in that its scope is limited to building snap packages. You can install
it with:</p>
<pre><code class="hljs language-sh" id="_34ima27n">npm install --save-dev electron-installer-snap</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_34ima27n">Copy</button></pre>
<h3 id="step-1-package-your-electron-application"><a href="#step-1-package-your-electron-application">Step 1: Package Your Electron Application</a><a class="header-link" href="#step-1-package-your-electron-application" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Package the application using <a href="https://github.com/electron-userland/electron-packager">electron-packager</a> (or a
similar tool). Make sure to remove <code>node_modules</code> that you don't need in your
final application, since any module you don't actually need will just increase
your application's size.</p>
<p>The output should look roughly like this:</p>
<pre><code class="hljs language-text" id="_gto4ykrf">.
└── dist
    └── app-linux-x64
        ├── LICENSE
        ├── LICENSES<span class="hljs-selector-class">.chromium</span><span class="hljs-selector-class">.html</span>
        ├── content_shell<span class="hljs-selector-class">.pak</span>
        ├── app
        ├── icudtl<span class="hljs-selector-class">.dat</span>
        ├── libgcrypt<span class="hljs-selector-class">.so</span>.<span class="hljs-number">11</span>
        ├── libnode<span class="hljs-selector-class">.so</span>
        ├── locales
        ├── natives_blob<span class="hljs-selector-class">.bin</span>
        ├── resources
        ├── snapshot_blob<span class="hljs-selector-class">.bin</span>
        └── version</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_gto4ykrf">Copy</button></pre>
<h3 id="step-2-running-electron-installer-snap"><a href="#step-2-running-electron-installer-snap">Step 2: Running <code>electron-installer-snap</code></a><a class="header-link" href="#step-2-running-electron-installer-snap" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>From a terminal that has <code>snapcraft</code> in its <code>PATH</code>, run <code>electron-installer-snap</code>
with the only required parameter <code>--src</code>, which is the location of your packaged
Electron application created in the first step.</p>
<pre><code class="hljs language-sh" id="_mdfylgx">npx electron-installer-snap --src=out/myappname-linux-x64</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_mdfylgx">Copy</button></pre>
<p>If you have an existing build pipeline, you can use <code>electron-installer-snap</code>
programmatically. For more information, see the <a href="https://docs.snapcraft.io/build-snaps/syntax">Snapcraft API docs</a>.</p>
<pre><code class="hljs language-js" id="_cycf2mrc"><span class="hljs-keyword">const</span> snap = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron-installer-snap'</span>)

snap(options)
  .then(<span class="hljs-function"><span class="hljs-params">snapPath</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Created snap at <span class="hljs-subst">${snapPath}</span>!`</span>))</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_cycf2mrc">Copy</button></pre>
<h2 id="using-an-existing-debian-package"><a href="#using-an-existing-debian-package">Using an Existing Debian Package</a><a class="header-link" href="#using-an-existing-debian-package" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Snapcraft is capable of taking an existing <code>.deb</code> file and turning it into
a <code>.snap</code> file. The creation of a snap is configured using a <code>snapcraft.yaml</code>
file that describes the sources, dependencies, description, and other core
building blocks.</p>
<h3 id="step-1-create-a-debian-package"><a href="#step-1-create-a-debian-package">Step 1: Create a Debian Package</a><a class="header-link" href="#step-1-create-a-debian-package" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>If you do not already have a <code>.deb</code> package, using <code>electron-installer-snap</code>
might be an easier path to create snap packages. However, multiple solutions
for creating Debian packages exist, including <a href="https://github.com/electron-userland/electron-forge"><code>electron-forge</code></a>,
<a href="https://github.com/electron-userland/electron-builder"><code>electron-builder</code></a> or
<a href="https://github.com/unindented/electron-installer-debian"><code>electron-installer-debian</code></a>.</p>
<h3 id="step-2-create-a-snapcraftyaml"><a href="#step-2-create-a-snapcraftyaml">Step 2: Create a snapcraft.yaml</a><a class="header-link" href="#step-2-create-a-snapcraftyaml" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>For more information on the available configuration options, see the
<a href="https://docs.snapcraft.io/build-snaps/syntax">documentation on the snapcraft syntax</a>.
Let's look at an example:</p>
<pre><code class="hljs language-yaml" id="_anef082j"><span class="hljs-attr">name:</span> <span class="hljs-string">myApp</span>
<span class="hljs-attr">version:</span> <span class="hljs-number">2.0</span><span class="hljs-number">.0</span>
<span class="hljs-attr">summary:</span> <span class="hljs-string">A</span> <span class="hljs-string">little</span> <span class="hljs-string">description</span> <span class="hljs-string">for</span> <span class="hljs-string">the</span> <span class="hljs-string">app.</span>
<span class="hljs-attr">description:</span> <span class="hljs-string">|
 You know what? This app is amazing! It does all the things
 for you. Some say it keeps you young, maybe even happy.

</span><span class="hljs-attr">grade:</span> <span class="hljs-string">stable</span>
<span class="hljs-attr">confinement:</span> <span class="hljs-string">classic</span>

<span class="hljs-attr">parts:</span>
<span class="hljs-attr">  slack:</span>
<span class="hljs-attr">    plugin:</span> <span class="hljs-string">dump</span>
<span class="hljs-attr">    source:</span> <span class="hljs-string">my-deb.deb</span>
<span class="hljs-attr">    source-type:</span> <span class="hljs-string">deb</span>
<span class="hljs-attr">    after:</span>
<span class="hljs-bullet">      -</span> <span class="hljs-string">desktop-gtk2</span>
<span class="hljs-attr">    stage-packages:</span>
<span class="hljs-bullet">      -</span> <span class="hljs-string">libasound2</span>
<span class="hljs-bullet">      -</span> <span class="hljs-string">libgconf2-4</span>
<span class="hljs-bullet">      -</span> <span class="hljs-string">libnotify4</span>
<span class="hljs-bullet">      -</span> <span class="hljs-string">libnspr4</span>
<span class="hljs-bullet">      -</span> <span class="hljs-string">libnss3</span>
<span class="hljs-bullet">      -</span> <span class="hljs-string">libpcre3</span>
<span class="hljs-bullet">      -</span> <span class="hljs-string">libpulse0</span>
<span class="hljs-bullet">      -</span> <span class="hljs-string">libxss1</span>
<span class="hljs-bullet">      -</span> <span class="hljs-string">libxtst6</span>
<span class="hljs-attr">  electron-launch:</span>
<span class="hljs-attr">    plugin:</span> <span class="hljs-string">dump</span>
<span class="hljs-attr">    source:</span> <span class="hljs-string">files/</span>
<span class="hljs-attr">    prepare:</span> <span class="hljs-string">|
      chmod +x bin/electron-launch

</span><span class="hljs-attr">apps:</span>
<span class="hljs-attr">  myApp:</span>
<span class="hljs-attr">    command:</span> <span class="hljs-string">bin/electron-launch</span> <span class="hljs-string">$SNAP/usr/lib/myApp/myApp</span>
<span class="hljs-attr">    desktop:</span> <span class="hljs-string">usr/share/applications/myApp.desktop</span>
    <span class="hljs-comment"># Correct the TMPDIR path for Chromium Framework/Electron to ensure</span>
    <span class="hljs-comment"># libappindicator has readable resources.</span>
<span class="hljs-attr">    environment:</span>
<span class="hljs-attr">      TMPDIR:</span> <span class="hljs-string">$XDG_RUNTIME_DIR</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_anef082j">Copy</button></pre>
<p>As you can see, the <code>snapcraft.yaml</code> instructs the system to launch a file
called <code>electron-launch</code>. In this example, it simply passes information on
to the app's binary:</p>
<pre><code class="hljs language-sh" id="_6e3rmlms"><span class="hljs-meta">#!/bin/sh
</span>
<span class="hljs-built_in">exec</span> <span class="hljs-string">"<span class="hljs-variable">$@</span>"</span> --executed-from=<span class="hljs-string">"<span class="hljs-variable">$(pwd)</span>"</span> --pid=$$ &gt; /dev/null 2&gt;&amp;1 &amp;</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_6e3rmlms">Copy</button></pre>
<p>Alternatively, if you're building your <code>snap</code> with <code>strict</code> confinement, you
can use the <code>desktop-launch</code> command:</p>
<pre><code class="hljs language-yaml" id="_2jtm7wzh"><span class="hljs-attr">apps:</span>
<span class="hljs-attr">  myApp:</span>
    <span class="hljs-comment"># Correct the TMPDIR path for Chromium Framework/Electron to ensure</span>
    <span class="hljs-comment"># libappindicator has readable resources.</span>
<span class="hljs-attr">    command:</span> <span class="hljs-string">env</span> <span class="hljs-string">TMPDIR=$XDG_RUNTIME_DIR</span> <span class="hljs-string">PATH=/usr/local/bin:${PATH}</span> <span class="hljs-string">${SNAP}/bin/desktop-launch</span> <span class="hljs-string">$SNAP/myApp/desktop</span>
<span class="hljs-attr">    desktop:</span> <span class="hljs-string">usr/share/applications/desktop.desktop</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_2jtm7wzh">Copy</button></pre>

  <hr>
  <h1 id="source-code-directory-structure"><a href="#source-code-directory-structure">Source Code Directory Structure</a><a class="header-link" href="#source-code-directory-structure" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>The source code of Electron is separated into a few parts, mostly
following Chromium on the separation conventions.</p>
<p>You may need to become familiar with <a href="https://dev.chromium.org/developers/design-documents/multi-process-architecture">Chromium's multi-process
architecture</a>
to understand the source code better.</p>
<h2 id="structure-of-source-code"><a href="#structure-of-source-code">Structure of Source Code</a><a class="header-link" href="#structure-of-source-code" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<pre><code class="hljs language-sh" id="_vhyf02yl">Electron
├── atom/ - C++ <span class="hljs-built_in">source</span> code.
|   ├── app/ - System entry code.
|   ├── browser/ - The frontend including the main window, UI, and all of the
|   |   main process things. This talks to the renderer to manage web pages.
|   |   ├── ui/ - Implementation of UI stuff <span class="hljs-keyword">for</span> different platforms.
|   |   |   ├── cocoa/ - Cocoa specific <span class="hljs-built_in">source</span> code.
|   |   |   ├── win/ - Windows GUI specific <span class="hljs-built_in">source</span> code.
|   |   |   └── x/ - X11 specific <span class="hljs-built_in">source</span> code.
|   |   ├── api/ - The implementation of the main process APIs.
|   |   ├── net/ - Network related code.
|   |   ├── mac/ - Mac specific Objective-C <span class="hljs-built_in">source</span> code.
|   |   └── resources/ - Icons, platform-dependent files, etc.
|   ├── renderer/ - Code that runs <span class="hljs-keyword">in</span> renderer process.
|   |   └── api/ - The implementation of renderer process APIs.
|   └── common/ - Code that used by both the main and renderer processes,
|       including some utility <span class="hljs-built_in">functions</span> and code to integrate node<span class="hljs-string">'s message
|       loop into Chromium'</span>s message loop.
|       └── api/ - The implementation of common APIs, and foundations of
|           Electron<span class="hljs-string">'s built-in modules.
├── chromium_src/ - Source code copied from Chromium. See below.
├── default_app/ - The default page to show when Electron is started without
|   providing an app.
├── docs/ - Documentations.
├── lib/ - JavaScript source code.
|   ├── browser/ - Javascript main process initialization code.
|   |   └── api/ - Javascript API implementation.
|   ├── common/ - JavaScript used by both the main and renderer processes
|   |   └── api/ - Javascript API implementation.
|   └── renderer/ - Javascript renderer process initialization code.
|       └── api/ - Javascript API implementation.
├── spec/ - Automatic tests.
├── electron.gyp - Building rules of Electron.
└── common.gypi - Compiler specific settings and building rules for other
    components like `node` and `breakpad`.</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_vhyf02yl">Copy</button></pre>
<h2 id="chromium_src"><a href="#chromium_src"><code>/chromium_src</code></a><a class="header-link" href="#chromium_src" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The files in <code>/chromium_src</code> tend to be pieces of Chromium that aren't part of
the content layer. For example to implement Pepper API, we need some wiring
similar to what official Chrome does. We could have built the relevant
sources as a part of <a href="https://electronjs.org/docs/glossary#libchromiumcontent">libcc</a> but most
often we don't require all the features (some tend to be proprietary,
analytics stuff) so we just took parts of the code. These could have easily
been patches in libcc, but at the time when these were written the goal of
libcc was to maintain very minimal patches and chromium_src changes tend to be
big ones. Also, note that these patches can never be upstreamed unlike other
libcc patches we maintain now.</p>
<h2 id="structure-of-other-directories"><a href="#structure-of-other-directories">Structure of Other Directories</a><a class="header-link" href="#structure-of-other-directories" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<ul>
<li><strong>script</strong> - Scripts used for development purpose like building, packaging,
testing, etc.</li>
<li><strong>tools</strong> - Helper scripts used by gyp files, unlike <code>script</code>, scripts put
here should never be invoked by users directly.</li>
<li><strong>vendor</strong> - Source code of third party dependencies, we didn't use
<code>third_party</code> as name because it would confuse it with the same directory in
Chromium's source code tree.</li>
<li><strong>node_modules</strong> - Third party node modules used for building.</li>
<li><strong>out</strong> - Temporary output directory of <code>ninja</code>.</li>
<li><strong>dist</strong> - Temporary directory created by <code>script/create-dist.py</code> script
when creating a distribution.</li>
<li><strong>external_binaries</strong> - Downloaded binaries of third-party frameworks which
do not support building with <code>gyp</code>.</li>
</ul>
<h2 id="keeping-git-submodules-up-to-date"><a href="#keeping-git-submodules-up-to-date">Keeping Git Submodules Up to Date</a><a class="header-link" href="#keeping-git-submodules-up-to-date" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The Electron repository has a few vendored dependencies, found in the
<a href="https://github.com/electron/electron/tree/master/vendor">/vendor</a> directory. Occasionally you might see a message like this
when running <code>git status</code>:</p>
<pre><code class="hljs language-sh" id="_zmiq9xd">$ git status

	modified:   vendor/libchromiumcontent (new commits)
	modified:   vendor/node (new commits)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_zmiq9xd">Copy</button></pre>
<p>To update these vendored dependencies, run the following command:</p>
<pre><code class="hljs language-sh" id="_pgohqqi9">git submodule update --init --recursive</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_pgohqqi9">Copy</button></pre>
<p>If you find yourself running this command often, you can create an alias for it
in your <code>~/.gitconfig</code> file:</p>
<pre><code class="hljs language-sh" id="_dr77g87b">[<span class="hljs-built_in">alias</span>]
	su = submodule update --init --recursive</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_dr77g87b">Copy</button></pre>

  <hr>
  <h1 id="streamprotocolresponse-object"><a href="#streamprotocolresponse-object">StreamProtocolResponse Object</a><a class="header-link" href="#streamprotocolresponse-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>statusCode</code> Number - The HTTP response code</li>
<li><code>headers</code> Object - An object containing the response headers</li>
<li><code>data</code> ReadableStream - A Node.js readable stream representing the response body</li>
</ul>

  <hr>
  <h1 id="electron-documentation-styleguide"><a href="#electron-documentation-styleguide">Electron Documentation Styleguide</a><a class="header-link" href="#electron-documentation-styleguide" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>These are the guidelines for writing Electron documentation.</p>
<h2 id="titles"><a href="#titles">Titles</a><a class="header-link" href="#titles" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<ul>
<li>Each page must have a single <code>#</code>-level title at the top.</li>
<li>Chapters in the same page must have <code>##</code>-level titles.</li>
<li>Sub-chapters need to increase the number of <code>#</code> in the title according to
their nesting depth.</li>
<li>All words in the page's title must be capitalized, except for conjunctions
like "of" and "and" .</li>
<li>Only the first word of a chapter title must be capitalized.</li>
</ul>
<p>Using <code>Quick Start</code> as example:</p>
<pre><code class="hljs language-markdown" id="_z4bp4w8l"><span class="hljs-section"># Quick Start</span>

...

<span class="hljs-section">## Main process</span>

...

<span class="hljs-section">## Renderer process</span>

...

<span class="hljs-section">## Run your app</span>

...

<span class="hljs-section">### Run as a distribution</span>

...

<span class="hljs-section">### Manually downloaded Electron binary</span>

...</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_z4bp4w8l">Copy</button></pre>
<p>For API references, there are exceptions to this rule.</p>
<h2 id="markdown-rules"><a href="#markdown-rules">Markdown rules</a><a class="header-link" href="#markdown-rules" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<ul>
<li>Use <code>sh</code> instead of <code>cmd</code> in code blocks (due to the syntax highlighter).</li>
<li>Lines should be wrapped at 80 columns.</li>
<li>No nesting lists more than 2 levels (due to the markdown renderer).</li>
<li>All <code>js</code> and <code>javascript</code> code blocks are linted with
<a href="http://npm.im/standard-markdown">standard-markdown</a>.</li>
</ul>
<h2 id="picking-words"><a href="#picking-words">Picking words</a><a class="header-link" href="#picking-words" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<ul>
<li>Use "will" over "would" when describing outcomes.</li>
<li>Prefer "in the ___ process" over "on".</li>
</ul>
<h2 id="api-references"><a href="#api-references">API references</a><a class="header-link" href="#api-references" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The following rules only apply to the documentation of APIs.</p>
<h3 id="page-title"><a href="#page-title">Page title</a><a class="header-link" href="#page-title" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Each page must use the actual object name returned by <code>require('electron')</code>
as the title, such as <code>BrowserWindow</code>, <code>autoUpdater</code>, and <code>session</code>.</p>
<p>Under the page title must be a one-line description starting with <code>&gt;</code>.</p>
<p>Using <code>session</code> as example:</p>
<pre><code class="hljs language-markdown" id="_1k7b9ly"><span class="hljs-section"># session</span>

<span class="hljs-quote">&gt; Manage browser sessions, cookies, cache, proxy settings, etc.</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_1k7b9ly">Copy</button></pre>
<h3 id="module-methods-and-events"><a href="#module-methods-and-events">Module methods and events</a><a class="header-link" href="#module-methods-and-events" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>For modules that are not classes, their methods and events must be listed under
the <code>## Methods</code> and <code>## Events</code> chapters.</p>
<p>Using <code>autoUpdater</code> as an example:</p>
<pre><code class="hljs language-markdown" id="_2eyfian6"><span class="hljs-section"># autoUpdater</span>

<span class="hljs-section">## Events</span>

<span class="hljs-section">### Event: 'error'</span>

<span class="hljs-section">## Methods</span>

<span class="hljs-section">### `autoUpdater.setFeedURL(url[, requestHeaders])`</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_2eyfian6">Copy</button></pre>
<h3 id="classes"><a href="#classes">Classes</a><a class="header-link" href="#classes" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>API classes or classes that are part of modules must be listed under a
<code>## Class: TheClassName</code> chapter.</li>
<li>One page can have multiple classes.</li>
<li>Constructors must be listed with <code>###</code>-level titles.</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static">Static Methods</a> must be listed under a <code>### Static Methods</code> chapter.</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Prototype_methods">Instance Methods</a> must be listed under an <code>### Instance Methods</code> chapter.</li>
<li>
<p>All methods that have a return value must start their description with "Returns <code>[TYPE]</code> - Return description"</p>
<ul>
<li>If the method returns an <code>Object</code>, its structure can be 
specified using a colon followed by a newline then an unordered list of 
properties in the same style as function parameters.</li>
</ul>
</li>
<li>Instance Events must be listed under an <code>### Instance Events</code> chapter.</li>
<li>
<p>Instance Properties must be listed under an <code>### Instance Properties</code> chapter.</p>
<ul>
<li>Instance properties must start with "A [Property Type] ..."</li>
</ul>
</li>
</ul>
<p>Using the <code>Session</code> and <code>Cookies</code> classes as an example:</p>
<pre><code class="hljs language-markdown" id="_uvo3epox"><span class="hljs-section"># session</span>

<span class="hljs-section">## Methods</span>

<span class="hljs-section">### session.fromPartition(partition)</span>

<span class="hljs-section">## Properties</span>

<span class="hljs-section">### session.defaultSession</span>

<span class="hljs-section">## Class: Session</span>

<span class="hljs-section">### Instance Events</span>

<span class="hljs-section">#### Event: 'will-download'</span>

<span class="hljs-section">### Instance Methods</span>

<span class="hljs-section">#### `ses.getCacheSize(callback)`</span>

<span class="hljs-section">### Instance Properties</span>

<span class="hljs-section">#### `ses.cookies`</span>

<span class="hljs-section">## Class: Cookies</span>

<span class="hljs-section">### Instance Methods</span>

<span class="hljs-section">#### `cookies.get(filter, callback)`</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_uvo3epox">Copy</button></pre>
<h3 id="methods"><a href="#methods">Methods</a><a class="header-link" href="#methods" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The methods chapter must be in the following form:</p>
<pre><code class="hljs language-markdown" id="_wobw3gfi"><span class="hljs-section">### `objectName.methodName(required[, optional]))`</span>

<span class="hljs-bullet">* </span><span class="hljs-code">`required`</span> String - A parameter description.
<span class="hljs-bullet">* </span><span class="hljs-code">`optional`</span> Integer (optional) - Another parameter description.

...</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_wobw3gfi">Copy</button></pre>
<p>The title can be <code>###</code> or <code>####</code>-levels depending on whether it is a method of
a module or a class.</p>
<p>For modules, the <code>objectName</code> is the module's name. For classes, it must be the
name of the instance of the class, and must not be the same as the module's
name.</p>
<p>For example, the methods of the <code>Session</code> class under the <code>session</code> module must
use <code>ses</code> as the <code>objectName</code>.</p>
<p>The optional arguments are notated by square brackets <code>[]</code> surrounding the optional argument
as well as the comma required if this optional argument follows another
argument:</p>
<pre><code class="hljs language-sh" id="_zwxvam3">required[, optional]</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_zwxvam3">Copy</button></pre>
<p>Below the method is more detailed information on each of the arguments. The type
of argument is notated by either the common types:</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"><code>String</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number"><code>Number</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"><code>Object</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"><code>Array</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean"><code>Boolean</code></a></li>
<li>Or a custom type like Electron's <a href="https://electronjs.org/docs/api/web-contents"><code>WebContent</code></a></li>
</ul>
<p>If an argument or a method is unique to certain platforms, those platforms are
denoted using a space-delimited italicized list following the datatype. Values
can be <code>macOS</code>, <code>Windows</code>, or <code>Linux</code>.</p>
<pre><code class="hljs language-markdown" id="_72n0z3xl"><span class="hljs-bullet">* </span><span class="hljs-code">`animate`</span> Boolean (optional) <span class="hljs-emphasis">_macOS_</span> <span class="hljs-emphasis">_Windows_</span> - Animate the thing.</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_72n0z3xl">Copy</button></pre>
<p><code>Array</code> type arguments must specify what elements the array may include in
the description below.</p>
<p>The description for <code>Function</code> type arguments should make it clear how it may be
called and list the types of the parameters that will be passed to it.</p>
<h3 id="events"><a href="#events">Events</a><a class="header-link" href="#events" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The events chapter must be in following form:</p>
<pre><code class="hljs language-markdown" id="_qg26c8k"><span class="hljs-section">### Event: 'wake-up'</span>

Returns:

<span class="hljs-bullet">* </span><span class="hljs-code">`time`</span> String

...</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_qg26c8k">Copy</button></pre>
<p>The title can be <code>###</code> or <code>####</code>-levels depending on whether it is an event of
a module or a class.</p>
<p>The arguments of an event follow the same rules as methods.</p>
<h3 id="properties"><a href="#properties">Properties</a><a class="header-link" href="#properties" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The properties chapter must be in following form:</p>
<pre><code class="hljs language-markdown" id="_7ikn197n"><span class="hljs-section">### session.defaultSession</span>

...</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_7ikn197n">Copy</button></pre>
<p>The title can be <code>###</code> or <code>####</code>-levels depending on whether it is a property of
a module or a class.</p>
<h2 id="documentation-translations"><a href="#documentation-translations">Documentation Translations</a><a class="header-link" href="#documentation-translations" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>See <a href="https://github.com/electron/electron-i18n#readme">electron/electron-i18n</a></p>

  <hr>
  <h1 id="supported-platforms"><a href="#supported-platforms">Supported Platforms</a><a class="header-link" href="#supported-platforms" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>Following platforms are supported by Electron:</p>
<h3 id="macos"><a href="#macos">macOS</a><a class="header-link" href="#macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Only 64bit binaries are provided for macOS, and the minimum macOS version
supported is macOS 10.9.</p>
<h3 id="windows"><a href="#windows">Windows</a><a class="header-link" href="#windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Windows 7 and later are supported, older operating systems are not supported
(and do not work).</p>
<p>Both <code>ia32</code> (<code>x86</code>) and <code>x64</code> (<code>amd64</code>) binaries are provided for Windows.
Please note, the <code>ARM</code> version of Windows is not supported for now.</p>
<h3 id="linux"><a href="#linux">Linux</a><a class="header-link" href="#linux" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The prebuilt <code>ia32</code> (<code>i686</code>) and <code>x64</code> (<code>amd64</code>) binaries of Electron are built on
Ubuntu 12.04, the <code>armv7l</code> binary is built against ARM v7 with hard-float ABI and
NEON for Debian Wheezy.</p>
<p><a href="https://github.com/electron/electron/blob/master/docs/tutorial/planned-breaking-changes.md#duplicate-arm-assets">Until the release of Electron 2.0</a>, Electron will also
continue to release the <code>armv7l</code> binary with a simple <code>arm</code> suffix. Both binaries
are identical.</p>
<p>Whether the prebuilt binary can run on a distribution depends on whether the
distribution includes the libraries that Electron is linked to on the building
platform, so only Ubuntu 12.04 is guaranteed to work, but following platforms
are also verified to be able to run the prebuilt binaries of Electron:</p>
<ul>
<li>Ubuntu 12.04 and later</li>
<li>Fedora 21</li>
<li>Debian 8</li>
</ul>

  <hr>
  <h1 id="synopsis"><a href="#synopsis">Synopsis</a><a class="header-link" href="#synopsis" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>How to use Node.js and Electron APIs.</p>
</blockquote>
<p>All of <a href="https://nodejs.org/api/">Node.js's built-in modules</a> are available in
Electron and third-party node modules also fully supported as well (including
the <a href="https://electronjs.org/docs/tutorial/using-native-node-modules">native modules</a>).</p>
<p>Electron also provides some extra built-in modules for developing native
desktop applications. Some modules are only available in the main process, some
are only available in the renderer process (web page), and some can be used in
both processes.</p>
<p>The basic rule is: if a module is <a href="https://en.wikipedia.org/wiki/Graphical_user_interface">GUI</a> or low-level system related, then
it should be only available in the main process. You need to be familiar with
the concept of <a href="https://electronjs.org/docs/tutorial/quick-start#main-process">main process vs. renderer process</a>
scripts to be able to use those modules.</p>
<p>The main process script is just like a normal Node.js script:</p>
<pre><code class="hljs language-javascript" id="_2ty6zexn"><span class="hljs-keyword">const</span> {app, BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-literal">null</span>

app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  win = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">width</span>: <span class="hljs-number">800</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">600</span>})
  win.loadURL(<span class="hljs-string">'https://github.com'</span>)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_2ty6zexn">Copy</button></pre>
<p>The renderer process is no different than a normal web page, except for the
extra ability to use node modules:</p>
<pre><code class="hljs language-html" id="_rbts7nie"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
  <span class="hljs-keyword">const</span> {app} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>).remote
  <span class="hljs-built_in">console</span>.log(app.getVersion())
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_rbts7nie">Copy</button></pre>
<p>To run your app, read <a href="https://electronjs.org/docs/tutorial/quick-start#run-your-app">Run your app</a>.</p>
<h2 id="destructuring-assignment"><a href="#destructuring-assignment">Destructuring assignment</a><a class="header-link" href="#destructuring-assignment" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>As of 0.37, you can use
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">destructuring assignment</a> to make it easier to use
built-in modules.</p>
<pre><code class="hljs language-javascript" id="_l5kmjyjg"><span class="hljs-keyword">const</span> {app, BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-keyword">let</span> win

app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  win = <span class="hljs-keyword">new</span> BrowserWindow()
  win.loadURL(<span class="hljs-string">'https://github.com'</span>)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_l5kmjyjg">Copy</button></pre>
<p>If you need the entire <code>electron</code> module, you can require it and then using
destructuring to access the individual modules from <code>electron</code>.</p>
<pre><code class="hljs language-javascript" id="_5igrflh5"><span class="hljs-keyword">const</span> electron = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">const</span> {app, BrowserWindow} = electron

<span class="hljs-keyword">let</span> win

app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  win = <span class="hljs-keyword">new</span> BrowserWindow()
  win.loadURL(<span class="hljs-string">'https://github.com'</span>)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_5igrflh5">Copy</button></pre>
<p>This is equivalent to the following code:</p>
<pre><code class="hljs language-javascript" id="_o07fwm3p"><span class="hljs-keyword">const</span> electron = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">const</span> app = electron.app
<span class="hljs-keyword">const</span> BrowserWindow = electron.BrowserWindow
<span class="hljs-keyword">let</span> win

app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  win = <span class="hljs-keyword">new</span> BrowserWindow()
  win.loadURL(<span class="hljs-string">'https://github.com'</span>)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_o07fwm3p">Copy</button></pre>

  <hr>
  <h1 id="systempreferences"><a href="#systempreferences">systemPreferences</a><a class="header-link" href="#systempreferences" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Get system preferences.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<pre><code class="hljs language-javascript" id="_slsxjqj8"><span class="hljs-keyword">const</span> {systemPreferences} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-built_in">console</span>.log(systemPreferences.isDarkMode())</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_slsxjqj8">Copy</button></pre>
<h2 id="events"><a href="#events">Events</a><a class="header-link" href="#events" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>systemPreferences</code> object emits the following events:</p>
<h3 id="event-accent-color-changed-windows"><a href="#event-accent-color-changed-windows">Event: 'accent-color-changed' <em class="platform-label">Windows</em></a><a class="header-link" href="#event-accent-color-changed-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>newColor</code> String - The new RGBA color the user assigned to be their system
accent color.</li>
</ul>
<h3 id="event-color-changed-windows"><a href="#event-color-changed-windows">Event: 'color-changed' <em class="platform-label">Windows</em></a><a class="header-link" href="#event-color-changed-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
</ul>
<h3 id="event-inverted-color-scheme-changed-windows"><a href="#event-inverted-color-scheme-changed-windows">Event: 'inverted-color-scheme-changed' <em class="platform-label">Windows</em></a><a class="header-link" href="#event-inverted-color-scheme-changed-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>invertedColorScheme</code> Boolean - <code>true</code> if an inverted color scheme, such as
a high contrast theme, is being used, <code>false</code> otherwise.</li>
</ul>
<h2 id="methods"><a href="#methods">Methods</a><a class="header-link" href="#methods" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<h3 id="systempreferencesisdarkmode-macos"><a href="#systempreferencesisdarkmode-macos"><code>systemPreferences.isDarkMode()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#systempreferencesisdarkmode-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Boolean</code> - Whether the system is in Dark Mode.</p>
<h3 id="systempreferencesisswipetrackingfromscrolleventsenabled-macos"><a href="#systempreferencesisswipetrackingfromscrolleventsenabled-macos"><code>systemPreferences.isSwipeTrackingFromScrollEventsEnabled()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#systempreferencesisswipetrackingfromscrolleventsenabled-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Boolean</code> - Whether the Swipe between pages setting is on.</p>
<h3 id="systempreferencespostnotificationevent-userinfo-macos"><a href="#systempreferencespostnotificationevent-userinfo-macos"><code>systemPreferences.postNotification(event, userInfo)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#systempreferencespostnotificationevent-userinfo-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>event</code> String</li>
<li><code>userInfo</code> Object</li>
</ul>
<p>Posts <code>event</code> as native notifications of macOS. The <code>userInfo</code> is an Object
that contains the user information dictionary sent along with the notification.</p>
<h3 id="systempreferencespostlocalnotificationevent-userinfo-macos"><a href="#systempreferencespostlocalnotificationevent-userinfo-macos"><code>systemPreferences.postLocalNotification(event, userInfo)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#systempreferencespostlocalnotificationevent-userinfo-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>event</code> String</li>
<li><code>userInfo</code> Object</li>
</ul>
<p>Posts <code>event</code> as native notifications of macOS. The <code>userInfo</code> is an Object
that contains the user information dictionary sent along with the notification.</p>
<h3 id="systempreferencessubscribenotificationevent-callback-macos"><a href="#systempreferencessubscribenotificationevent-callback-macos"><code>systemPreferences.subscribeNotification(event, callback)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#systempreferencessubscribenotificationevent-callback-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>event</code> String</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>event</code> String</li>
<li><code>userInfo</code> Object</li>
</ul>
</li>
</ul>
<p>Subscribes to native notifications of macOS, <code>callback</code> will be called with
<code>callback(event, userInfo)</code> when the corresponding <code>event</code> happens. The
<code>userInfo</code> is an Object that contains the user information dictionary sent
along with the notification.</p>
<p>The <code>id</code> of the subscriber is returned, which can be used to unsubscribe the
<code>event</code>.</p>
<p>Under the hood this API subscribes to <code>NSDistributedNotificationCenter</code>,
example values of <code>event</code> are:</p>
<ul>
<li><code>AppleInterfaceThemeChangedNotification</code></li>
<li><code>AppleAquaColorVariantChanged</code></li>
<li><code>AppleColorPreferencesChangedNotification</code></li>
<li><code>AppleShowScrollBarsSettingChanged</code></li>
</ul>
<h3 id="systempreferencesunsubscribenotificationid-macos"><a href="#systempreferencesunsubscribenotificationid-macos"><code>systemPreferences.unsubscribeNotification(id)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#systempreferencesunsubscribenotificationid-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>id</code> Integer</li>
</ul>
<p>Removes the subscriber with <code>id</code>.</p>
<h3 id="systempreferencessubscribelocalnotificationevent-callback-macos"><a href="#systempreferencessubscribelocalnotificationevent-callback-macos"><code>systemPreferences.subscribeLocalNotification(event, callback)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#systempreferencessubscribelocalnotificationevent-callback-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>event</code> String</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>event</code> String</li>
<li><code>userInfo</code> Object</li>
</ul>
</li>
</ul>
<p>Same as <code>subscribeNotification</code>, but uses <code>NSNotificationCenter</code> for local defaults.
This is necessary for events such as <code>NSUserDefaultsDidChangeNotification</code></p>
<h3 id="systempreferencesunsubscribelocalnotificationid-macos"><a href="#systempreferencesunsubscribelocalnotificationid-macos"><code>systemPreferences.unsubscribeLocalNotification(id)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#systempreferencesunsubscribelocalnotificationid-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>id</code> Integer</li>
</ul>
<p>Same as <code>unsubscribeNotification</code>, but removes the subscriber from <code>NSNotificationCenter</code>.</p>
<h3 id="systempreferencesgetuserdefaultkey-type-macos"><a href="#systempreferencesgetuserdefaultkey-type-macos"><code>systemPreferences.getUserDefault(key, type)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#systempreferencesgetuserdefaultkey-type-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>key</code> String</li>
<li><code>type</code> String - Can be <code>string</code>, <code>boolean</code>, <code>integer</code>, <code>float</code>, <code>double</code>,
<code>url</code>, <code>array</code>, <code>dictionary</code></li>
</ul>
<p>Returns <code>any</code> - The value of <code>key</code> in <code>NSUserDefaults</code>.</p>
<p>Some popular <code>key</code> and <code>type</code>s are:</p>
<ul>
<li><code>AppleInterfaceStyle</code>:  <code>string</code></li>
<li><code>AppleAquaColorVariant</code>:  <code>integer</code></li>
<li><code>AppleHighlightColor</code>:  <code>string</code></li>
<li><code>AppleShowScrollBars</code>:  <code>string</code></li>
<li><code>NSNavRecentPlaces</code>:  <code>array</code></li>
<li><code>NSPreferredWebServices</code>:  <code>dictionary</code></li>
<li><code>NSUserDictionaryReplacementItems</code>:  <code>array</code></li>
</ul>
<h3 id="systempreferencessetuserdefaultkey-type-value-macos"><a href="#systempreferencessetuserdefaultkey-type-value-macos"><code>systemPreferences.setUserDefault(key, type, value)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#systempreferencessetuserdefaultkey-type-value-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>key</code> String</li>
<li><code>type</code> String - See <a href=""><code>getUserDefault</code></a></li>
<li><code>value</code> String</li>
</ul>
<p>Set the value of <code>key</code> in <code>NSUserDefaults</code>.</p>
<p>Note that <code>type</code> should match actual type of <code>value</code>. An exception is thrown
if they don't.</p>
<p>Some popular <code>key</code> and <code>type</code>s are:</p>
<ul>
<li><code>ApplePressAndHoldEnabled</code>:  <code>boolean</code></li>
</ul>
<h3 id="systempreferencesremoveuserdefaultkey-macos"><a href="#systempreferencesremoveuserdefaultkey-macos"><code>systemPreferences.removeUserDefault(key)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#systempreferencesremoveuserdefaultkey-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>key</code> String</li>
</ul>
<p>Removes the <code>key</code> in <code>NSUserDefaults</code>. This can be used to restore the default
or global value of a <code>key</code> previously set with <code>setUserDefault</code>.</p>
<h3 id="systempreferencesisaeroglassenabled-windows"><a href="#systempreferencesisaeroglassenabled-windows"><code>systemPreferences.isAeroGlassEnabled()</code> <em class="platform-label">Windows</em></a><a class="header-link" href="#systempreferencesisaeroglassenabled-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Boolean</code> - <code>true</code> if <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa969540.aspx">DWM composition</a> (Aero Glass) is
enabled, and <code>false</code> otherwise.</p>
<p>An example of using it to determine if you should create a transparent window or
not (transparent windows won't work correctly when DWM composition is disabled):</p>
<pre><code class="hljs language-javascript" id="_pvvzep6wq"><span class="hljs-keyword">const</span> {BrowserWindow, systemPreferences} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> browserOptions = {<span class="hljs-attr">width</span>: <span class="hljs-number">1000</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">800</span>}

<span class="hljs-comment">// Make the window transparent only if the platform supports it.</span>
<span class="hljs-keyword">if</span> (process.platform !== <span class="hljs-string">'win32'</span> || systemPreferences.isAeroGlassEnabled()) {
  browserOptions.transparent = <span class="hljs-literal">true</span>
  browserOptions.frame = <span class="hljs-literal">false</span>
}

<span class="hljs-comment">// Create the window.</span>
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow(browserOptions)

<span class="hljs-comment">// Navigate.</span>
<span class="hljs-keyword">if</span> (browserOptions.transparent) {
  win.loadURL(<span class="hljs-string">`file://<span class="hljs-subst">${__dirname}</span>/index.html`</span>)
} <span class="hljs-keyword">else</span> {
  <span class="hljs-comment">// No transparency, so we load a fallback that uses basic styles.</span>
  win.loadURL(<span class="hljs-string">`file://<span class="hljs-subst">${__dirname}</span>/fallback.html`</span>)
}</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_pvvzep6wq">Copy</button></pre>
<h3 id="systempreferencesgetaccentcolor-windows"><a href="#systempreferencesgetaccentcolor-windows"><code>systemPreferences.getAccentColor()</code> <em class="platform-label">Windows</em></a><a class="header-link" href="#systempreferencesgetaccentcolor-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>String</code> - The users current system wide accent color preference in RGBA
hexadecimal form.</p>
<pre><code class="hljs language-js" id="_ela9jcwl"><span class="hljs-keyword">const</span> color = systemPreferences.getAccentColor() <span class="hljs-comment">// `"aabbccdd"`</span>
<span class="hljs-keyword">const</span> red = color.substr(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// "aa"</span>
<span class="hljs-keyword">const</span> green = color.substr(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// "bb"</span>
<span class="hljs-keyword">const</span> blue = color.substr(<span class="hljs-number">4</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// "cc"</span>
<span class="hljs-keyword">const</span> alpha = color.substr(<span class="hljs-number">6</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// "dd"</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_ela9jcwl">Copy</button></pre>
<h3 id="systempreferencesgetcolorcolor-windows"><a href="#systempreferencesgetcolorcolor-windows"><code>systemPreferences.getColor(color)</code> <em class="platform-label">Windows</em></a><a class="header-link" href="#systempreferencesgetcolorcolor-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>color</code> String - One of the following values:</p>
<ul>
<li><code>3d-dark-shadow</code> - Dark shadow for three-dimensional display elements.</li>
<li><code>3d-face</code> - Face color for three-dimensional display elements and for dialog
box backgrounds.</li>
<li><code>3d-highlight</code> - Highlight color for three-dimensional display elements.</li>
<li><code>3d-light</code> - Light color for three-dimensional display elements.</li>
<li><code>3d-shadow</code> - Shadow color for three-dimensional display elements.</li>
<li><code>active-border</code> - Active window border.</li>
<li><code>active-caption</code> - Active window title bar. Specifies the left side color in
the color gradient of an active window's title bar if the gradient effect is
enabled.</li>
<li><code>active-caption-gradient</code> - Right side color in the color gradient of an
active window's title bar.</li>
<li><code>app-workspace</code> - Background color of multiple document interface (MDI)
applications.</li>
<li><code>button-text</code> - Text on push buttons.</li>
<li><code>caption-text</code> - Text in caption, size box, and scroll bar arrow box.</li>
<li><code>desktop</code> - Desktop background color.</li>
<li><code>disabled-text</code> - Grayed (disabled) text.</li>
<li><code>highlight</code> - Item(s) selected in a control.</li>
<li><code>highlight-text</code> - Text of item(s) selected in a control.</li>
<li><code>hotlight</code> - Color for a hyperlink or hot-tracked item.</li>
<li><code>inactive-border</code> - Inactive window border.</li>
<li><code>inactive-caption</code> - Inactive window caption. Specifies the left side color
in the color gradient of an inactive window's title bar if the gradient
effect is enabled.</li>
<li><code>inactive-caption-gradient</code> - Right side color in the color gradient of an
inactive window's title bar.</li>
<li><code>inactive-caption-text</code> - Color of text in an inactive caption.</li>
<li><code>info-background</code> - Background color for tooltip controls.</li>
<li><code>info-text</code> - Text color for tooltip controls.</li>
<li><code>menu</code> - Menu background.</li>
<li><code>menu-highlight</code> - The color used to highlight menu items when the menu
appears as a flat menu.</li>
<li><code>menubar</code> - The background color for the menu bar when menus appear as flat
menus.</li>
<li><code>menu-text</code> - Text in menus.</li>
<li><code>scrollbar</code> - Scroll bar gray area.</li>
<li><code>window</code> - Window background.</li>
<li><code>window-frame</code> - Window frame.</li>
<li><code>window-text</code> - Text in windows.</li>
</ul>
</li>
</ul>
<p>Returns <code>String</code> - The system color setting in RGB hexadecimal form (<code>#ABCDEF</code>).
See the <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms724371(v=vs.85).aspx">Windows docs</a> for more details.</p>
<h3 id="systempreferencesisinvertedcolorscheme-windows"><a href="#systempreferencesisinvertedcolorscheme-windows"><code>systemPreferences.isInvertedColorScheme()</code> <em class="platform-label">Windows</em></a><a class="header-link" href="#systempreferencesisinvertedcolorscheme-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Boolean</code> - <code>true</code> if an inverted color scheme, such as a high contrast
theme, is active, <code>false</code> otherwise.</p>

  <hr>
  <h1 id="task-object"><a href="#task-object">Task Object</a><a class="header-link" href="#task-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>program</code> String - Path of the program to execute, usually you should
specify <code>process.execPath</code> which opens the current program.</li>
<li><code>arguments</code> String - The command line arguments when <code>program</code> is
executed.</li>
<li><code>title</code> String - The string to be displayed in a JumpList.</li>
<li><code>description</code> String - Description of this task.</li>
<li><code>iconPath</code> String - The absolute path to an icon to be displayed in a
JumpList, which can be an arbitrary resource file that contains an icon. You
can usually specify <code>process.execPath</code> to show the icon of the program.</li>
<li><code>iconIndex</code> Number - The icon index in the icon file. If an icon file
consists of two or more icons, set this value to identify the icon. If an
icon file consists of one icon, this value is 0.</li>
</ul>

  <hr>
  <h1 id="testing"><a href="#testing">Testing</a><a class="header-link" href="#testing" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>We aim to keep the code coverage of Electron high. We ask that all pull
request not only pass all existing tests, but ideally also add new tests
to cover changed code and new scenarios. Ensuring that we capture as
many code paths and use cases of Electron as possible ensures that we
all ship apps with fewer bugs.</p>
<p>This repository comes with linting rules for both JavaScript and C++ –
as well as unit and integration tests. To learn more about Electron's
coding style, please see the [coding-style(coding-style.md) document.</p>
<h2 id="linting"><a href="#linting">Linting</a><a class="header-link" href="#linting" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>To ensure that your JavaScript is in compliance with the Electron coding
style, run <code>npm run lint-js</code>, which will run <code>standard</code> against both
Electron itself as well as the unit tests. If you are using an editor
with a plugin/addon system, you might want to use one of the many
<a href="https://standardjs.com/#are-there-text-editor-plugins">StandardJS addons</a> to be informed of coding style
violations before you ever commit them.</p>
<p>To run <code>standard</code> with parameters, run <code>npm run lint-js --</code> followed by
arguments you want passed to <code>standard</code>.</p>
<p>To ensure that your C++ is in compliance with the Electron coding style,
run <code>npm run lint-cpp</code>, which runs a <code>cpplint</code> script. We recommend that
you use <code>clang-format</code> and prepared <a href="https://electronjs.org/docs/development/clang-format">a short tutorial</a>.</p>
<p>There is not a lot of Python in this repository, but it too is governed
by coding style rules. <code>npm run lint-py</code> will check all Python, using
<code>pylint</code> to do so.</p>
<h2 id="unit-tests"><a href="#unit-tests">Unit Tests</a><a class="header-link" href="#unit-tests" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>To run all unit tests, run <code>npm run test</code>. The unit tests are an Electron
app (surprise!) that can be found in the <code>spec</code> folder. Note that it has
its own <code>package.json</code> and that its dependencies are therefore not defined
in the top-level <code>package.json</code>.</p>
<p>To run only a selected number of tests, run <code>npm run test -match=NAME</code>,
replacing the <code>NAME</code> with the file name of the test suite you would like
to run. As an example: If you want to run only IPC suites, you would run
<code>npm run test -match=ipc</code>.</p>

  <hr>
  <h1 id="testing-on-headless-ci-systems-travis-ci-jenkins"><a href="#testing-on-headless-ci-systems-travis-ci-jenkins">Testing on Headless CI Systems (Travis CI, Jenkins)</a><a class="header-link" href="#testing-on-headless-ci-systems-travis-ci-jenkins" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>Being based on Chromium, Electron requires a display driver to function.
If Chromium can't find a display driver, Electron will simply fail to launch -
and therefore not executing any of your tests, regardless of how you are running
them. Testing Electron-based apps on Travis, Circle, Jenkins or similar Systems
requires therefore a little bit of configuration. In essence, we need to use
a virtual display driver.</p>
<h2 id="configuring-the-virtual-display-server"><a href="#configuring-the-virtual-display-server">Configuring the Virtual Display Server</a><a class="header-link" href="#configuring-the-virtual-display-server" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>First, install <a href="https://en.wikipedia.org/wiki/Xvfb">Xvfb</a>.
It's a virtual framebuffer, implementing the X11 display server protocol -
it performs all graphical operations in memory without showing any screen output,
which is exactly what we need.</p>
<p>Then, create a virtual xvfb screen and export an environment variable
called DISPLAY that points to it. Chromium in Electron will automatically look
for <code>$DISPLAY</code>, so no further configuration of your app is required.
This step can be automated with Paul Betts's
<a href="https://github.com/paulcbetts/xvfb-maybe">xvfb-maybe</a>: Prepend your test
commands with <code>xvfb-maybe</code> and the little tool will automatically configure
xvfb, if required by the current system. On Windows or macOS, it will simply
do nothing.</p>
<pre><code class="hljs language-sh" id="_5rv0hnrd"><span class="hljs-comment">## On Windows or macOS, this just invokes electron-mocha</span>
<span class="hljs-comment">## On Linux, if we are in a headless environment, this will be equivalent</span>
<span class="hljs-comment">## to xvfb-run electron-mocha ./test/*.js</span>
xvfb-maybe electron-mocha ./<span class="hljs-built_in">test</span>/*.js</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_5rv0hnrd">Copy</button></pre>
<h3 id="travis-ci"><a href="#travis-ci">Travis CI</a><a class="header-link" href="#travis-ci" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>On Travis, your <code>.travis.yml</code> should look roughly like this:</p>
<pre><code class="hljs language-yml" id="_obazmsfo"><span class="hljs-attr">addons:</span>
<span class="hljs-attr">  apt:</span>
<span class="hljs-attr">    packages:</span>
<span class="hljs-bullet">      -</span> <span class="hljs-string">xvfb</span>

<span class="hljs-attr">install:</span>
<span class="hljs-bullet">  -</span> <span class="hljs-string">export</span> <span class="hljs-string">DISPLAY=':99.0'</span>
<span class="hljs-bullet">  -</span> <span class="hljs-string">Xvfb</span> <span class="hljs-string">:99</span> <span class="hljs-bullet">-screen</span> <span class="hljs-number">0</span> <span class="hljs-number">1024</span><span class="hljs-string">x768x24</span> <span class="hljs-string">&gt; /dev/null 2&gt;&amp;1 &amp;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_obazmsfo">Copy</button></pre>
<h3 id="jenkins"><a href="#jenkins">Jenkins</a><a class="header-link" href="#jenkins" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>For Jenkins, a <a href="https://wiki.jenkins-ci.org/display/JENKINS/Xvfb+Plugin">Xvfb plugin is available</a>.</p>
<h3 id="circle-ci"><a href="#circle-ci">Circle CI</a><a class="header-link" href="#circle-ci" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Circle CI is awesome and has xvfb and <code>$DISPLAY</code>
<a href="https://circleci.com/docs/environment#browsers">already setup, so no further configuration is required</a>.</p>
<h3 id="appveyor"><a href="#appveyor">AppVeyor</a><a class="header-link" href="#appveyor" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>AppVeyor runs on Windows, supporting Selenium, Chromium, Electron and similar
tools out of the box - no configuration is required.</p>

  <hr>
  <h1 id="thumbarbutton-object"><a href="#thumbarbutton-object">ThumbarButton Object</a><a class="header-link" href="#thumbarbutton-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>icon</code> <a href="https://electronjs.org/docs/api/native-image">NativeImage</a> - The icon showing in thumbnail
toolbar.</li>
<li><code>click</code> Function</li>
<li><code>tooltip</code> String (optional) - The text of the button's tooltip.</li>
<li><code>flags</code> String<a href="https://electronjs.org/docs/api/structures/optional"></a> - Control specific states and behaviors of the
button. By default, it is <code>['enabled']</code>.</li>
</ul>
<p>The <code>flags</code> is an array that can include following <code>String</code>s:</p>
<ul>
<li><code>enabled</code> - The button is active and available to the user.</li>
<li><code>disabled</code> - The button is disabled. It is present, but has a visual state
indicating it will not respond to user action.</li>
<li><code>dismissonclick</code> - When the button is clicked, the thumbnail window closes
immediately.</li>
<li><code>nobackground</code> - Do not draw a button border, use only the image.</li>
<li><code>hidden</code> - The button is not shown to the user.</li>
<li><code>noninteractive</code> - The button is enabled but not interactive; no pressed
button state is drawn. This value is intended for instances where the button
is used in a notification.</li>
</ul>

  <hr>
  <h2 id="class-touchbar"><a href="#class-touchbar">Class: TouchBar</a><a class="header-link" href="#class-touchbar" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>Create TouchBar layouts for native macOS applications</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/tutorial/quick-start#main-process">Main</a></p>
<h3 id="new-touchbaroptions-experimental"><a href="#new-touchbaroptions-experimental"><code>new TouchBar(options)</code> <em>Experimental</em></a><a class="header-link" href="#new-touchbaroptions-experimental" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>items</code> (<a href="https://electronjs.org/docs/api/touch-bar-button">TouchBarButton</a> | <a href="https://electronjs.org/docs/api/touch-bar-color-picker">TouchBarColorPicker</a> | <a href="https://electronjs.org/docs/api/touch-bar-group">TouchBarGroup</a> | <a href="https://electronjs.org/docs/api/touch-bar-label">TouchBarLabel</a> | <a href="https://electronjs.org/docs/api/touch-bar-popover">TouchBarPopover</a> | <a href="https://electronjs.org/docs/api/touch-bar-scrubber">TouchBarScrubber</a> | <a href="https://electronjs.org/docs/api/touch-bar-segmented-control">TouchBarSegmentedControl</a> | <a href="https://electronjs.org/docs/api/touch-bar-slider">TouchBarSlider</a> | <a href="https://electronjs.org/docs/api/touch-bar-spacer">TouchBarSpacer</a>)[]</li>
<li><code>escapeItem</code> (<a href="https://electronjs.org/docs/api/touch-bar-button">TouchBarButton</a> | <a href="https://electronjs.org/docs/api/touch-bar-color-picker">TouchBarColorPicker</a> | <a href="https://electronjs.org/docs/api/touch-bar-group">TouchBarGroup</a> | <a href="https://electronjs.org/docs/api/touch-bar-label">TouchBarLabel</a> | <a href="https://electronjs.org/docs/api/touch-bar-popover">TouchBarPopover</a> | <a href="https://electronjs.org/docs/api/touch-bar-scrubber">TouchBarScrubber</a> | <a href="https://electronjs.org/docs/api/touch-bar-segmented-control">TouchBarSegmentedControl</a> | <a href="https://electronjs.org/docs/api/touch-bar-slider">TouchBarSlider</a> | <a href="https://electronjs.org/docs/api/touch-bar-spacer">TouchBarSpacer</a>) (optional)</li>
</ul>
</li>
</ul>
<p>Creates a new touch bar with the specified items. Use
<code>BrowserWindow.setTouchBar</code> to add the <code>TouchBar</code> to a window.</p>
<p><strong>Note:</strong> The TouchBar API is currently experimental and may change or be
removed in future Electron releases.</p>
<p><strong>Tip:</strong> If you don't have a MacBook with Touch Bar, you can use
<a href="https://github.com/sindresorhus/touch-bar-simulator">Touch Bar Simulator</a>
to test Touch Bar usage in your app.</p>
<h3 id="instance-properties"><a href="#instance-properties">Instance Properties</a><a class="header-link" href="#instance-properties" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The following properties are available on instances of <code>TouchBar</code>:</p>
<h4 id="touchbarescapeitem"><a href="#touchbarescapeitem"><code>touchBar.escapeItem</code></a><a class="header-link" href="#touchbarescapeitem" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>The <code>TouchBarButton</code> that will replace the "esc" button on the touch bar when set.
Setting to <code>null</code> restores the default "esc" button. Changing this value
immediately updates the escape item in the touch bar.</p>
<h2 id="examples"><a href="#examples">Examples</a><a class="header-link" href="#examples" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Below is an example of a simple slot machine touch bar game with a button
and some labels.</p>
<pre><code class="hljs language-javascript" id="_gw1zt7so"><span class="hljs-keyword">const</span> {app, BrowserWindow, TouchBar} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-keyword">const</span> {TouchBarLabel, TouchBarButton, TouchBarSpacer} = TouchBar

<span class="hljs-keyword">let</span> spinning = <span class="hljs-literal">false</span>

<span class="hljs-comment">// Reel labels</span>
<span class="hljs-keyword">const</span> reel1 = <span class="hljs-keyword">new</span> TouchBarLabel()
<span class="hljs-keyword">const</span> reel2 = <span class="hljs-keyword">new</span> TouchBarLabel()
<span class="hljs-keyword">const</span> reel3 = <span class="hljs-keyword">new</span> TouchBarLabel()

<span class="hljs-comment">// Spin result label</span>
<span class="hljs-keyword">const</span> result = <span class="hljs-keyword">new</span> TouchBarLabel()

<span class="hljs-comment">// Spin button</span>
<span class="hljs-keyword">const</span> spin = <span class="hljs-keyword">new</span> TouchBarButton({
  <span class="hljs-attr">label</span>: <span class="hljs-string">'🎰 Spin'</span>,
  <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">'#7851A9'</span>,
  <span class="hljs-attr">click</span>: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
    <span class="hljs-comment">// Ignore clicks if already spinning</span>
    <span class="hljs-keyword">if</span> (spinning) {
      <span class="hljs-keyword">return</span>
    }

    spinning = <span class="hljs-literal">true</span>
    result.label = <span class="hljs-string">''</span>

    <span class="hljs-keyword">let</span> timeout = <span class="hljs-number">10</span>
    <span class="hljs-keyword">const</span> spinLength = <span class="hljs-number">4</span> * <span class="hljs-number">1000</span> <span class="hljs-comment">// 4 seconds</span>
    <span class="hljs-keyword">const</span> startTime = <span class="hljs-built_in">Date</span>.now()

    <span class="hljs-keyword">const</span> spinReels = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
      updateReels()

      <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">Date</span>.now() - startTime) &gt;= spinLength) {
        finishSpin()
      } <span class="hljs-keyword">else</span> {
        <span class="hljs-comment">// Slow down a bit on each spin</span>
        timeout *= <span class="hljs-number">1.1</span>
        setTimeout(spinReels, timeout)
      }
    }

    spinReels()
  }
})

<span class="hljs-keyword">const</span> getRandomValue = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
  <span class="hljs-keyword">const</span> values = [<span class="hljs-string">'🍒'</span>, <span class="hljs-string">'💎'</span>, <span class="hljs-string">'7️⃣'</span>, <span class="hljs-string">'🍊'</span>, <span class="hljs-string">'🔔'</span>, <span class="hljs-string">'⭐'</span>, <span class="hljs-string">'🍇'</span>, <span class="hljs-string">'🍀'</span>]
  <span class="hljs-keyword">return</span> values[<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * values.length)]
}

<span class="hljs-keyword">const</span> updateReels = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
  reel1.label = getRandomValue()
  reel2.label = getRandomValue()
  reel3.label = getRandomValue()
}

<span class="hljs-keyword">const</span> finishSpin = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
  <span class="hljs-keyword">const</span> uniqueValues = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([reel1.label, reel2.label, reel3.label]).size
  <span class="hljs-keyword">if</span> (uniqueValues === <span class="hljs-number">1</span>) {
    <span class="hljs-comment">// All 3 values are the same</span>
    result.label = <span class="hljs-string">'💰 Jackpot!'</span>
    result.textColor = <span class="hljs-string">'#FDFF00'</span>
  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (uniqueValues === <span class="hljs-number">2</span>) {
    <span class="hljs-comment">// 2 values are the same</span>
    result.label = <span class="hljs-string">'😍 Winner!'</span>
    result.textColor = <span class="hljs-string">'#FDFF00'</span>
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-comment">// No values are the same</span>
    result.label = <span class="hljs-string">'🙁 Spin Again'</span>
    result.textColor = <span class="hljs-literal">null</span>
  }
  spinning = <span class="hljs-literal">false</span>
}

<span class="hljs-keyword">const</span> touchBar = <span class="hljs-keyword">new</span> TouchBar([
  spin,
  <span class="hljs-keyword">new</span> TouchBarSpacer({<span class="hljs-attr">size</span>: <span class="hljs-string">'large'</span>}),
  reel1,
  <span class="hljs-keyword">new</span> TouchBarSpacer({<span class="hljs-attr">size</span>: <span class="hljs-string">'small'</span>}),
  reel2,
  <span class="hljs-keyword">new</span> TouchBarSpacer({<span class="hljs-attr">size</span>: <span class="hljs-string">'small'</span>}),
  reel3,
  <span class="hljs-keyword">new</span> TouchBarSpacer({<span class="hljs-attr">size</span>: <span class="hljs-string">'large'</span>}),
  result
])

<span class="hljs-keyword">let</span> <span class="hljs-built_in">window</span>

app.once(<span class="hljs-string">'ready'</span>, () =&gt; {
  <span class="hljs-built_in">window</span> = <span class="hljs-keyword">new</span> BrowserWindow({
    <span class="hljs-attr">frame</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-attr">titleBarStyle</span>: <span class="hljs-string">'hiddenInset'</span>,
    <span class="hljs-attr">width</span>: <span class="hljs-number">200</span>,
    <span class="hljs-attr">height</span>: <span class="hljs-number">200</span>,
    <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">'#000'</span>
  })
  <span class="hljs-built_in">window</span>.loadURL(<span class="hljs-string">'about:blank'</span>)
  <span class="hljs-built_in">window</span>.setTouchBar(touchBar)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_gw1zt7so">Copy</button></pre>
<h3 id="running-the-above-example"><a href="#running-the-above-example">Running the above example</a><a class="header-link" href="#running-the-above-example" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>To run the example above, you'll need to (assuming you've got a terminal open in the directory you want to run the example):</p>
<ol>
<li>Save the above file to your computer as <code>touchbar.js</code></li>
<li>Install Electron via <code>npm install electron</code></li>
<li>Run the example inside Electron: <code>./node_modules/.bin/electron touchbar.js</code></li>
</ol>
<p>You should then see a new Electron window and the app running in your touch bar (or touch bar emulator).</p>

  <hr>
  <h2 id="class-touchbarbutton"><a href="#class-touchbarbutton">Class: TouchBarButton</a><a class="header-link" href="#class-touchbarbutton" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>Create a button in the touch bar for native macOS applications</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/tutorial/quick-start#main-process">Main</a></p>
<h3 id="new-touchbarbuttonoptions-experimental"><a href="#new-touchbarbuttonoptions-experimental"><code>new TouchBarButton(options)</code> <em>Experimental</em></a><a class="header-link" href="#new-touchbarbuttonoptions-experimental" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>label</code> String (optional) - Button text.</li>
<li><code>backgroundColor</code> String (optional) - Button background color in hex format,
i.e <code>#ABCDEF</code>.</li>
<li><code>icon</code> <a href="https://electronjs.org/docs/api/native-image">NativeImage</a> (optional) - Button icon.</li>
<li><code>iconPosition</code> String (optional) - Can be <code>left</code>, <code>right</code> or <code>overlay</code>.</li>
<li><code>click</code> Function (optional) - Function to call when the button is clicked.</li>
</ul>
</li>
</ul>
<h3 id="instance-properties"><a href="#instance-properties">Instance Properties</a><a class="header-link" href="#instance-properties" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The following properties are available on instances of <code>TouchBarButton</code>:</p>
<h4 id="touchbarbuttonlabel"><a href="#touchbarbuttonlabel"><code>touchBarButton.label</code></a><a class="header-link" href="#touchbarbuttonlabel" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>String</code> representing the button's current text. Changing this value immediately updates the button
in the touch bar.</p>
<h4 id="touchbarbuttonbackgroundcolor"><a href="#touchbarbuttonbackgroundcolor"><code>touchBarButton.backgroundColor</code></a><a class="header-link" href="#touchbarbuttonbackgroundcolor" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>String</code> hex code representing the button's current background color. Changing this value immediately updates
the button in the touch bar.</p>
<h4 id="touchbarbuttonicon"><a href="#touchbarbuttonicon"><code>touchBarButton.icon</code></a><a class="header-link" href="#touchbarbuttonicon" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>NativeImage</code> representing the button's current icon. Changing this value immediately updates the button
in the touch bar.</p>

  <hr>
  <h2 id="class-touchbarcolorpicker"><a href="#class-touchbarcolorpicker">Class: TouchBarColorPicker</a><a class="header-link" href="#class-touchbarcolorpicker" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>Create a color picker in the touch bar for native macOS applications</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/tutorial/quick-start#main-process">Main</a></p>
<h3 id="new-touchbarcolorpickeroptions-experimental"><a href="#new-touchbarcolorpickeroptions-experimental"><code>new TouchBarColorPicker(options)</code> <em>Experimental</em></a><a class="header-link" href="#new-touchbarcolorpickeroptions-experimental" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>availableColors</code> String<a href="https://electronjs.org/docs/api/optional"></a> - Array of hex color strings to
appear as possible colors to select.</li>
<li><code>selectedColor</code> String (optional) - The selected hex color in the picker,
i.e <code>#ABCDEF</code>.</li>
<li>
<p><code>change</code> Function (optional) - Function to call when a color is selected.</p>
<ul>
<li><code>color</code> String - The color that the user selected from the picker</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="instance-properties"><a href="#instance-properties">Instance Properties</a><a class="header-link" href="#instance-properties" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The following properties are available on instances of <code>TouchBarColorPicker</code>:</p>
<h4 id="touchbarcolorpickeravailablecolors"><a href="#touchbarcolorpickeravailablecolors"><code>touchBarColorPicker.availableColors</code></a><a class="header-link" href="#touchbarcolorpickeravailablecolors" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>String[]</code> array representing the color picker's available colors to select. Changing this value immediately
updates the color picker in the touch bar.</p>
<h4 id="touchbarcolorpickerselectedcolor"><a href="#touchbarcolorpickerselectedcolor"><code>touchBarColorPicker.selectedColor</code></a><a class="header-link" href="#touchbarcolorpickerselectedcolor" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>String</code> hex code representing the color picker's currently selected color. Changing this value immediately
updates the color picker in the touch bar.</p>

  <hr>
  <h2 id="class-touchbargroup"><a href="#class-touchbargroup">Class: TouchBarGroup</a><a class="header-link" href="#class-touchbargroup" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>Create a group in the touch bar for native macOS applications</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/tutorial/quick-start#main-process">Main</a></p>
<h3 id="new-touchbargroupoptions-experimental"><a href="#new-touchbargroupoptions-experimental"><code>new TouchBarGroup(options)</code> <em>Experimental</em></a><a class="header-link" href="#new-touchbargroupoptions-experimental" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>items</code> <a href="https://electronjs.org/docs/api/touch-bar">TouchBar</a> - Items to display as a group.</li>
</ul>
</li>
</ul>

  <hr>
  <h2 id="class-touchbarlabel"><a href="#class-touchbarlabel">Class: TouchBarLabel</a><a class="header-link" href="#class-touchbarlabel" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>Create a label in the touch bar for native macOS applications</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/tutorial/quick-start#main-process">Main</a></p>
<h3 id="new-touchbarlabeloptions-experimental"><a href="#new-touchbarlabeloptions-experimental"><code>new TouchBarLabel(options)</code> <em>Experimental</em></a><a class="header-link" href="#new-touchbarlabeloptions-experimental" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>label</code> String (optional) - Text to display.</li>
<li><code>textColor</code> String (optional) - Hex color of text, i.e <code>#ABCDEF</code>.</li>
</ul>
</li>
</ul>
<h3 id="instance-properties"><a href="#instance-properties">Instance Properties</a><a class="header-link" href="#instance-properties" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The following properties are available on instances of <code>TouchBarLabel</code>:</p>
<h4 id="touchbarlabellabel"><a href="#touchbarlabellabel"><code>touchBarLabel.label</code></a><a class="header-link" href="#touchbarlabellabel" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>String</code> representing the label's current text. Changing this value immediately updates the label in
the touch bar.</p>
<h4 id="touchbarlabeltextcolor"><a href="#touchbarlabeltextcolor"><code>touchBarLabel.textColor</code></a><a class="header-link" href="#touchbarlabeltextcolor" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>String</code> hex code representing the label's current text color. Changing this value immediately updates the
label in the touch bar.</p>

  <hr>
  <h2 id="class-touchbarpopover"><a href="#class-touchbarpopover">Class: TouchBarPopover</a><a class="header-link" href="#class-touchbarpopover" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>Create a popover in the touch bar for native macOS applications</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/tutorial/quick-start#main-process">Main</a></p>
<h3 id="new-touchbarpopoveroptions-experimental"><a href="#new-touchbarpopoveroptions-experimental"><code>new TouchBarPopover(options)</code> <em>Experimental</em></a><a class="header-link" href="#new-touchbarpopoveroptions-experimental" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>label</code> String (optional) - Popover button text.</li>
<li><code>icon</code> <a href="https://electronjs.org/docs/api/native-image">NativeImage</a> (optional) - Popover button icon.</li>
<li><code>items</code> <a href="https://electronjs.org/docs/api/touch-bar">TouchBar</a> (optional) - Items to display in the popover.</li>
<li><code>showCloseButton</code> Boolean (optional) - <code>true</code> to display a close button
on the left of the popover, <code>false</code> to not show it. Default is <code>true</code>.</li>
</ul>
</li>
</ul>
<h3 id="instance-properties"><a href="#instance-properties">Instance Properties</a><a class="header-link" href="#instance-properties" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The following properties are available on instances of <code>TouchBarPopover</code>:</p>
<h4 id="touchbarpopoverlabel"><a href="#touchbarpopoverlabel"><code>touchBarPopover.label</code></a><a class="header-link" href="#touchbarpopoverlabel" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>String</code> representing the popover's current button text. Changing this value immediately updates the
popover in the touch bar.</p>
<h4 id="touchbarpopovericon"><a href="#touchbarpopovericon"><code>touchBarPopover.icon</code></a><a class="header-link" href="#touchbarpopovericon" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>NativeImage</code> representing the popover's current button icon. Changing this value immediately updates the
popover in the touch bar.</p>

  <hr>
  <h2 id="class-touchbarscrubber"><a href="#class-touchbarscrubber">Class: TouchBarScrubber</a><a class="header-link" href="#class-touchbarscrubber" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>Create a scrubber (a scrollable selector)</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/tutorial/quick-start#main-process">Main</a></p>
<h3 id="new-touchbarscrubberoptions-experimental"><a href="#new-touchbarscrubberoptions-experimental"><code>new TouchBarScrubber(options)</code> <em>Experimental</em></a><a class="header-link" href="#new-touchbarscrubberoptions-experimental" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>items</code> <a href="https://electronjs.org/docs/api/structures/scrubber-item">ScrubberItem[]</a> - An array of items to place in this scrubber</li>
<li>
<p><code>select</code> Function - Called when the user taps an item that was not the last tapped item</p>
<ul>
<li><code>selectedIndex</code> Integer - The index of the item the user selected</li>
</ul>
</li>
<li>
<p><code>highlight</code> Function - Called when the user taps any item</p>
<ul>
<li><code>highlightedIndex</code> Integer - The index of the item the user touched</li>
</ul>
</li>
<li><code>selectedStyle</code> String - Selected item style. Defaults to <code>null</code>.</li>
<li><code>overlayStyle</code> String - Selected overlay item style. Defaults to <code>null</code>.</li>
<li><code>showArrowButtons</code> Boolean - Defaults to <code>false</code>.</li>
<li><code>mode</code> String - Defaults to <code>free</code>.</li>
<li><code>continuous</code> Boolean - Defaults to <code>true</code>.</li>
</ul>
</li>
</ul>
<h3 id="instance-properties"><a href="#instance-properties">Instance Properties</a><a class="header-link" href="#instance-properties" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The following properties are available on instances of <code>TouchBarScrubber</code>:</p>
<h4 id="touchbarscrubberitems"><a href="#touchbarscrubberitems"><code>touchBarScrubber.items</code></a><a class="header-link" href="#touchbarscrubberitems" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>ScrubberItem[]</code> array representing the items in this scrubber. Updating this value immediately
updates the control in the touch bar. Updating deep properties inside this array <strong>does not update the touch bar</strong>.</p>
<h4 id="touchbarscrubberselectedstyle"><a href="#touchbarscrubberselectedstyle"><code>touchBarScrubber.selectedStyle</code></a><a class="header-link" href="#touchbarscrubberselectedstyle" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>String</code> representing the style that selected items in the scrubber should have. Updating this value immediately
updates the control in the touch bar.  Possible values:</p>
<ul>
<li><code>background</code> - Maps to <code>[NSScrubberSelectionStyle roundedBackgroundStyle]</code></li>
<li><code>outline</code> - Maps to <code>[NSScrubberSelectionStyle outlineOverlayStyle]</code></li>
<li><code>null</code> - Actually null, not a string, removes all styles</li>
</ul>
<h4 id="touchbarscrubberoverlaystyle"><a href="#touchbarscrubberoverlaystyle"><code>touchBarScrubber.overlayStyle</code></a><a class="header-link" href="#touchbarscrubberoverlaystyle" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>String</code> representing the style that selected items in the scrubber should have. This style is overlayed on top
of the scrubber item instead of being placed behind it. Updating this value immediately updates the control in the
touch bar.  Possible values:</p>
<ul>
<li><code>background</code> - Maps to <code>[NSScrubberSelectionStyle roundedBackgroundStyle]</code></li>
<li><code>outline</code> - Maps to <code>[NSScrubberSelectionStyle outlineOverlayStyle]</code></li>
<li><code>null</code> - Actually null, not a string, removes all styles</li>
</ul>
<h4 id="touchbarscrubbershowarrowbuttons"><a href="#touchbarscrubbershowarrowbuttons"><code>touchBarScrubber.showArrowButtons</code></a><a class="header-link" href="#touchbarscrubbershowarrowbuttons" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>Boolean</code> representing whether to show the left / right selection arrows in this scrubber. Updating this value
immediately updates the control in the touch bar.  </p>
<h4 id="touchbarscrubbermode"><a href="#touchbarscrubbermode"><code>touchBarScrubber.mode</code></a><a class="header-link" href="#touchbarscrubbermode" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>String</code> representing the mode of this scrubber. Updating this value immediately
updates the control in the touch bar. Possible values:</p>
<ul>
<li><code>fixed</code> - Maps to <code>NSScrubberModeFixed</code></li>
<li><code>free</code> - Maps to <code>NSScrubberModeFree</code></li>
</ul>
<h4 id="touchbarscrubbercontinuous"><a href="#touchbarscrubbercontinuous"><code>touchBarScrubber.continuous</code></a><a class="header-link" href="#touchbarscrubbercontinuous" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>Boolean</code> representing whether this scrubber is continuous or not. Updating this value immediately
updates the control in the touch bar.</p>

  <hr>
  <h2 id="class-touchbarsegmentedcontrol"><a href="#class-touchbarsegmentedcontrol">Class: TouchBarSegmentedControl</a><a class="header-link" href="#class-touchbarsegmentedcontrol" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>Create a segmented control (a button group) where one button has a selected state</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/tutorial/quick-start#main-process">Main</a></p>
<h3 id="new-touchbarsegmentedcontroloptions-experimental"><a href="#new-touchbarsegmentedcontroloptions-experimental"><code>new TouchBarSegmentedControl(options)</code> <em>Experimental</em></a><a class="header-link" href="#new-touchbarsegmentedcontroloptions-experimental" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li>
<p><code>segmentStyle</code> String - (optional) Style of the segments:</p>
<ul>
<li><code>automatic</code> - Default. The appearance of the segmented control is
automatically determined based on the type of window in which the control
is displayed and the position within the window.</li>
<li><code>rounded</code> - The control is displayed using the rounded style.</li>
<li><code>textured-rounded</code> - The control is displayed using the textured rounded
style.</li>
<li><code>round-rect</code> - The control is displayed using the round rect style.</li>
<li><code>textured-square</code> - The control is displayed using the textured square
style.</li>
<li><code>capsule</code> - The control is displayed using the capsule style</li>
<li><code>small-square</code> - The control is displayed using the small square style.</li>
<li><code>separated</code> - The segments in the control are displayed very close to each
other but not touching.</li>
</ul>
</li>
<li>
<p><code>mode</code> String - (optional) The selection mode of the control:</p>
<ul>
<li><code>single</code> - Default. One item selected at a time, selecting one deselects the previously selected item.</li>
<li><code>multiple</code> - Multiple items can be selected at a time.</li>
<li><code>buttons</code> - Make the segments act as buttons, each segment can be pressed and released but never marked as active.</li>
</ul>
</li>
<li><code>segments</code> <a href="https://electronjs.org/docs/api/structures/segmented-control-segment">SegmentedControlSegment[]</a> - An array of segments to place in this control.</li>
<li><code>selectedIndex</code> Integer (optional) - The index of the 
currently selected segment, will update automatically with user 
interaction.  When the mode is multiple it will be the last selected 
item.</li>
<li>
<p><code>change</code> Function - Called when the user selects a new segment</p>
<ul>
<li><code>selectedIndex</code> Integer - The index of the segment the user selected.</li>
<li><code>isSelected</code> Boolean - Whether as a result of user selection the segment is selected or not.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="instance-properties"><a href="#instance-properties">Instance Properties</a><a class="header-link" href="#instance-properties" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The following properties are available on instances of <code>TouchBarSegmentedControl</code>:</p>
<h4 id="touchbarsegmentedcontrolsegmentstyle"><a href="#touchbarsegmentedcontrolsegmentstyle"><code>touchBarSegmentedControl.segmentStyle</code></a><a class="header-link" href="#touchbarsegmentedcontrolsegmentstyle" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>String</code> representing the controls current segment style.  Updating this value immediately updates the control
in the touch bar.</p>
<h4 id="touchbarsegmentedcontrolsegments"><a href="#touchbarsegmentedcontrolsegments"><code>touchBarSegmentedControl.segments</code></a><a class="header-link" href="#touchbarsegmentedcontrolsegments" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>SegmentedControlSegment[]</code> array representing the segments in this control.  Updating this value immediately
updates the control in the touch bar.  Updating deep properties inside this array <strong>does not update the touch bar</strong>.</p>
<h4 id="touchbarsegmentedcontrolselectedindex"><a href="#touchbarsegmentedcontrolselectedindex"><code>touchBarSegmentedControl.selectedIndex</code></a><a class="header-link" href="#touchbarsegmentedcontrolselectedindex" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>An <code>Integer</code> representing the currently selected segment.  Changing this value immediately updates the control
in the touch bar.  User interaction with the touch bar will update this value automatically.</p>

  <hr>
  <h2 id="class-touchbarslider"><a href="#class-touchbarslider">Class: TouchBarSlider</a><a class="header-link" href="#class-touchbarslider" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>Create a slider in the touch bar for native macOS applications</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/tutorial/quick-start#main-process">Main</a></p>
<h3 id="new-touchbarslideroptions-experimental"><a href="#new-touchbarslideroptions-experimental"><code>new TouchBarSlider(options)</code> <em>Experimental</em></a><a class="header-link" href="#new-touchbarslideroptions-experimental" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>label</code> String (optional) - Label text.</li>
<li><code>value</code> Integer (optional) - Selected value.</li>
<li><code>minValue</code> Integer (optional) - Minimum value.</li>
<li><code>maxValue</code> Integer (optional) - Maximum value.</li>
<li>
<p><code>change</code> Function (optional) - Function to call when the slider is changed.</p>
<ul>
<li><code>newValue</code> Number - The value that the user selected on the Slider</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="instance-properties"><a href="#instance-properties">Instance Properties</a><a class="header-link" href="#instance-properties" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The following properties are available on instances of <code>TouchBarSlider</code>:</p>
<h4 id="touchbarsliderlabel"><a href="#touchbarsliderlabel"><code>touchBarSlider.label</code></a><a class="header-link" href="#touchbarsliderlabel" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>String</code> representing the slider's current text. Changing this value immediately updates the slider
in the touch bar.</p>
<h4 id="touchbarslidervalue"><a href="#touchbarslidervalue"><code>touchBarSlider.value</code></a><a class="header-link" href="#touchbarslidervalue" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>Number</code> representing the slider's current value. Changing this value immediately updates the slider
in the touch bar.</p>
<h4 id="touchbarsliderminvalue"><a href="#touchbarsliderminvalue"><code>touchBarSlider.minValue</code></a><a class="header-link" href="#touchbarsliderminvalue" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>Number</code> representing the slider's current minimum value. Changing this value immediately updates the
slider in the touch bar.</p>
<h4 id="touchbarslidermaxvalue"><a href="#touchbarslidermaxvalue"><code>touchBarSlider.maxValue</code></a><a class="header-link" href="#touchbarslidermaxvalue" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>Number</code> representing the slider's current maximum value. Changing this value immediately updates the
slider in the touch bar.</p>

  <hr>
  <h2 id="class-touchbarspacer"><a href="#class-touchbarspacer">Class: TouchBarSpacer</a><a class="header-link" href="#class-touchbarspacer" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>Create a spacer between two items in the touch bar for native macOS applications</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/tutorial/quick-start#main-process">Main</a></p>
<h3 id="new-touchbarspaceroptions-experimental"><a href="#new-touchbarspaceroptions-experimental"><code>new TouchBarSpacer(options)</code> <em>Experimental</em></a><a class="header-link" href="#new-touchbarspaceroptions-experimental" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li>
<p><code>size</code> String (optional) - Size of spacer, possible values are:</p>
<ul>
<li><code>small</code> - Small space between items.</li>
<li><code>large</code> - Large space between items.</li>
<li><code>flexible</code> - Take up all available space.</li>
</ul>
</li>
</ul>
</li>
</ul>

  <hr>
  <h2 id="class-tray"><a href="#class-tray">Class: Tray</a><a class="header-link" href="#class-tray" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>Add icons and context menus to the system's notification area.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<p><code>Tray</code> is an <a href="https://nodejs.org/api/events.html#events_class_eventemitter">EventEmitter</a>.</p>
<pre><code class="hljs language-javascript" id="_iwemlp6"><span class="hljs-keyword">const</span> {app, Menu, Tray} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-keyword">let</span> tray = <span class="hljs-literal">null</span>
app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  tray = <span class="hljs-keyword">new</span> Tray(<span class="hljs-string">'/path/to/my/icon'</span>)
  <span class="hljs-keyword">const</span> contextMenu = Menu.buildFromTemplate([
    {<span class="hljs-attr">label</span>: <span class="hljs-string">'Item1'</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">'radio'</span>},
    {<span class="hljs-attr">label</span>: <span class="hljs-string">'Item2'</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">'radio'</span>},
    {<span class="hljs-attr">label</span>: <span class="hljs-string">'Item3'</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">'radio'</span>, <span class="hljs-attr">checked</span>: <span class="hljs-literal">true</span>},
    {<span class="hljs-attr">label</span>: <span class="hljs-string">'Item4'</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">'radio'</span>}
  ])
  tray.setToolTip(<span class="hljs-string">'This is my application.'</span>)
  tray.setContextMenu(contextMenu)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_iwemlp6">Copy</button></pre>
<p><strong>Platform limitations:</strong></p>
<ul>
<li>On Linux the app indicator will be used if it is supported, otherwise
<code>GtkStatusIcon</code> will be used instead.</li>
<li>On Linux distributions that only have app indicator support, you have to
install <code>libappindicator1</code> to make the tray icon work.</li>
<li>App indicator will only be shown when it has a context menu.</li>
<li>When app indicator is used on Linux, the <code>click</code> event is ignored.</li>
<li>On Linux in order for changes made to individual <code>MenuItem</code>s to take effect,
you have to call <code>setContextMenu</code> again. For example:</li>
</ul>
<pre><code class="hljs language-javascript" id="_hylb9oay"><span class="hljs-keyword">const</span> {app, Menu, Tray} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-keyword">let</span> appIcon = <span class="hljs-literal">null</span>
app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  appIcon = <span class="hljs-keyword">new</span> Tray(<span class="hljs-string">'/path/to/my/icon'</span>)
  <span class="hljs-keyword">const</span> contextMenu = Menu.buildFromTemplate([
    {<span class="hljs-attr">label</span>: <span class="hljs-string">'Item1'</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">'radio'</span>},
    {<span class="hljs-attr">label</span>: <span class="hljs-string">'Item2'</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">'radio'</span>}
  ])

  <span class="hljs-comment">// Make a change to the context menu</span>
  contextMenu.items[<span class="hljs-number">1</span>].checked = <span class="hljs-literal">false</span>

  <span class="hljs-comment">// Call this again for Linux because we modified the context menu</span>
  appIcon.setContextMenu(contextMenu)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_hylb9oay">Copy</button></pre>
<ul>
<li>On Windows it is recommended to use <code>ICO</code> icons to get best visual effects.</li>
</ul>
<p>If you want to keep exact same behaviors on all platforms, you should not
rely on the <code>click</code> event and always attach a context menu to the tray icon.</p>
<h3 id="new-trayimage"><a href="#new-trayimage"><code>new Tray(image)</code></a><a class="header-link" href="#new-trayimage" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>image</code> (<a href="https://electronjs.org/docs/api/native-image">NativeImage</a> | String)</li>
</ul>
<p>Creates a new tray icon associated with the <code>image</code>.</p>
<h3 id="instance-events"><a href="#instance-events">Instance Events</a><a class="header-link" href="#instance-events" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The <code>Tray</code> module emits the following events:</p>
<h4 id="event-click"><a href="#event-click">Event: 'click'</a><a class="header-link" href="#event-click" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>event</code> Event</p>
<ul>
<li><code>altKey</code> Boolean</li>
<li><code>shiftKey</code> Boolean</li>
<li><code>ctrlKey</code> Boolean</li>
<li><code>metaKey</code> Boolean</li>
</ul>
</li>
<li><code>bounds</code> <a href="https://electronjs.org/docs/api/structures/rectangle">Rectangle</a> - The bounds of tray icon</li>
<li><code>position</code> <a href="https://electronjs.org/docs/api/structures/point">Point</a> - The position of the event</li>
</ul>
<p>Emitted when the tray icon is clicked.</p>
<h4 id="event-right-click-macos-windows"><a href="#event-right-click-macos-windows">Event: 'right-click' <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#event-right-click-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>event</code> Event</p>
<ul>
<li><code>altKey</code> Boolean</li>
<li><code>shiftKey</code> Boolean</li>
<li><code>ctrlKey</code> Boolean</li>
<li><code>metaKey</code> Boolean</li>
</ul>
</li>
<li><code>bounds</code> <a href="https://electronjs.org/docs/api/structures/rectangle">Rectangle</a> - The bounds of tray icon</li>
</ul>
<p>Emitted when the tray icon is right clicked.</p>
<h4 id="event-double-click-macos-windows"><a href="#event-double-click-macos-windows">Event: 'double-click' <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#event-double-click-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>event</code> Event</p>
<ul>
<li><code>altKey</code> Boolean</li>
<li><code>shiftKey</code> Boolean</li>
<li><code>ctrlKey</code> Boolean</li>
<li><code>metaKey</code> Boolean</li>
</ul>
</li>
<li><code>bounds</code> <a href="https://electronjs.org/docs/api/structures/rectangle">Rectangle</a> - The bounds of tray icon</li>
</ul>
<p>Emitted when the tray icon is double clicked.</p>
<h4 id="event-balloon-show-windows"><a href="#event-balloon-show-windows">Event: 'balloon-show' <em class="platform-label">Windows</em></a><a class="header-link" href="#event-balloon-show-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the tray balloon shows.</p>
<h4 id="event-balloon-click-windows"><a href="#event-balloon-click-windows">Event: 'balloon-click' <em class="platform-label">Windows</em></a><a class="header-link" href="#event-balloon-click-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the tray balloon is clicked.</p>
<h4 id="event-balloon-closed-windows"><a href="#event-balloon-closed-windows">Event: 'balloon-closed' <em class="platform-label">Windows</em></a><a class="header-link" href="#event-balloon-closed-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the tray balloon is closed because of timeout or user manually
closes it.</p>
<h4 id="event-drop-macos"><a href="#event-drop-macos">Event: 'drop' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-drop-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when any dragged items are dropped on the tray icon.</p>
<h4 id="event-drop-files-macos"><a href="#event-drop-files-macos">Event: 'drop-files' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-drop-files-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>event</code> Event</li>
<li><code>files</code> String[] - The paths of the dropped files.</li>
</ul>
<p>Emitted when dragged files are dropped in the tray icon.</p>
<h4 id="event-drop-text-macos"><a href="#event-drop-text-macos">Event: 'drop-text' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-drop-text-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>event</code> Event</li>
<li><code>text</code> String - the dropped text string</li>
</ul>
<p>Emitted when dragged text is dropped in the tray icon.</p>
<h4 id="event-drag-enter-macos"><a href="#event-drag-enter-macos">Event: 'drag-enter' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-drag-enter-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when a drag operation enters the tray icon.</p>
<h4 id="event-drag-leave-macos"><a href="#event-drag-leave-macos">Event: 'drag-leave' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-drag-leave-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when a drag operation exits the tray icon.</p>
<h4 id="event-drag-end-macos"><a href="#event-drag-end-macos">Event: 'drag-end' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-drag-end-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when a drag operation ends on the tray or ends at another location.</p>
<h4 id="event-mouse-enter-macos"><a href="#event-mouse-enter-macos">Event: 'mouse-enter' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-mouse-enter-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>event</code> Event</p>
<ul>
<li><code>altKey</code> Boolean</li>
<li><code>shiftKey</code> Boolean</li>
<li><code>ctrlKey</code> Boolean</li>
<li><code>metaKey</code> Boolean</li>
</ul>
</li>
<li><code>position</code> <a href="https://electronjs.org/docs/api/structures/point">Point</a> - The position of the event</li>
</ul>
<p>Emitted when the mouse enters the tray icon.</p>
<h4 id="event-mouse-leave-macos"><a href="#event-mouse-leave-macos">Event: 'mouse-leave' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-mouse-leave-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>event</code> Event</p>
<ul>
<li><code>altKey</code> Boolean</li>
<li><code>shiftKey</code> Boolean</li>
<li><code>ctrlKey</code> Boolean</li>
<li><code>metaKey</code> Boolean</li>
</ul>
</li>
<li><code>position</code> <a href="https://electronjs.org/docs/api/structures/point">Point</a> - The position of the event</li>
</ul>
<p>Emitted when the mouse exits the tray icon.</p>
<h4 id="event-mouse-move-macos"><a href="#event-mouse-move-macos">Event: 'mouse-move' <em class="platform-label">macOS</em></a><a class="header-link" href="#event-mouse-move-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>event</code> Event</p>
<ul>
<li><code>altKey</code> Boolean</li>
<li><code>shiftKey</code> Boolean</li>
<li><code>ctrlKey</code> Boolean</li>
<li><code>metaKey</code> Boolean</li>
</ul>
</li>
<li><code>position</code> <a href="https://electronjs.org/docs/api/structures/point">Point</a> - The position of the event</li>
</ul>
<p>Emitted when the mouse moves in the tray icon.</p>
<h3 id="instance-methods"><a href="#instance-methods">Instance Methods</a><a class="header-link" href="#instance-methods" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The <code>Tray</code> class has the following methods:</p>
<h4 id="traydestroy"><a href="#traydestroy"><code>tray.destroy()</code></a><a class="header-link" href="#traydestroy" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Destroys the tray icon immediately.</p>
<h4 id="traysetimageimage"><a href="#traysetimageimage"><code>tray.setImage(image)</code></a><a class="header-link" href="#traysetimageimage" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>image</code> (<a href="https://electronjs.org/docs/api/native-image">NativeImage</a> | String)</li>
</ul>
<p>Sets the <code>image</code> associated with this tray icon.</p>
<h4 id="traysetpressedimageimage-macos"><a href="#traysetpressedimageimage-macos"><code>tray.setPressedImage(image)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#traysetpressedimageimage-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>image</code> <a href="https://electronjs.org/docs/api/native-image">NativeImage</a></li>
</ul>
<p>Sets the <code>image</code> associated with this tray icon when pressed on macOS.</p>
<h4 id="traysettooltiptooltip"><a href="#traysettooltiptooltip"><code>tray.setToolTip(toolTip)</code></a><a class="header-link" href="#traysettooltiptooltip" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>toolTip</code> String</li>
</ul>
<p>Sets the hover text for this tray icon.</p>
<h4 id="traysettitletitle-macos"><a href="#traysettitletitle-macos"><code>tray.setTitle(title)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#traysettitletitle-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>title</code> String</li>
</ul>
<p>Sets the title displayed aside of the tray icon in the status bar.</p>
<h4 id="traysethighlightmodemode-macos"><a href="#traysethighlightmodemode-macos"><code>tray.setHighlightMode(mode)</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#traysethighlightmodemode-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>mode</code> String - Highlight mode with one of the following values:</p>
<ul>
<li><code>selection</code> - Highlight the tray icon when it is clicked and also when
its context menu is open. This is the default.</li>
<li><code>always</code> - Always highlight the tray icon.</li>
<li><code>never</code> - Never highlight the tray icon.</li>
</ul>
</li>
</ul>
<p>Sets when the tray's icon background becomes highlighted (in blue).</p>
<p><strong>Note:</strong> You can use <code>highlightMode</code> with a <a href="https://electronjs.org/docs/api/browser-window"><code>BrowserWindow</code></a>
by toggling between <code>'never'</code> and <code>'always'</code> modes when the window visibility
changes.</p>
<pre><code class="hljs language-javascript" id="_6sectgbh"><span class="hljs-keyword">const</span> {BrowserWindow, Tray} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-keyword">const</span> win = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">width</span>: <span class="hljs-number">800</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">600</span>})
<span class="hljs-keyword">const</span> tray = <span class="hljs-keyword">new</span> Tray(<span class="hljs-string">'/path/to/my/icon'</span>)

tray.on(<span class="hljs-string">'click'</span>, () =&gt; {
  win.isVisible() ? win.hide() : win.show()
})
win.on(<span class="hljs-string">'show'</span>, () =&gt; {
  tray.setHighlightMode(<span class="hljs-string">'always'</span>)
})
win.on(<span class="hljs-string">'hide'</span>, () =&gt; {
  tray.setHighlightMode(<span class="hljs-string">'never'</span>)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_6sectgbh">Copy</button></pre>
<h4 id="traydisplayballoonoptions-windows"><a href="#traydisplayballoonoptions-windows"><code>tray.displayBalloon(options)</code> <em class="platform-label">Windows</em></a><a class="header-link" href="#traydisplayballoonoptions-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>icon</code> (<a href="https://electronjs.org/docs/api/native-image">NativeImage</a> | String) - (optional)</li>
<li><code>title</code> String</li>
<li><code>content</code> String</li>
</ul>
</li>
</ul>
<p>Displays a tray balloon.</p>
<h4 id="traypopupcontextmenumenu-position-macos-windows"><a href="#traypopupcontextmenumenu-position-macos-windows"><code>tray.popUpContextMenu([menu, position])</code> <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#traypopupcontextmenumenu-position-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>menu</code> Menu (optional)</li>
<li><code>position</code> <a href="https://electronjs.org/docs/api/structures/point">Point</a> (optional) - The pop up position.</li>
</ul>
<p>Pops up the context menu of the tray icon. When <code>menu</code> is passed, the <code>menu</code> will
be shown instead of the tray icon's context menu.</p>
<p>The <code>position</code> is only available on Windows, and it is (0, 0) by default.</p>
<h4 id="traysetcontextmenumenu"><a href="#traysetcontextmenumenu"><code>tray.setContextMenu(menu)</code></a><a class="header-link" href="#traysetcontextmenumenu" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>menu</code> Menu</li>
</ul>
<p>Sets the context menu for this icon.</p>
<h4 id="traygetbounds-macos-windows"><a href="#traygetbounds-macos-windows"><code>tray.getBounds()</code> <em class="platform-label">macOS</em> <em class="platform-label">Windows</em></a><a class="header-link" href="#traygetbounds-macos-windows" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <a href="https://electronjs.org/docs/api/structures/rectangle"><code>Rectangle</code></a></p>
<p>The <code>bounds</code> of this tray icon as <code>Object</code>.</p>
<h4 id="trayisdestroyed"><a href="#trayisdestroyed"><code>tray.isDestroyed()</code></a><a class="header-link" href="#trayisdestroyed" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the tray icon is destroyed.</p>

  <hr>
  <h1 id="updating-applications"><a href="#updating-applications">Updating Applications</a><a class="header-link" href="#updating-applications" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>There are several ways to update an Electron application. The easiest and
officially supported one is taking advantage of the built-in
<a href="https://github.com/Squirrel">Squirrel</a> framework and
Electron's <a href="https://electronjs.org/docs/api/auto-updater">autoUpdater</a> module.</p>
<h2 id="deploying-an-update-server"><a href="#deploying-an-update-server">Deploying an update server</a><a class="header-link" href="#deploying-an-update-server" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>To get started, you first need to deploy a server that the
<a href="https://electronjs.org/docs/api/auto-updater">autoUpdater</a> module will download new updates from.</p>
<p>Depending on your needs, you can choose from one of these:</p>
<ul>
<li><a href="https://github.com/zeit/hazel">Hazel</a> – Update server for private or open-source apps. Can be deployed for free on <a href="https://zeit.co/now">Now</a> (using a single command), pulls from <a href="https://help.github.com/articles/creating-releases/">GitHub Releases</a> and leverages the power of GitHub's CDN.</li>
<li><a href="https://github.com/GitbookIO/nuts">Nuts</a> – Also uses
<a href="https://help.github.com/articles/creating-releases/">GitHub Releases</a>,
but caches app updates on disk and supports private repositories.</li>
<li><a href="https://github.com/ArekSredzki/electron-release-server">electron-release-server</a> – Provides a dashboard for handling releases</li>
<li><a href="https://github.com/atlassian/nucleus">Nucleus</a> – A 
complete update server for Electron apps maintained by Atlassian. 
Supports multiple applications and channels; uses a static file store to
 minify server cost.</li>
</ul>
<p>If your app is packaged with <a href="https://github.com/electron-userland/electron-builder">electron-builder</a> you can use the
<a href="https://www.electron.build/auto-update">electron-updater</a> module, which does not require a server and allows for updates
from S3, GitHub or any other static file host.</p>
<h2 id="implementing-updates-in-your-app"><a href="#implementing-updates-in-your-app">Implementing updates in your app</a><a class="header-link" href="#implementing-updates-in-your-app" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Once you've deployed your update server, continue with importing the required
modules in your code. The following code might vary for different server
software, but it works like described when using
<a href="https://github.com/zeit/hazel">Hazel</a>.</p>
<p><strong>Important:</strong> Please ensure that the code below will only be executed in
your packaged app, and not in development. You can use
<a href="https://github.com/sindresorhus/electron-is-dev">electron-is-dev</a> to check for
the environment.</p>
<pre><code class="hljs language-js" id="_rfgqo15"><span class="hljs-keyword">const</span> {app, autoUpdater, dialog} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_rfgqo15">Copy</button></pre>
<p>Next, construct the URL of the update server and tell
<a href="https://electronjs.org/docs/api/auto-updater">autoUpdater</a> about it:</p>
<pre><code class="hljs language-js" id="_dairutbd"><span class="hljs-keyword">const</span> server = <span class="hljs-string">'https://your-deployment-url.com'</span>
<span class="hljs-keyword">const</span> feed = <span class="hljs-string">`<span class="hljs-subst">${server}</span>/update/<span class="hljs-subst">${process.platform}</span>/<span class="hljs-subst">${app.getVersion()}</span>`</span>

autoUpdater.setFeedURL(feed)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_dairutbd">Copy</button></pre>
<p>As the final step, check for updates. The example below will check every minute:</p>
<pre><code class="hljs language-js" id="_f2mf03ka">setInterval(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
  autoUpdater.checkForUpdates()
}, <span class="hljs-number">60000</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_f2mf03ka">Copy</button></pre>
<p>Once your application is <a href="https://electronjs.org/docs/tutorial/application-distribution">packaged</a>,
it will receive an update for each new
<a href="https://help.github.com/articles/creating-releases/">GitHub Release</a> that you
publish.</p>
<h2 id="applying-updates"><a href="#applying-updates">Applying updates</a><a class="header-link" href="#applying-updates" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Now that you've configured the basic update mechanism for your application, you
need to ensure that the user will get notified when there's an update. This
can be achieved using the autoUpdater API
<a href="https://electronjs.org/docs/api/auto-updater#events">events</a>:</p>
<pre><code class="hljs language-js" id="_xtkbuy">autoUpdater.on(<span class="hljs-string">'update-downloaded'</span>, (event, releaseNotes, releaseName) =&gt; {
  <span class="hljs-keyword">const</span> dialogOpts = {
    <span class="hljs-attr">type</span>: <span class="hljs-string">'info'</span>,
    <span class="hljs-attr">buttons</span>: [<span class="hljs-string">'Restart'</span>, <span class="hljs-string">'Later'</span>],
    <span class="hljs-attr">title</span>: <span class="hljs-string">'Application Update'</span>,
    <span class="hljs-attr">message</span>: process.platform === <span class="hljs-string">'win32'</span> ? releaseNotes : releaseName,
    <span class="hljs-attr">detail</span>: <span class="hljs-string">'A new version has been downloaded. Restart the application to apply the updates.'</span>
  }

  dialog.showMessageBox(dialogOpts, (response) =&gt; {
    <span class="hljs-keyword">if</span> (response === <span class="hljs-number">0</span>) autoUpdater.quitAndInstall()
  })
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_xtkbuy">Copy</button></pre>
<p>Also make sure that errors are
<a href="https://electronjs.org/docs/api/auto-updater#event-error">being handled</a>. Here's an example
for logging them to <code>stderr</code>:</p>
<pre><code class="hljs language-js" id="_yyz1lnkk">autoUpdater.on(<span class="hljs-string">'error'</span>, message =&gt; {
  <span class="hljs-built_in">console</span>.error(<span class="hljs-string">'There was a problem updating the application'</span>)
  <span class="hljs-built_in">console</span>.error(message)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_yyz1lnkk">Copy</button></pre>

  <hr>
  <h1 id="upgrading-chromium"><a href="#upgrading-chromium">Upgrading Chromium</a><a class="header-link" href="#upgrading-chromium" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>This is an overview of the steps needed to upgrade Chromium in Electron.</p>
<ul>
<li>Upgrade libcc to a new Chromium version</li>
<li>Make Electron code compatible with the new libcc</li>
<li>Update Electron dependencies (crashpad, NodeJS, etc.) if needed</li>
<li>Make internal builds of libcc and electron</li>
<li>Update Electron docs if necessary</li>
</ul>
<h2 id="upgrade-libcc-to-a-new-chromium-version"><a href="#upgrade-libcc-to-a-new-chromium-version">Upgrade <code>libcc</code> to a new Chromium version</a><a class="header-link" href="#upgrade-libcc-to-a-new-chromium-version" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<ol>
<li>
<p>Get the code and initialize the project:</p>
<pre><code class="hljs language-sh" id="_e134pgns">$ git <span class="hljs-built_in">clone</span> git@github.com:electron/libchromiumcontent.git
$ <span class="hljs-built_in">cd</span> libchromiumcontent
$ ./script/bootstrap -v</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_e134pgns">Copy</button></pre>
</li>
<li>Update the Chromium snapshot</li>
</ol>
<ul>
<li>
<p>Choose a version number from <a href="https://omahaproxy.appspot.com/">OmahaProxy</a>
and update the <code>VERSION</code> file with it</p>
<ul>
<li>This can be done manually by visiting OmahaProxy in a browser, or automatically:</li>
<li>One-liner for the latest stable mac version: <code>curl -so- https://omahaproxy.appspot.com/mac &gt; VERSION</code></li>
<li>One-liner for the latest win64 beta version: <code>curl -so- https://omahaproxy.appspot.com/all | grep "win64,beta" | awk -F, 'NR==1{print $3}' &gt; VERSION</code></li>
</ul>
</li>
<li>
<p>run <code>$ ./script/update</code></p>
<ul>
<li>Brew some tea -- this may run for 30m or more.</li>
<li>It will probably fail applying patches.</li>
</ul>
</li>
</ul>
<ol start="3">
<li>Fix <code>*.patch</code> files in the <code>patches/</code> and <code>patches-mas/</code> folders.</li>
<li>(Optional) <code>script/update</code> applies patches, but if multiple tries are needed
you can manually run the same script that <code>update</code> calls:
<code>$ ./script/apply-patches</code></li>
</ol>
<ul>
<li>There is a second script, <code>script/patch.py</code> that may be useful.
Read <code>./script/patch.py -h</code> for more information.</li>
</ul>
<ol start="5">
<li>Run the build when all patches can be applied without errors</li>
</ol>
<ul>
<li><code>$ ./script/build</code></li>
<li>If some patches are no longer compatible with the Chromium code,
fix compilation errors.</li>
</ul>
<ol start="6">
<li>When the build succeeds, create a <code>dist</code> for Electron</li>
</ol>
<ul>
<li>
<p><code>$ ./script/create-dist --no_zip</code></p>
<ul>
<li>It will create a <code>dist/main</code> folder in the libcc repo's root.
You will need this to build Electron.</li>
</ul>
</li>
</ul>
<ol start="7">
<li>(Optional) Update script contents if there are errors resulting from files
that were removed or renamed. (<code>--no_zip</code> prevents script from create <code>dist</code>
archives. You don't need them.)</li>
</ol>
<h2 id="update-electrons-code"><a href="#update-electrons-code">Update Electron's code</a><a class="header-link" href="#update-electrons-code" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<ol>
<li>
<p>Get the code:</p>
<pre><code class="hljs language-sh" id="_gmbmkf1i">$ git <span class="hljs-built_in">clone</span> git@github.com:electron/electron.git
$ <span class="hljs-built_in">cd</span> electron</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_gmbmkf1i">Copy</button></pre>
</li>
<li>
<p>If you have libcc built on your machine in its own repo,
tell Electron to use it:</p>
<pre><code class="hljs language-sh" id="_ylxm8gg">$ ./script/bootstrap.py -v \
  --libcc_source_path &lt;libcc_folder&gt;/src \
  --libcc_shared_library_path &lt;libcc_folder&gt;/shared_library \
  --libcc_static_library_path &lt;libcc_folder&gt;/static_library</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_ylxm8gg">Copy</button></pre>
</li>
<li>If you haven't yet built libcc but it's already supposed to be upgraded
to a new Chromium, bootstrap Electron as usual
<code>$ ./script/bootstrap.py -v</code></li>
</ol>
<ul>
<li>Ensure that libcc submodule (<code>vendor/libchromiumcontent</code>) points to the
right revision</li>
</ul>
<ol start="4">
<li>Set <code>CLANG_REVISION</code> in <code>script/update-clang.sh</code> to match the version
Chromium is using.</li>
</ol>
<ul>
<li>Located in <code>electron/libchromiumcontent/src/tools/clang/scripts/update.py</code></li>
</ul>
<ol start="5">
<li>Checkout Chromium if you haven't already:</li>
</ol>
<ul>
<li>
<p><a href="https://chromium.googlesource.com/chromium/src.git/+/%7BVERSION%7D/tools/clang/scripts/update.py">chromium.googlesource.com/chromium/src.git/+/{VERSION}/tools/clang/scripts/update.py</a></p>
<ul>
<li>(Replace the <code>{VERSION}</code> placeholder in the url above to the Chromium
version libcc uses.)</li>
</ul>
</li>
</ul>
<ol start="6">
<li>Build Electron.</li>
</ol>
<ul>
<li>Try to build Debug version first: <code>$ ./script/build.py -c D</code></li>
<li>You will need it to run tests</li>
</ul>
<ol start="7">
<li>Fix compilation and linking errors</li>
<li>Ensure that Release build can be built too</li>
</ol>
<ul>
<li><code>$ ./script/build.py -c R</code></li>
<li>Often the Release build will have different linking errors that you'll
need to fix.</li>
<li>Some compilation and linking errors are caused by missing source/object
files in the libcc <code>dist</code></li>
</ul>
<ol start="9">
<li>Update <code>./script/create-dist</code> in the libcc repo, recreate a <code>dist</code>, and
run Electron bootstrap script once again.</li>
</ol>
<h3 id="tips-for-fixing-compilation-errors"><a href="#tips-for-fixing-compilation-errors">Tips for fixing compilation errors</a><a class="header-link" href="#tips-for-fixing-compilation-errors" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>Fix build config errors first</li>
<li>Fix fatal errors first, like missing files and errors related to compiler
flags or defines</li>
<li>
<p>Try to identify complex errors as soon as possible.</p>
<ul>
<li>Ask for help if you're not sure how to fix them</li>
</ul>
</li>
<li>Disable all Electron features, fix the build, then enable them one by one</li>
<li>Add more build flags to disable features in build-time.</li>
</ul>
<p>When a Debug build of Electron succeeds, run the tests:
<code>$ ./script/test.py</code>
Fix the failing tests.</p>
<p>Follow all the steps above to fix Electron code on all supported platforms.</p>
<h2 id="updating-crashpad"><a href="#updating-crashpad">Updating Crashpad</a><a class="header-link" href="#updating-crashpad" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>If there are any compilation errors related to the Crashpad, it probably means
you need to update the fork to a newer revision. See
<a href="https://electronjs.org/docs/development/upgrading-crashpad">Upgrading Crashpad</a>
for instructions on how to do that.</p>
<h2 id="updating-nodejs"><a href="#updating-nodejs">Updating NodeJS</a><a class="header-link" href="#updating-nodejs" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Upgrade <code>vendor/node</code> to the Node release that corresponds to the v8 version
used in the new Chromium release. See the v8 versions in Node on</p>
<p>See <a href="https://electronjs.org/docs/development/upgrading-node">Upgrading Node</a>
for instructions on this.</p>
<h2 id="verify-ffmpeg-support"><a href="#verify-ffmpeg-support">Verify ffmpeg support</a><a class="header-link" href="#verify-ffmpeg-support" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Electron ships with a version of <code>ffmpeg</code> that includes proprietary codecs by
default. A version without these codecs is built and distributed with each
release as well. Each Chrome upgrade should verify that switching this version
is still supported.</p>
<p>You can verify Electron's support for multiple <code>ffmpeg</code> builds by loading the
following page. It should work with the default <code>ffmpeg</code> library distributed
with Electron and not work with the <code>ffmpeg</code> library built without proprietary
codecs.</p>
<pre><code class="hljs language-html" id="_wvo593z"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Proprietary Codec Check<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Checking if Electron is using proprietary codecs by loading video from http://www.quirksmode.org/html5/videos/big_buck_bunny.mp4<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"outcome"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"display:none"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://www.quirksmode.org/html5/videos/big_buck_bunny.mp4"</span> <span class="hljs-attr">autoplay</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
      <span class="hljs-keyword">const</span> video = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'video'</span>)
      video.addEventListener(<span class="hljs-string">'error'</span>, ({target}) =&gt; {
        <span class="hljs-keyword">if</span> (target.error.code === target.error.MEDIA_ERR_SRC_NOT_SUPPORTED) {
          <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#outcome'</span>).textContent = <span class="hljs-string">'Not using proprietary codecs, video emitted source not supported error event.'</span>
        } <span class="hljs-keyword">else</span> {
          <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#outcome'</span>).textContent = <span class="hljs-string">`Unexpected error: <span class="hljs-subst">${target.error.code}</span>`</span>
        }
      })
      video.addEventListener(<span class="hljs-string">'playing'</span>, () =&gt; {
        <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#outcome'</span>).textContent = <span class="hljs-string">'Using proprietary codecs, video started playing.'</span>
      })
    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_wvo593z">Copy</button></pre>
<h2 id="useful-links"><a href="#useful-links">Useful links</a><a class="header-link" href="#useful-links" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<ul>
<li><a href="https://www.chromium.org/developers/calendar">Chrome Release Schedule</a></li>
<li><a href="http://omahaproxy.appspot.com/">OmahaProxy</a></li>
<li><a href="https://bugs.chromium.org/p/chromium">Chromium Issue Tracker</a></li>
</ul>

  <hr>
  <h1 id="upgrading-crashpad"><a href="#upgrading-crashpad">Upgrading Crashpad</a><a class="header-link" href="#upgrading-crashpad" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ol>
<li>Get the version of crashpad that we're going to use.</li>
</ol>
<ul>
<li>
<p><code>libcc/src/third_party/crashpad/README.chromium</code> will have a line <code>Revision:</code> with a checksum</p>
<ul>
<li>We need to check out the correponding branch.</li>
</ul>
</li>
<li>
<p>Clone Google's crashpad (<a href="https://chromium.googlesource.com/crashpad/crashpad">chromium.googlesource.com/crashpad/crashpad</a>)</p>
<ul>
<li><code>git clone https://chromium.googlesource.com/crashpad/crashpad</code></li>
</ul>
</li>
<li>
<p>Check out the branch with the revision checksum:</p>
<ul>
<li><code>git checkout &lt;revision checksum&gt;</code></li>
</ul>
</li>
<li>
<p>Add electron's crashpad fork as a remote</p>
<ul>
<li><code>git remote add electron https://github.com/electron/crashpad</code></li>
</ul>
</li>
<li>
<p>Check out a new branch for the update</p>
<ul>
<li><code>git checkout -b electron-crashpad-vA.B.C.D</code></li>
<li><code>A.B.C.D</code> is the Chromium version found in <code>libcc/VERSION</code>
and will be something like <code>62.0.3202.94</code></li>
</ul>
</li>
</ul>
<ol start="2">
<li>
<p>Make a checklist of the Electron patches that need to be applied
with <code>git log --oneline</code></p>
<ul>
<li>Or view <a href="https://github.com/electron/crashpad/commits/previous-branch-name">github.com/electron/crashpad/commits/previous-branch-name</a></li>
</ul>
</li>
<li>
<p>For each patch:</p>
</li>
</ol>
<ul>
<li>
<p>In <code>electron-crashpad-vA.B.C.D</code>, cherry-pick the patch's checksum</p>
<ul>
<li><code>git cherry-pick &lt;checksum&gt;</code></li>
</ul>
</li>
<li>Resolve any conflicts</li>
<li>
<p>Make sure it builds then add, commit, and push work to electron's crashpad fork</p>
<ul>
<li><code>git push electron electron-crashpad-vA.B.C.D</code></li>
</ul>
</li>
</ul>
<ol start="4">
<li>Update Electron to build the new crashpad:</li>
</ol>
<ul>
<li><code>cd vendor/crashpad</code></li>
<li><code>git fetch</code></li>
<li><code>git checkout electron-crashpad-v62.0.3202.94</code></li>
</ul>
<ol start="5">
<li>Regenerate Ninja files against both targets</li>
</ol>
<ul>
<li>From Electron root's root, run <code>script/update.py</code></li>
<li><code>script/build.py -c D --target=crashpad_client</code></li>
<li><code>script/build.py -c D --target=crashpad_handler</code></li>
<li>Both should build with no errors</li>
</ul>
<ol start="6">
<li>Push changes to submodule reference</li>
</ol>
<ul>
<li>(From electron root) <code>git add vendor/crashpad</code></li>
<li><code>git push origin upgrade-to-chromium-62</code></li>
</ul>

  <hr>
  <h1 id="upgrading-node"><a href="#upgrading-node">Upgrading Node</a><a class="header-link" href="#upgrading-node" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<h2 id="discussion"><a href="#discussion">Discussion</a><a class="header-link" href="#discussion" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>One upgrade issue is building all of Electron with a single copy
of V8 to ensure compatability. This is important because
upstream Node and <a href="https://electronjs.org/docs/development/upgrading-chromium">libchromiumcontent</a>
both use their own versions of V8.</p>
<p>Upgrading Node is much easier than upgrading libchromiumcontent,
so fewer conflicts arise if one upgrades libchromiumcontent first,
then chooses the upstream Node release whose V8 is closest to it.</p>
<p>Electron has its own <a href="https://github.com/electron/node">Node fork</a>
with modifications for the V8 build details mentioned above
and for exposing API needed by Electron. Once an upstream Node
release is chosen, it's placed in a branch in Electron's Node fork
and any Electron Node patches are applied there.</p>
<p>Another factor is that the Node project patches its version of V8.
As mentioned above, Electron builds everything with a single copy
of V8, so Node's V8 patches must be ported to that copy.</p>
<p>Once all of Electron's dependencies are building and using the same
copy of V8, the next step is to fix any Electron code issues caused
by the Node upgrade.</p>
<p>[FIXME] something about a Node debugger in Atom that we (e.g. deepak)
use and need to confirm doesn't break with the Node upgrade?</p>
<p>So in short, the primary steps are:</p>
<ol>
<li>Update Electron's Node fork to the desired version</li>
<li>Backport Node's V8 patches to our copy of V8</li>
<li>Update Electron to use new version of Node</li>
</ol>
<ul>
<li>Update submodules</li>
<li>Update Node.js build configuration</li>
</ul>
<h2 id="updating-electrons-node-fork"><a href="#updating-electrons-node-fork">Updating Electron's Node </a><a href="https://github.com/electron/node">fork</a><a class="header-link" href="#updating-electrons-node-fork" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<ol>
<li>Ensure that <code>master</code> on <code>electron/node</code> has updated release tags from <code>nodejs/node</code></li>
<li>Create a branch in <a href="https://github.com/electron/node">github.com/electron/node</a>: <code>electron-node-vX.X.X</code> where the base that you're branching from is the tag for the desired update</li>
</ol>
<ul>
<li><code>vX.X.X</code> Must use a version of node compatible with our current version of chromium</li>
</ul>
<ol start="3">
<li>Re-apply our commits from the previous version of node we were using (<code>vY.Y.Y</code>) to <code>v.X.X.X</code></li>
</ol>
<ul>
<li>Check release tag and select the range of commits we need to re-apply</li>
<li>
<p>Cherry-pick commit range:</p>
<ol>
<li>Checkout both <code>vY.Y.Y</code> &amp; <code>v.X.X.X</code></li>
<li><code>git cherry-pick FIRST_COMMIT_HASH..LAST_COMMIT_HASH</code></li>
</ol>
</li>
<li>
<p>Resolve merge conflicts in each file encountered, then:</p>
<ol>
<li><code>git add &lt;conflict-file&gt;</code></li>
<li><code>git cherry-pick --continue</code></li>
<li>Repeat until finished</li>
</ol>
</li>
</ul>
<h2 id="updating-v8-patches"><a href="#updating-v8-patches">Updating </a><a href="https://github.com/electron/node/src/V8">V8</a> Patches<a class="header-link" href="#updating-v8-patches" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>We need to generate a patch file from each patch applied to V8.</p>
<ol>
<li>Get a copy of Electron's libcc fork</li>
</ol>
<ul>
<li><code>$ git clone https://github.com/electron/libchromiumcontent</code></li>
</ul>
<ol start="2">
<li>Run <code>script/update</code> to get the latest libcc</li>
</ol>
<ul>
<li>This will be time-consuming</li>
</ul>
<ol start="3">
<li>Remove our copies of the old Node v8 patches</li>
</ol>
<ul>
<li>(In libchromiumcontent repo) Read <code>patches/v8/README.md</code> to see which patchfiles
were created during the last update</li>
<li>
<p>Remove those files from <code>patches/v8/</code>:</p>
<ul>
<li><code>git rm</code> the patchfiles</li>
<li>edit <code>patches/v8/README.md</code></li>
<li>commit these removals</li>
</ul>
</li>
</ul>
<ol start="4">
<li>Inspect Node <a href="https://github.com/electron/node">repo</a> to see what patches upstream Node
used with their v8 after bumping its version</li>
</ol>
<ul>
<li><code>git log --oneline deps/V8</code></li>
</ul>
<ol start="5">
<li>Create a checklist of the patches. This is useful for tracking your work and for
having a quick reference of commit hashes to use in the <code>git diff-tree</code> step below.</li>
<li>Read <code>patches/v8/README.md</code> to see which patchfiles came from the previous version of V8 and therefore need to be removed.</li>
</ol>
<ul>
<li>Delete each patchfile referenced in <code>patches/v8/README.md</code></li>
</ul>
<ol start="7">
<li>For each patch, do:</li>
</ol>
<ul>
<li>
<p>(In node repo) <code>git diff-tree --patch HASH &gt; ~/path_to_libchromiumcontent/patches/v8/xxx-patch_name.patch</code></p>
<ul>
<li><code>xxx</code> is an incremented three-digit number (to force patch order)</li>
<li><code>patch_name</code> should loosely match the node commit messages,
e.g. <code>030-cherry_pick_cc55747,patch</code> if the Node commit message was "cherry-pick <a href="https://github.com/electron/electron-i18n/commit/cc55747"><code>cc55747</code></a>"</li>
</ul>
</li>
<li>
<p>(remainder of steps in libchromium repo)
Manually edit the <code>.patch</code> file to match upstream V8's directory:</p>
<ul>
<li>
<p>If a diff section has no instances of <code>deps/V8</code>, remove it altogether.</p>
<ul>
<li>We don’t want those patches because we’re only patching V8.</li>
</ul>
</li>
<li>
<p>Replace instances of <code>a/deps/v8/filename.ext</code> with <code>a/filename.ext</code></p>
<ul>
<li>This is needed because upstream Node keeps its V8 files in a subdirectory</li>
</ul>
</li>
</ul>
</li>
<li>Ensure that local status is clean: <code>git status</code> to make sure there are no unstaged changes.</li>
<li>Confirm that the patch applies cleanly with
<code>script/patch.py -r src/V8 -p patches/v8/xxx-patch_name.patch.patch</code></li>
<li>
<p>Create a new copy of the patch:</p>
<ul>
<li><code>cd src/v8 &amp;&amp; git diff &gt; ../../test.patch &amp;&amp; cd ../..</code></li>
<li>This is needed because the first patch has Node commit checksums that we don't want</li>
</ul>
</li>
<li>
<p>Confirm that checksums are the only difference between the two patches:</p>
<ul>
<li><code>diff -u test.patch patches/v8/xxx-patch_name.patch</code></li>
</ul>
</li>
<li>
<p>Replace the old patch with the new:</p>
<ul>
<li><code>mv test.patch patches/v8/xxx-patch_name.patch</code></li>
</ul>
</li>
<li>
<p>Add the patched code to the index <em>without</em> committing:</p>
<ul>
<li><code>cd src/v8 &amp;&amp; git add . &amp;&amp; cd ../..</code></li>
<li>We don't want to commit the changes (they're kept in the patchfiles)
but need them locally so that they don't show up in subsequent diffs
while we iterate through more patches</li>
</ul>
</li>
<li>
<p>Add the patch file to the index:</p>
<ul>
<li><code>git add a patches/v8/</code></li>
</ul>
</li>
<li>
<p>(Optionally) commit each patch file to ensure you can back up if you mess up a step:</p>
<ul>
<li><code>git commit patches/v8/</code></li>
</ul>
</li>
</ul>
<ol start="8">
<li>Update <code>patches/v8/README.md</code> with references to all new patches that have been added so that the next person will know which need to be removed.</li>
<li>
<p>Update Electron's submodule references:</p>
<pre><code class="hljs language-sh" id="_674h0opn">$ <span class="hljs-built_in">cd</span> electron/vendor/node
electron/vendor/node$ git fetch
electron/vendor/node$ git checkout electron-node-vA.B.C
electron/vendor/node$ <span class="hljs-built_in">cd</span> ../libchromiumcontent
electron/vendor/libchromiumcontent$ git fetch
electron/vendor/libchromiumcontent$ git checkout upgrade-to-chromium-X
electron/vendor/libchromiumcontent$ <span class="hljs-built_in">cd</span> ../..
electron$ git add vendor
electron$ git commit -m <span class="hljs-string">"update submodule referefences for node and libc"</span>
electron$ git pso upgrade-to-chromium-62
electron$ script/bootstrap.py -d
electron$ script/build.py -c -D</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_674h0opn">Copy</button></pre>
</li>
</ol>
<h2 id="notes"><a href="#notes">Notes</a><a class="header-link" href="#notes" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<ul>
<li>libcc and V8 are treated as a single unit</li>
<li>
<p>Node maintains its own fork of V8</p>
<ul>
<li>They backport a small amount of things as needed</li>
<li>Documentation in node about how <a href="https://nodejs.org/api/v8.html">they work with V8</a></li>
</ul>
</li>
<li>
<p>We update code such that we only use one copy of V8 across all of electron</p>
<ul>
<li>E.g electron, libcc, and node</li>
</ul>
</li>
<li>
<p>We don’t track upstream closely due to logistics:</p>
<ul>
<li>Upstream uses multiple repos and so merging into a single repo
would result in lost history. So we only update when we’re planning
a node version bump in electron.</li>
</ul>
</li>
<li>
<p>libcc is large and time-consuming to update, so we typically
choose the node version based on which of its releases has a version
of V8 that’s closest to the version in libcc that we’re using.</p>
<ul>
<li>We sometimes have to wait for the next periodic Node release
because it will sync more closely with the version of V8 in the new libcc</li>
</ul>
</li>
<li>
<p>Electron keeps all its patches in libcc because it’s simpler than
maintaining different repos for patches for each upstream project.</p>
<ul>
<li>Crashpad, node, libcc, etc. patches are all kept in the same place</li>
</ul>
</li>
<li>
<p>Building node:</p>
<ul>
<li>There’s a chance we need to change our build configuration
to match the build flags that node wants in <code>node/common.gypi</code></li>
</ul>
</li>
</ul>

  <hr>
  <h1 id="uploadblob-object"><a href="#uploadblob-object">UploadBlob Object</a><a class="header-link" href="#uploadblob-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>type</code> String - <code>blob</code>.</li>
<li><code>blobUUID</code> String - UUID of blob data to upload.</li>
</ul>

  <hr>
  <h1 id="uploaddata-object"><a href="#uploaddata-object">UploadData Object</a><a class="header-link" href="#uploaddata-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>bytes</code> Buffer - Content being sent.</li>
<li><code>file</code> String - Path of file being uploaded.</li>
<li><code>blobUUID</code> String - UUID of blob data. Use <a href="https://electronjs.org/docs/api/session#sesgetblobdataidentifier-callback">ses.getBlobData</a> method
to retrieve the data.</li>
</ul>

  <hr>
  <h1 id="uploadfile-object"><a href="#uploadfile-object">UploadFile Object</a><a class="header-link" href="#uploadfile-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>type</code> String - <code>file</code>.</li>
<li><code>filePath</code> String - Path of file to be uploaded.</li>
<li><code>offset</code> Integer - Defaults to <code>0</code>.</li>
<li><code>length</code> Integer - Number of bytes to read from <code>offset</code>.
Defaults to <code>0</code>.</li>
<li><code>modificationTime</code> Double - Last Modification time in
number of seconds sine the UNIX epoch.</li>
</ul>

  <hr>
  <h1 id="uploadfilesystem-object"><a href="#uploadfilesystem-object">UploadFileSystem Object</a><a class="header-link" href="#uploadfilesystem-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>type</code> String - <code>fileSystem</code>.</li>
<li><code>filsSystemURL</code> String - FileSystem url to read data for upload.</li>
<li><code>offset</code> Integer - Defaults to <code>0</code>.</li>
<li><code>length</code> Integer - Number of bytes to read from <code>offset</code>.
Defaults to <code>0</code>.</li>
<li><code>modificationTime</code> Double - Last Modification time in
number of seconds sine the UNIX epoch.</li>
</ul>

  <hr>
  <h1 id="uploadrawdata-object"><a href="#uploadrawdata-object">UploadRawData Object</a><a class="header-link" href="#uploadrawdata-object" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<ul>
<li><code>type</code> String - <code>rawData</code>.</li>
<li><code>bytes</code> Buffer - Data to be uploaded.</li>
</ul>

  <hr>
  <h1 id="using-native-node-modules"><a href="#using-native-node-modules">Using Native Node Modules</a><a class="header-link" href="#using-native-node-modules" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>The native Node modules are supported by Electron, but since Electron is very
likely to use a different V8 version from the Node binary installed in your
system, you have to manually specify the location of Electron's headers when
building native modules.</p>
<h2 id="how-to-install-native-modules"><a href="#how-to-install-native-modules">How to install native modules</a><a class="header-link" href="#how-to-install-native-modules" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Three ways to install native modules:</p>
<h3 id="using-npm"><a href="#using-npm">Using <code>npm</code></a><a class="header-link" href="#using-npm" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>By setting a few environment variables, you can use <code>npm</code> to install modules
directly.</p>
<p>An example of installing all dependencies for Electron:</p>
<pre><code class="hljs language-sh" id="_k826j9p"><span class="hljs-comment"># Electron's version.</span>
<span class="hljs-built_in">export</span> npm_config_target=1.2.3
<span class="hljs-comment"># The architecture of Electron, can be ia32 or x64.</span>
<span class="hljs-built_in">export</span> npm_config_arch=x64
<span class="hljs-built_in">export</span> npm_config_target_arch=x64
<span class="hljs-comment"># Download headers for Electron.</span>
<span class="hljs-built_in">export</span> npm_config_disturl=https://atom.io/download/electron
<span class="hljs-comment"># Tell node-pre-gyp that we are building for Electron.</span>
<span class="hljs-built_in">export</span> npm_config_runtime=electron
<span class="hljs-comment"># Tell node-pre-gyp to build module from source code.</span>
<span class="hljs-built_in">export</span> npm_config_build_from_source=<span class="hljs-literal">true</span>
<span class="hljs-comment"># Install all dependencies, and store cache to ~/.electron-gyp.</span>
HOME=~/.electron-gyp npm install</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_k826j9p">Copy</button></pre>
<h3 id="installing-modules-and-rebuilding-for-electron"><a href="#installing-modules-and-rebuilding-for-electron">Installing modules and rebuilding for Electron</a><a class="header-link" href="#installing-modules-and-rebuilding-for-electron" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>You can also choose to install modules like other Node projects, and then
rebuild the modules for Electron with the <a href="https://github.com/paulcbetts/electron-rebuild"><code>electron-rebuild</code></a>
package. This module can get the version of Electron and handle the manual steps
of downloading headers and building native modules for your app.</p>
<p>An example of installing <code>electron-rebuild</code> and then rebuild modules with it:</p>
<pre><code class="hljs language-sh" id="_0r5c1yv">npm install --save-dev electron-rebuild

<span class="hljs-comment"># Every time you run "npm install", run this:</span>
./node_modules/.bin/electron-rebuild

<span class="hljs-comment"># On Windows if you have trouble, try:</span>
.\node_modules\.bin\electron-rebuild.cmd</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_0r5c1yv">Copy</button></pre>
<h3 id="manually-building-for-electron"><a href="#manually-building-for-electron">Manually building for Electron</a><a class="header-link" href="#manually-building-for-electron" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>If you are a developer developing a native module and want to test it against
Electron, you might want to rebuild the module for Electron manually. You can
use <code>node-gyp</code> directly to build for Electron:</p>
<pre><code class="hljs language-sh" id="_1np0343k"><span class="hljs-built_in">cd</span> /path-to-module/
HOME=~/.electron-gyp node-gyp rebuild --target=1.2.3 --arch=x64 --dist-url=https://atom.io/download/electron</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_1np0343k">Copy</button></pre>
<p>The <code>HOME=~/.electron-gyp</code> changes where to find development headers. The
<code>--target=1.2.3</code> is version of Electron. The <code>--dist-url=...</code> specifies
where to download the headers. The <code>--arch=x64</code> says the module is built for
64bit system.</p>
<h2 id="troubleshooting"><a href="#troubleshooting">Troubleshooting</a><a class="header-link" href="#troubleshooting" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>If you installed a native module and found it was not working, you need to check
following things:</p>
<ul>
<li>The architecture of the module has to match Electron's architecture (ia32 or x64).</li>
<li>After you upgrade Electron, you usually need to rebuild the modules.</li>
<li>When in doubt, run <code>electron-rebuild</code> first.</li>
</ul>
<h2 id="modules-that-rely-on-prebuild"><a href="#modules-that-rely-on-prebuild">Modules that rely on <code>prebuild</code></a><a class="header-link" href="#modules-that-rely-on-prebuild" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p><a href="https://github.com/mafintosh/prebuild"><code>prebuild</code></a> provides a way to easily
publish native Node modules with prebuilt binaries for multiple versions of Node
and Electron.</p>
<p>If modules provide binaries for the usage in Electron, make sure to omit
<code>--build-from-source</code> and the <code>npm_config_build_from_source</code> environment
variable in order to take full advantage of the prebuilt binaries.</p>
<h2 id="modules-that-rely-on-node-pre-gyp"><a href="#modules-that-rely-on-node-pre-gyp">Modules that rely on <code>node-pre-gyp</code></a><a class="header-link" href="#modules-that-rely-on-node-pre-gyp" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <a href="https://github.com/mapbox/node-pre-gyp"><code>node-pre-gyp</code> tool</a> provides a way to deploy native Node
modules with prebuilt binaries, and many popular modules are using it.</p>
<p>Usually those modules work fine under Electron, but sometimes when Electron uses
a newer version of V8 than Node, and there are ABI changes, bad things may
happen. So in general it is recommended to always build native modules from
source code.</p>
<p>If you are following the <code>npm</code> way of installing modules, then this is done
by default, if not, you have to pass <code>--build-from-source</code> to <code>npm</code>, or set the
<code>npm_config_build_from_source</code> environment variable.</p>

  <hr>
  <h1 id="using-pepper-flash-plugin"><a href="#using-pepper-flash-plugin">Using Pepper Flash Plugin</a><a class="header-link" href="#using-pepper-flash-plugin" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>Electron supports the Pepper Flash plugin. To use the Pepper Flash plugin in
Electron, you should manually specify the location of the Pepper Flash plugin
and then enable it in your application.</p>
<h2 id="prepare-a-copy-of-flash-plugin"><a href="#prepare-a-copy-of-flash-plugin">Prepare a Copy of Flash Plugin</a><a class="header-link" href="#prepare-a-copy-of-flash-plugin" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>On macOS and Linux, the details of the Pepper Flash plugin can be found by
navigating to <code>chrome://plugins</code> in the Chrome browser. Its location and version
are useful for Electron's Pepper Flash support. You can also copy it to another
location.</p>
<h2 id="add-electron-switch"><a href="#add-electron-switch">Add Electron Switch</a><a class="header-link" href="#add-electron-switch" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>You can directly add <code>--ppapi-flash-path</code> and <code>--ppapi-flash-version</code> to the
Electron command line or by using the <code>app.commandLine.appendSwitch</code> method
before the app ready event. Also, turn on <code>plugins</code> option of <code>BrowserWindow</code>.</p>
<p>For example:</p>
<pre><code class="hljs language-javascript" id="_097orbd"><span class="hljs-keyword">const</span> {app, BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>)

<span class="hljs-comment">// Specify flash path, supposing it is placed in the same directory with main.js.</span>
<span class="hljs-keyword">let</span> pluginName
<span class="hljs-keyword">switch</span> (process.platform) {
  <span class="hljs-keyword">case</span> <span class="hljs-string">'win32'</span>:
    pluginName = <span class="hljs-string">'pepflashplayer.dll'</span>
    <span class="hljs-keyword">break</span>
  <span class="hljs-keyword">case</span> <span class="hljs-string">'darwin'</span>:
    pluginName = <span class="hljs-string">'PepperFlashPlayer.plugin'</span>
    <span class="hljs-keyword">break</span>
  <span class="hljs-keyword">case</span> <span class="hljs-string">'linux'</span>:
    pluginName = <span class="hljs-string">'libpepflashplayer.so'</span>
    <span class="hljs-keyword">break</span>
}
app.commandLine.appendSwitch(<span class="hljs-string">'ppapi-flash-path'</span>, path.join(__dirname, pluginName))

<span class="hljs-comment">// Optional: Specify flash version, for example, v17.0.0.169</span>
app.commandLine.appendSwitch(<span class="hljs-string">'ppapi-flash-version'</span>, <span class="hljs-string">'17.0.0.169'</span>)

app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  <span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow({
    <span class="hljs-attr">width</span>: <span class="hljs-number">800</span>,
    <span class="hljs-attr">height</span>: <span class="hljs-number">600</span>,
    <span class="hljs-attr">webPreferences</span>: {
      <span class="hljs-attr">plugins</span>: <span class="hljs-literal">true</span>
    }
  })
  win.loadURL(<span class="hljs-string">`file://<span class="hljs-subst">${__dirname}</span>/index.html`</span>)
  <span class="hljs-comment">// Something else</span>
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_097orbd">Copy</button></pre>
<p>You can also try loading the system wide Pepper Flash plugin instead of shipping
the plugins yourself, its path can be received by calling
<code>app.getPath('pepperFlashSystemPlugin')</code>.</p>
<h2 id="enable-flash-plugin-in-a-webview-tag"><a href="#enable-flash-plugin-in-a-webview-tag">Enable Flash Plugin in a <code>&lt;webview&gt;</code> Tag</a><a class="header-link" href="#enable-flash-plugin-in-a-webview-tag" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Add <code>plugins</code> attribute to <code>&lt;webview&gt;</code> tag.</p>
<pre><code class="hljs language-html" id="_gn3x57ra"><span class="hljs-tag">&lt;<span class="hljs-name">webview</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://www.adobe.com/software/flash/about/"</span> <span class="hljs-attr">plugins</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">webview</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_gn3x57ra">Copy</button></pre>
<h2 id="troubleshooting"><a href="#troubleshooting">Troubleshooting</a><a class="header-link" href="#troubleshooting" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>You can check if Pepper Flash plugin was loaded by inspecting
<code>navigator.plugins</code> in the console of devtools (although you can't know if the
plugin's path is correct).</p>
<p>The architecture of Pepper Flash plugin has to match Electron's one. On Windows,
a common error is to use 32bit version of Flash plugin against 64bit version of
Electron.</p>
<p>On Windows the path passed to <code>--ppapi-flash-path</code> has to use <code>\</code> as path
delimiter, using POSIX-style paths will not work.</p>
<p>For some operations, such as streaming media using RTMP, it is necessary to grant wider permissions to players’ <code>.swf</code> files. One way of accomplishing this, is to use <a href="https://github.com/szwacz/nw-flash-trust">nw-flash-trust</a>.</p>

  <hr>
  <h1 id="using-selenium-and-webdriver"><a href="#using-selenium-and-webdriver">Using Selenium and WebDriver</a><a class="header-link" href="#using-selenium-and-webdriver" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>From <a href="https://sites.google.com/a/chromium.org/chromedriver/">ChromeDriver - WebDriver for Chrome</a>:</p>
<blockquote>
<p>WebDriver is an open source tool for automated testing of web apps across many
browsers. It provides capabilities for navigating to web pages, user input,
JavaScript execution, and more. ChromeDriver is a standalone server which
implements WebDriver's wire protocol for Chromium. It is being developed by
members of the Chromium and WebDriver teams.</p>
</blockquote>
<h2 id="setting-up-spectron"><a href="#setting-up-spectron">Setting up Spectron</a><a class="header-link" href="#setting-up-spectron" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p><a href="https://electronjs.org/spectron">Spectron</a> is the officially supported ChromeDriver testing framework
for Electron. It is built on top of <a href="http://webdriver.io/">WebdriverIO</a> and
has helpers to access Electron APIs in your tests and bundles ChromeDriver.</p>
<pre><code class="hljs language-sh" id="_a0pv62hm">$ npm install --save-dev spectron</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_a0pv62hm">Copy</button></pre>
<pre><code class="hljs language-javascript" id="_c1yykivj"><span class="hljs-comment">// A simple test to verify a visible window is opened with a title</span>
<span class="hljs-keyword">var</span> Application = <span class="hljs-built_in">require</span>(<span class="hljs-string">'spectron'</span>).Application
<span class="hljs-keyword">var</span> assert = <span class="hljs-built_in">require</span>(<span class="hljs-string">'assert'</span>)

<span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Application({
  <span class="hljs-attr">path</span>: <span class="hljs-string">'/Applications/MyApp.app/Contents/MacOS/MyApp'</span>
})

app.start().then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-comment">// Check if the window is visible</span>
  <span class="hljs-keyword">return</span> app.browserWindow.isVisible()
}).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">isVisible</span>) </span>{
  <span class="hljs-comment">// Verify the window is visible</span>
  assert.equal(isVisible, <span class="hljs-literal">true</span>)
}).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-comment">// Get the window's title</span>
  <span class="hljs-keyword">return</span> app.client.getTitle()
}).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">title</span>) </span>{
  <span class="hljs-comment">// Verify the window's title</span>
  assert.equal(title, <span class="hljs-string">'My App'</span>)
}).catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>{
  <span class="hljs-comment">// Log any failures</span>
  <span class="hljs-built_in">console</span>.error(<span class="hljs-string">'Test failed'</span>, error.message)
}).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-comment">// Stop the application</span>
  <span class="hljs-keyword">return</span> app.stop()
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_c1yykivj">Copy</button></pre>
<h2 id="setting-up-with-webdriverjs"><a href="#setting-up-with-webdriverjs">Setting up with WebDriverJs</a><a class="header-link" href="#setting-up-with-webdriverjs" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p><a href="https://code.google.com/p/selenium/wiki/WebDriverJs">WebDriverJs</a> provides
a Node package for testing with web driver, we will use it as an example.</p>
<h3 id="1-start-chromedriver"><a href="#1-start-chromedriver">1. Start ChromeDriver</a><a class="header-link" href="#1-start-chromedriver" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>First you need to download the <code>chromedriver</code> binary, and run it:</p>
<pre><code class="hljs language-sh" id="_l47ae3um">$ npm install electron-chromedriver
$ ./node_modules/.bin/chromedriver
Starting ChromeDriver (v2.10.291558) on port 9515
Only <span class="hljs-built_in">local</span> connections are allowed.</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_l47ae3um">Copy</button></pre>
<p>Remember the port number <code>9515</code>, which will be used later</p>
<h3 id="2-install-webdriverjs"><a href="#2-install-webdriverjs">2. Install WebDriverJS</a><a class="header-link" href="#2-install-webdriverjs" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-sh" id="_1jotbdjmo">$ npm install selenium-webdriver</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_1jotbdjmo">Copy</button></pre>
<h3 id="3-connect-to-chromedriver"><a href="#3-connect-to-chromedriver">3. Connect to ChromeDriver</a><a class="header-link" href="#3-connect-to-chromedriver" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The usage of <code>selenium-webdriver</code> with Electron is basically the same with
upstream, except that you have to manually specify how to connect chrome driver
and where to find Electron's binary:</p>
<pre><code class="hljs language-javascript" id="_bu77azl"><span class="hljs-keyword">const</span> webdriver = <span class="hljs-built_in">require</span>(<span class="hljs-string">'selenium-webdriver'</span>)

<span class="hljs-keyword">const</span> driver = <span class="hljs-keyword">new</span> webdriver.Builder()
  <span class="hljs-comment">// The "9515" is the port opened by chrome driver.</span>
  .usingServer(<span class="hljs-string">'http://localhost:9515'</span>)
  .withCapabilities({
    <span class="hljs-attr">chromeOptions</span>: {
      <span class="hljs-comment">// Here is the path to your Electron binary.</span>
      binary: <span class="hljs-string">'/Path-to-Your-App.app/Contents/MacOS/Electron'</span>
    }
  })
  .forBrowser(<span class="hljs-string">'electron'</span>)
  .build()

driver.get(<span class="hljs-string">'http://www.google.com'</span>)
driver.findElement(webdriver.By.name(<span class="hljs-string">'q'</span>)).sendKeys(<span class="hljs-string">'webdriver'</span>)
driver.findElement(webdriver.By.name(<span class="hljs-string">'btnG'</span>)).click()
driver.wait(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
  <span class="hljs-keyword">return</span> driver.getTitle().then(<span class="hljs-function">(<span class="hljs-params">title</span>) =&gt;</span> {
    <span class="hljs-keyword">return</span> title === <span class="hljs-string">'webdriver - Google Search'</span>
  })
}, <span class="hljs-number">1000</span>)

driver.quit()</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_bu77azl">Copy</button></pre>
<h2 id="setting-up-with-webdriverio"><a href="#setting-up-with-webdriverio">Setting up with WebdriverIO</a><a class="header-link" href="#setting-up-with-webdriverio" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p><a href="http://webdriver.io/">WebdriverIO</a> provides a Node package for testing with web
driver.</p>
<h3 id="1-start-chromedriver-1"><a href="#1-start-chromedriver-1">1. Start ChromeDriver</a><a class="header-link" href="#1-start-chromedriver-1" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>First you need to download the <code>chromedriver</code> binary, and run it:</p>
<pre><code class="hljs language-sh" id="_pqtcgkhb">$ npm install electron-chromedriver
$ ./node_modules/.bin/chromedriver --url-base=wd/hub --port=9515
Starting ChromeDriver (v2.10.291558) on port 9515
Only <span class="hljs-built_in">local</span> connections are allowed.</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_pqtcgkhb">Copy</button></pre>
<p>Remember the port number <code>9515</code>, which will be used later</p>
<h3 id="2-install-webdriverio"><a href="#2-install-webdriverio">2. Install WebdriverIO</a><a class="header-link" href="#2-install-webdriverio" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-sh" id="_vzh7oiih">$ npm install webdriverio</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_vzh7oiih">Copy</button></pre>
<h3 id="3-connect-to-chrome-driver"><a href="#3-connect-to-chrome-driver">3. Connect to chrome driver</a><a class="header-link" href="#3-connect-to-chrome-driver" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-javascript" id="_egbzeuq4"><span class="hljs-keyword">const</span> webdriverio = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webdriverio'</span>)
<span class="hljs-keyword">const</span> options = {
  <span class="hljs-attr">host</span>: <span class="hljs-string">'localhost'</span>, <span class="hljs-comment">// Use localhost as chrome driver server</span>
  port: <span class="hljs-number">9515</span>,        <span class="hljs-comment">// "9515" is the port opened by chrome driver.</span>
  desiredCapabilities: {
    <span class="hljs-attr">browserName</span>: <span class="hljs-string">'chrome'</span>,
    <span class="hljs-attr">chromeOptions</span>: {
      <span class="hljs-attr">binary</span>: <span class="hljs-string">'/Path-to-Your-App/electron'</span>, <span class="hljs-comment">// Path to your Electron binary.</span>
      args: [<span class="hljs-comment">/* cli arguments */</span>]           <span class="hljs-comment">// Optional, perhaps 'app=' + /path/to/your/app/</span>
    }
  }
}

<span class="hljs-keyword">let</span> client = webdriverio.remote(options)

client
  .init()
  .url(<span class="hljs-string">'http://google.com'</span>)
  .setValue(<span class="hljs-string">'#q'</span>, <span class="hljs-string">'webdriverio'</span>)
  .click(<span class="hljs-string">'#btnG'</span>)
  .getTitle().then(<span class="hljs-function">(<span class="hljs-params">title</span>) =&gt;</span> {
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Title was: '</span> + title)
  })
  .end()</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_egbzeuq4">Copy</button></pre>
<h2 id="workflow"><a href="#workflow">Workflow</a><a class="header-link" href="#workflow" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>To test your application without rebuilding Electron, simply
<a href="https://github.com/electron/electron/blob/master/docs/tutorial/application-distribution.md">place</a>
your app source into Electron's resource directory.</p>
<p>Alternatively, pass an argument to run with your electron binary that points to
your app's folder. This eliminates the need to copy-paste your app into
Electron's resource directory.</p>

  <hr>
  <h1 id="using-widevine-cdm-plugin"><a href="#using-widevine-cdm-plugin">Using Widevine CDM Plugin</a><a class="header-link" href="#using-widevine-cdm-plugin" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>In Electron you can use the Widevine CDM plugin shipped with Chrome browser.</p>
<h2 id="getting-the-plugin"><a href="#getting-the-plugin">Getting the plugin</a><a class="header-link" href="#getting-the-plugin" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Electron doesn't ship with the Widevine CDM plugin for license reasons, to get
it, you need to install the official Chrome browser first, which should match
the architecture and Chrome version of the Electron build you use.</p>
<p><strong>Note:</strong> The major version of Chrome browser has to be the same with the Chrome
version used by Electron, otherwise the plugin will not work even though
<code>navigator.plugins</code> would show it has been loaded.</p>
<h3 id="windows--macos"><a href="#windows--macos">Windows &amp; macOS</a><a class="header-link" href="#windows--macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Open <code>chrome://components/</code> in Chrome browser, find <code>WidevineCdm</code> and make
sure it is up to date, then you can find all the plugin binaries from the
<code>APP_DATA/Google/Chrome/WidevineCDM/VERSION/_platform_specific/PLATFORM_ARCH/</code>
directory.</p>
<p><code>APP_DATA</code> is system's location for storing app data, on Windows it is
<code>%LOCALAPPDATA%</code>, on macOS it is <code>~/Library/Application Support</code>. <code>VERSION</code> is
Widevine CDM plugin's version string, like <code>1.4.8.866</code>. <code>PLATFORM</code> is <code>mac</code> or
<code>win</code>. <code>ARCH</code> is <code>x86</code> or <code>x64</code>.</p>
<p>On Windows the required binaries are <code>widevinecdm.dll</code> and
<code>widevinecdmadapter.dll</code>, on macOS they are <code>libwidevinecdm.dylib</code> and
<code>widevinecdmadapter.plugin</code>. You can copy them to anywhere you like, but they
have to be put together.</p>
<h3 id="linux"><a href="#linux">Linux</a><a class="header-link" href="#linux" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>On Linux the plugin binaries are shipped together with Chrome browser, you can
find them under <code>/opt/google/chrome</code>, the filenames are <code>libwidevinecdm.so</code> and
<code>libwidevinecdmadapter.so</code>.</p>
<h2 id="using-the-plugin"><a href="#using-the-plugin">Using the plugin</a><a class="header-link" href="#using-the-plugin" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>After getting the plugin files, you should pass the <code>widevinecdmadapter</code>'s path
to Electron with <code>--widevine-cdm-path</code> command line switch, and the plugin's
version with <code>--widevine-cdm-version</code> switch.</p>
<p><strong>Note:</strong> Though only the <code>widevinecdmadapter</code> binary is passed to Electron, the
<code>widevinecdm</code> binary has to be put aside it.</p>
<p>The command line switches have to be passed before the <code>ready</code> event of <code>app</code>
module gets emitted, and the page that uses this plugin must have plugin
enabled.</p>
<p>Example code:</p>
<pre><code class="hljs language-javascript" id="_lp6fputu"><span class="hljs-keyword">const</span> {app, BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-comment">// You have to pass the filename of `widevinecdmadapter` here, it is</span>
<span class="hljs-comment">// * `widevinecdmadapter.plugin` on macOS,</span>
<span class="hljs-comment">// * `libwidevinecdmadapter.so` on Linux,</span>
<span class="hljs-comment">// * `widevinecdmadapter.dll` on Windows.</span>
app.commandLine.appendSwitch(<span class="hljs-string">'widevine-cdm-path'</span>, <span class="hljs-string">'/path/to/widevinecdmadapter.plugin'</span>)
<span class="hljs-comment">// The version of plugin can be got from `chrome://plugins` page in Chrome.</span>
app.commandLine.appendSwitch(<span class="hljs-string">'widevine-cdm-version'</span>, <span class="hljs-string">'1.4.8.866'</span>)

<span class="hljs-keyword">let</span> win = <span class="hljs-literal">null</span>
app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  win = <span class="hljs-keyword">new</span> BrowserWindow({
    <span class="hljs-attr">webPreferences</span>: {
      <span class="hljs-comment">// The `plugins` have to be enabled.</span>
      plugins: <span class="hljs-literal">true</span>
    }
  })
  win.show()
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_lp6fputu">Copy</button></pre>
<h2 id="verifying-the-plugin"><a href="#verifying-the-plugin">Verifying the plugin</a><a class="header-link" href="#verifying-the-plugin" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>To verify whether the plugin works, you can use following ways:</p>
<ul>
<li>Open devtools and check whether <code>navigator.plugins</code> includes the Widevine
CDM plugin.</li>
<li>Open <a href="https://shaka-player-demo.appspot.com/">shaka-player-demo.appspot.com</a> and load a manifest that uses
<code>Widevine</code>.</li>
<li>Open <a href="http://www.dash-player.com/demo/drm-test-area/">dash-player.com/demo/drm-test-area</a>, check whether the page
says <code>bitdash uses Widevine in your browser</code>, then play the video.</li>
</ul>

  <hr>
  <h1 id="v8-development"><a href="#v8-development">V8 Development</a><a class="header-link" href="#v8-development" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>A collection of resources for learning and using V8</p>
</blockquote>
<ul>
<li><a href="https://github.com/v8/v8/wiki/Tracing-V8">V8 Tracing</a></li>
<li><a href="https://github.com/v8/v8/wiki/V8-Profiler">V8 Profiler</a> - Profiler combinations which are useful for profiling: <code>--prof</code>, <code>--trace-ic</code>, <code>--trace-opt</code>, <code>--trace-deopt</code>, <code>--print-bytecode</code>, <code>--print-opt-code</code></li>
<li><a href="https://docs.google.com/document/d/11T2CRex9hXxoJwbYqVQ32yIPMh0uouUZLdyrtmMoL44/edit?ts=56f27d9d#heading=h.6jz9dj3bnr8t">V8 Interpreter Design</a></li>
<li><a href="https://github.com/v8/v8/wiki/TurboFan">Optimizing compiler</a></li>
<li><a href="https://github.com/v8/v8/wiki/GDB-JIT-Interface">V8 GDB Debugging</a></li>
</ul>
<p>See also <a href="https://electronjs.org/docs/development/chromium-development">Chromium Development</a></p>

  <hr>
  <h1 id="webcontents"><a href="#webcontents">webContents</a><a class="header-link" href="#webcontents" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Render and control web pages.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<p><code>webContents</code> is an
<a href="https://nodejs.org/api/events.html#events_class_eventemitter">EventEmitter</a>.
It is responsible for rendering and controlling a web page and is a property of
the <a href="https://electronjs.org/docs/api/browser-window"><code>BrowserWindow</code></a> object. An example of accessing the
<code>webContents</code> object:</p>
<pre><code class="hljs language-javascript" id="_4czulb1rj"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">width</span>: <span class="hljs-number">800</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">1500</span>})
win.loadURL(<span class="hljs-string">'http://github.com'</span>)

<span class="hljs-keyword">let</span> contents = win.webContents
<span class="hljs-built_in">console</span>.log(contents)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_4czulb1rj">Copy</button></pre>
<h2 id="methods"><a href="#methods">Methods</a><a class="header-link" href="#methods" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>These methods can be accessed from the <code>webContents</code> module:</p>
<pre><code class="hljs language-javascript" id="_rtxbxah"><span class="hljs-keyword">const</span> {webContents} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-built_in">console</span>.log(webContents)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_rtxbxah">Copy</button></pre>
<h3 id="webcontentsgetallwebcontents"><a href="#webcontentsgetallwebcontents"><code>webContents.getAllWebContents()</code></a><a class="header-link" href="#webcontentsgetallwebcontents" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>WebContents[]</code> - An array of all <code>WebContents</code> instances. This will contain web contents
for all windows, webviews, opened devtools, and devtools extension background pages.</p>
<h3 id="webcontentsgetfocusedwebcontents"><a href="#webcontentsgetfocusedwebcontents"><code>webContents.getFocusedWebContents()</code></a><a class="header-link" href="#webcontentsgetfocusedwebcontents" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>WebContents</code> - The web contents that is focused in this application, otherwise
returns <code>null</code>.</p>
<h3 id="webcontentsfromidid"><a href="#webcontentsfromidid"><code>webContents.fromId(id)</code></a><a class="header-link" href="#webcontentsfromidid" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>id</code> Integer</li>
</ul>
<p>Returns <code>WebContents</code> - A WebContents instance with the given ID.</p>
<h2 id="class-webcontents"><a href="#class-webcontents">Class: WebContents</a><a class="header-link" href="#class-webcontents" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>Render and control the contents of a BrowserWindow instance.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<h3 id="instance-events"><a href="#instance-events">Instance Events</a><a class="header-link" href="#instance-events" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<h4 id="event-did-finish-load"><a href="#event-did-finish-load">Event: 'did-finish-load'</a><a class="header-link" href="#event-did-finish-load" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the navigation is done, i.e. the spinner of the tab has stopped
spinning, and the <code>onload</code> event was dispatched.</p>
<h4 id="event-did-fail-load"><a href="#event-did-fail-load">Event: 'did-fail-load'</a><a class="header-link" href="#event-did-fail-load" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>errorCode</code> Integer</li>
<li><code>errorDescription</code> String</li>
<li><code>validatedURL</code> String</li>
<li><code>isMainFrame</code> Boolean</li>
</ul>
<p>This event is like <code>did-finish-load</code> but emitted when the load failed or was
cancelled, e.g. <code>window.stop()</code> is invoked.
The full list of error codes and their meaning is available <a href="https://code.google.com/p/chromium/codesearch#chromium/src/net/base/net_error_list.h">here</a>.</p>
<h4 id="event-did-frame-finish-load"><a href="#event-did-frame-finish-load">Event: 'did-frame-finish-load'</a><a class="header-link" href="#event-did-frame-finish-load" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>isMainFrame</code> Boolean</li>
</ul>
<p>Emitted when a frame has done navigation.</p>
<h4 id="event-did-start-loading"><a href="#event-did-start-loading">Event: 'did-start-loading'</a><a class="header-link" href="#event-did-start-loading" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Corresponds to the points in time when the spinner of the tab started spinning.</p>
<h4 id="event-did-stop-loading"><a href="#event-did-stop-loading">Event: 'did-stop-loading'</a><a class="header-link" href="#event-did-stop-loading" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Corresponds to the points in time when the spinner of the tab stopped spinning.</p>
<h4 id="event-did-get-response-details"><a href="#event-did-get-response-details">Event: 'did-get-response-details'</a><a class="header-link" href="#event-did-get-response-details" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>status</code> Boolean</li>
<li><code>newURL</code> String</li>
<li><code>originalURL</code> String</li>
<li><code>httpResponseCode</code> Integer</li>
<li><code>requestMethod</code> String</li>
<li><code>referrer</code> String</li>
<li><code>headers</code> Object</li>
<li><code>resourceType</code> String</li>
</ul>
<p>Emitted when details regarding a requested resource are available.
<code>status</code> indicates the socket connection to download the resource.</p>
<h4 id="event-did-get-redirect-request"><a href="#event-did-get-redirect-request">Event: 'did-get-redirect-request'</a><a class="header-link" href="#event-did-get-redirect-request" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>oldURL</code> String</li>
<li><code>newURL</code> String</li>
<li><code>isMainFrame</code> Boolean</li>
<li><code>httpResponseCode</code> Integer</li>
<li><code>requestMethod</code> String</li>
<li><code>referrer</code> String</li>
<li><code>headers</code> Object</li>
</ul>
<p>Emitted when a redirect is received while requesting a resource.</p>
<h4 id="event-dom-ready"><a href="#event-dom-ready">Event: 'dom-ready'</a><a class="header-link" href="#event-dom-ready" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
</ul>
<p>Emitted when the document in the given frame is loaded.</p>
<h4 id="event-page-favicon-updated"><a href="#event-page-favicon-updated">Event: 'page-favicon-updated'</a><a class="header-link" href="#event-page-favicon-updated" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>favicons</code> String[] - Array of URLs</li>
</ul>
<p>Emitted when page receives favicon urls.</p>
<h4 id="event-new-window"><a href="#event-new-window">Event: 'new-window'</a><a class="header-link" href="#event-new-window" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>url</code> String</li>
<li><code>frameName</code> String</li>
<li><code>disposition</code> String - Can be <code>default</code>, <code>foreground-tab</code>, <code>background-tab</code>,
<code>new-window</code>, <code>save-to-disk</code> and <code>other</code>.</li>
<li><code>options</code> Object - The options which will be used for creating the new
<code>BrowserWindow</code>.</li>
<li><code>additionalFeatures</code> String[] - The non-standard features (features not handled
by Chromium or Electron) given to <code>window.open()</code>.</li>
</ul>
<p>Emitted when the page requests to open a new window for a <code>url</code>. It could be
requested by <code>window.open</code> or an external link like <code>&lt;a target='_blank'&gt;</code>.</p>
<p>By default a new <code>BrowserWindow</code> will be created for the <code>url</code>.</p>
<p>Calling <code>event.preventDefault()</code> will prevent Electron from automatically creating a
new <code>BrowserWindow</code>. If you call <code>event.preventDefault()</code> and manually create a new
<code>BrowserWindow</code> then you must set <code>event.newGuest</code> to reference the new <code>BrowserWindow</code>
instance, failing to do so may result in unexpected behavior. For example:</p>
<pre><code class="hljs language-javascript" id="_x8s7hu1">myBrowserWindow.webContents.on(<span class="hljs-string">'new-window'</span>, (event, url) =&gt; {
  event.preventDefault()
  <span class="hljs-keyword">const</span> win = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>})
  win.once(<span class="hljs-string">'ready-to-show'</span>, () =&gt; win.show())
  win.loadURL(url)
  event.newGuest = win
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_x8s7hu1">Copy</button></pre>
<h4 id="event-will-navigate"><a href="#event-will-navigate">Event: 'will-navigate'</a><a class="header-link" href="#event-will-navigate" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>url</code> String</li>
</ul>
<p>Emitted when a user or the page wants to start navigation. It can happen when
the <code>window.location</code> object is changed or a user clicks a link in the page.</p>
<p>This event will not emit when the navigation is started programmatically with
APIs like <code>webContents.loadURL</code> and <code>webContents.back</code>.</p>
<p>It is also not emitted for in-page navigations, such as clicking anchor links
or updating the <code>window.location.hash</code>. Use <code>did-navigate-in-page</code> event for
this purpose.</p>
<p>Calling <code>event.preventDefault()</code> will prevent the navigation.</p>
<h4 id="event-did-navigate"><a href="#event-did-navigate">Event: 'did-navigate'</a><a class="header-link" href="#event-did-navigate" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>url</code> String</li>
</ul>
<p>Emitted when a navigation is done.</p>
<p>This event is not emitted for in-page navigations, such as clicking anchor links
or updating the <code>window.location.hash</code>. Use <code>did-navigate-in-page</code> event for
this purpose.</p>
<h4 id="event-did-navigate-in-page"><a href="#event-did-navigate-in-page">Event: 'did-navigate-in-page'</a><a class="header-link" href="#event-did-navigate-in-page" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>url</code> String</li>
<li><code>isMainFrame</code> Boolean</li>
</ul>
<p>Emitted when an in-page navigation happened.</p>
<p>When in-page navigation happens, the page URL changes but does not cause
navigation outside of the page. Examples of this occurring are when anchor links
are clicked or when the DOM <code>hashchange</code> event is triggered.</p>
<h4 id="event-will-prevent-unload"><a href="#event-will-prevent-unload">Event: 'will-prevent-unload'</a><a class="header-link" href="#event-will-prevent-unload" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
</ul>
<p>Emitted when a <code>beforeunload</code> event handler is attempting to cancel a page unload.</p>
<p>Calling <code>event.preventDefault()</code> will ignore the <code>beforeunload</code> event handler
and allow the page to be unloaded.</p>
<pre><code class="hljs language-javascript" id="_3rxqaw5t"><span class="hljs-keyword">const</span> {BrowserWindow, dialog} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">const</span> win = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">width</span>: <span class="hljs-number">800</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">600</span>})
win.webContents.on(<span class="hljs-string">'will-prevent-unload'</span>, (event) =&gt; {
  <span class="hljs-keyword">const</span> choice = dialog.showMessageBox(win, {
    <span class="hljs-attr">type</span>: <span class="hljs-string">'question'</span>,
    <span class="hljs-attr">buttons</span>: [<span class="hljs-string">'Leave'</span>, <span class="hljs-string">'Stay'</span>],
    <span class="hljs-attr">title</span>: <span class="hljs-string">'Do you want to leave this site?'</span>,
    <span class="hljs-attr">message</span>: <span class="hljs-string">'Changes you made may not be saved.'</span>,
    <span class="hljs-attr">defaultId</span>: <span class="hljs-number">0</span>,
    <span class="hljs-attr">cancelId</span>: <span class="hljs-number">1</span>
  })
  <span class="hljs-keyword">const</span> leave = (choice === <span class="hljs-number">0</span>)
  <span class="hljs-keyword">if</span> (leave) {
    event.preventDefault()
  }
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_3rxqaw5t">Copy</button></pre>
<h4 id="event-crashed"><a href="#event-crashed">Event: 'crashed'</a><a class="header-link" href="#event-crashed" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>killed</code> Boolean</li>
</ul>
<p>Emitted when the renderer process crashes or is killed.</p>
<h4 id="event-plugin-crashed"><a href="#event-plugin-crashed">Event: 'plugin-crashed'</a><a class="header-link" href="#event-plugin-crashed" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>name</code> String</li>
<li><code>version</code> String</li>
</ul>
<p>Emitted when a plugin process has crashed.</p>
<h4 id="event-destroyed"><a href="#event-destroyed">Event: 'destroyed'</a><a class="header-link" href="#event-destroyed" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when <code>webContents</code> is destroyed.</p>
<h4 id="event-before-input-event"><a href="#event-before-input-event">Event: 'before-input-event'</a><a class="header-link" href="#event-before-input-event" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li>
<p><code>input</code> Object - Input properties</p>
<ul>
<li><code>type</code> String - Either <code>keyUp</code> or <code>keyDown</code></li>
<li><code>key</code> String - Equivalent to <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent">KeyboardEvent.key</a></li>
<li><code>code</code> String - Equivalent to <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent">KeyboardEvent.code</a></li>
<li><code>isAutoRepeat</code> Boolean - Equivalent to <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent">KeyboardEvent.repeat</a></li>
<li><code>shift</code> Boolean - Equivalent to <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent">KeyboardEvent.shiftKey</a></li>
<li><code>control</code> Boolean - Equivalent to <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent">KeyboardEvent.controlKey</a></li>
<li><code>alt</code> Boolean - Equivalent to <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent">KeyboardEvent.altKey</a></li>
<li><code>meta</code> Boolean - Equivalent to <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent">KeyboardEvent.metaKey</a></li>
</ul>
</li>
</ul>
<p>Emitted before dispatching the <code>keydown</code> and <code>keyup</code> events in the page.
Calling <code>event.preventDefault</code> will prevent the page <code>keydown</code>/<code>keyup</code> events
and the menu shortcuts.</p>
<p>To only prevent the menu shortcuts, use
<a href="#contentssetignoremenushortcuts"><code>setIgnoreMenuShortcuts</code></a>:</p>
<pre><code class="hljs language-javascript" id="_gx5nl35"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">width</span>: <span class="hljs-number">800</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">600</span>})

win.webContents.on(<span class="hljs-string">'before-input-event'</span>, (event, input) =&gt; {
  <span class="hljs-comment">// For example, only enable application menu keyboard shortcuts when</span>
  <span class="hljs-comment">// Ctrl/Cmd are down.</span>
  win.webContents.setIgnoreMenuShortcuts(!input.control &amp;&amp; !input.meta)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_gx5nl35">Copy</button></pre>
<h4 id="event-devtools-opened"><a href="#event-devtools-opened">Event: 'devtools-opened'</a><a class="header-link" href="#event-devtools-opened" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when DevTools is opened.</p>
<h4 id="event-devtools-closed"><a href="#event-devtools-closed">Event: 'devtools-closed'</a><a class="header-link" href="#event-devtools-closed" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when DevTools is closed.</p>
<h4 id="event-devtools-focused"><a href="#event-devtools-focused">Event: 'devtools-focused'</a><a class="header-link" href="#event-devtools-focused" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when DevTools is focused / opened.</p>
<h4 id="event-certificate-error"><a href="#event-certificate-error">Event: 'certificate-error'</a><a class="header-link" href="#event-certificate-error" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>url</code> String</li>
<li><code>error</code> String - The error code</li>
<li><code>certificate</code> <a href="https://electronjs.org/docs/api/structures/certificate">Certificate</a></li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>isTrusted</code> Boolean - Indicates whether the certificate can be considered trusted</li>
</ul>
</li>
</ul>
<p>Emitted when failed to verify the <code>certificate</code> for <code>url</code>.</p>
<p>The usage is the same with <a href="https://electronjs.org/docs/api/app#event-certificate-error">the <code>certificate-error</code> event of
<code>app</code></a>.</p>
<h4 id="event-select-client-certificate"><a href="#event-select-client-certificate">Event: 'select-client-certificate'</a><a class="header-link" href="#event-select-client-certificate" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>url</code> URL</li>
<li><code>certificateList</code> <a href="https://electronjs.org/docs/api/structures/certificate">Certificate[]</a></li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>certificate</code> <a href="https://electronjs.org/docs/api/structures/certificate">Certificate</a> - Must be a certificate from the given list</li>
</ul>
</li>
</ul>
<p>Emitted when a client certificate is requested.</p>
<p>The usage is the same with <a href="https://electronjs.org/docs/api/app#event-select-client-certificate">the <code>select-client-certificate</code> event of
<code>app</code></a>.</p>
<h4 id="event-login"><a href="#event-login">Event: 'login'</a><a class="header-link" href="#event-login" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li>
<p><code>request</code> Object</p>
<ul>
<li><code>method</code> String</li>
<li><code>url</code> URL</li>
<li><code>referrer</code> URL</li>
</ul>
</li>
<li>
<p><code>authInfo</code> Object</p>
<ul>
<li><code>isProxy</code> Boolean</li>
<li><code>scheme</code> String</li>
<li><code>host</code> String</li>
<li><code>port</code> Integer</li>
<li><code>realm</code> String</li>
</ul>
</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>username</code> String</li>
<li><code>password</code> String</li>
</ul>
</li>
</ul>
<p>Emitted when <code>webContents</code> wants to do basic auth.</p>
<p>The usage is the same with <a href="https://electronjs.org/docs/api/app#event-login">the <code>login</code> event of <code>app</code></a>.</p>
<h4 id="event-found-in-page"><a href="#event-found-in-page">Event: 'found-in-page'</a><a class="header-link" href="#event-found-in-page" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li>
<p><code>result</code> Object</p>
<ul>
<li><code>requestId</code> Integer</li>
<li><code>activeMatchOrdinal</code> Integer - Position of the active match.</li>
<li><code>matches</code> Integer - Number of Matches.</li>
<li><code>selectionArea</code> Object - Coordinates of first match region.</li>
<li><code>finalUpdate</code> Boolean</li>
</ul>
</li>
</ul>
<p>Emitted when a result is available for
[<code>webContents.findInPage</code>] request.</p>
<h4 id="event-media-started-playing"><a href="#event-media-started-playing">Event: 'media-started-playing'</a><a class="header-link" href="#event-media-started-playing" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when media starts playing.</p>
<h4 id="event-media-paused"><a href="#event-media-paused">Event: 'media-paused'</a><a class="header-link" href="#event-media-paused" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when media is paused or done playing.</p>
<h4 id="event-did-change-theme-color"><a href="#event-did-change-theme-color">Event: 'did-change-theme-color'</a><a class="header-link" href="#event-did-change-theme-color" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when a page's theme color changes. This is usually due to encountering
a meta tag:</p>
<pre><code class="hljs language-html" id="_n4uno61"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">'theme-color'</span> <span class="hljs-attr">content</span>=<span class="hljs-string">'#ff0000'</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_n4uno61">Copy</button></pre>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>color</code> (String | null) - Theme color is in format of '#rrggbb'. It is <code>null</code> when no theme color is set.</li>
</ul>
<h4 id="event-update-target-url"><a href="#event-update-target-url">Event: 'update-target-url'</a><a class="header-link" href="#event-update-target-url" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>url</code> String</li>
</ul>
<p>Emitted when mouse moves over a link or the keyboard moves the focus to a link.</p>
<h4 id="event-cursor-changed"><a href="#event-cursor-changed">Event: 'cursor-changed'</a><a class="header-link" href="#event-cursor-changed" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>type</code> String</li>
<li><code>image</code> NativeImage (optional)</li>
<li><code>scale</code> Float (optional) - scaling factor for the custom cursor</li>
<li><code>size</code> <a href="https://electronjs.org/docs/api/structures/size">Size</a> (optional) - the size of the <code>image</code></li>
<li><code>hotspot</code> <a href="https://electronjs.org/docs/api/structures/point">Point</a> (optional) - coordinates of the custom cursor's hotspot</li>
</ul>
<p>Emitted when the cursor's type changes. The <code>type</code> parameter can be <code>default</code>,
<code>crosshair</code>, <code>pointer</code>, <code>text</code>, <code>wait</code>, <code>help</code>, <code>e-resize</code>, <code>n-resize</code>,
<code>ne-resize</code>, <code>nw-resize</code>, <code>s-resize</code>, <code>se-resize</code>, <code>sw-resize</code>, <code>w-resize</code>,
<code>ns-resize</code>, <code>ew-resize</code>, <code>nesw-resize</code>, <code>nwse-resize</code>, <code>col-resize</code>,
<code>row-resize</code>, <code>m-panning</code>, <code>e-panning</code>, <code>n-panning</code>, <code>ne-panning</code>, <code>nw-panning</code>,
<code>s-panning</code>, <code>se-panning</code>, <code>sw-panning</code>, <code>w-panning</code>, <code>move</code>, <code>vertical-text</code>,
<code>cell</code>, <code>context-menu</code>, <code>alias</code>, <code>progress</code>, <code>nodrop</code>, <code>copy</code>, <code>none</code>,
<code>not-allowed</code>, <code>zoom-in</code>, <code>zoom-out</code>, <code>grab</code>, <code>grabbing</code>, <code>custom</code>.</p>
<p>If the <code>type</code> parameter is <code>custom</code>, the <code>image</code> parameter will hold the custom
cursor image in a <code>NativeImage</code>, and <code>scale</code>, <code>size</code> and <code>hotspot</code> will hold
additional information about the custom cursor.</p>
<h4 id="event-context-menu"><a href="#event-context-menu">Event: 'context-menu'</a><a class="header-link" href="#event-context-menu" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li>
<p><code>params</code> Object</p>
<ul>
<li><code>x</code> Integer - x coordinate</li>
<li><code>y</code> Integer - y coordinate</li>
<li><code>linkURL</code> String - URL of the link that encloses the node the context menu
was invoked on.</li>
<li><code>linkText</code> String - Text associated with the link. May be an empty
string if the contents of the link are an image.</li>
<li><code>pageURL</code> String - URL of the top level page that the context menu was
invoked on.</li>
<li><code>frameURL</code> String - URL of the subframe that the context menu was invoked
on.</li>
<li><code>srcURL</code> String - Source URL for the element that the context menu
was invoked on. Elements with source URLs are images, audio and video.</li>
<li><code>mediaType</code> String - Type of the node the context menu was invoked on. Can
be <code>none</code>, <code>image</code>, <code>audio</code>, <code>video</code>, <code>canvas</code>, <code>file</code> or <code>plugin</code>.</li>
<li><code>hasImageContents</code> Boolean - Whether the context menu was invoked on an image
which has non-empty contents.</li>
<li><code>isEditable</code> Boolean - Whether the context is editable.</li>
<li><code>selectionText</code> String - Text of the selection that the context menu was
invoked on.</li>
<li><code>titleText</code> String - Title or alt text of the selection that the context
was invoked on.</li>
<li><code>misspelledWord</code> String - The misspelled word under the cursor, if any.</li>
<li><code>frameCharset</code> String - The character encoding of the frame on which the
menu was invoked.</li>
<li><code>inputFieldType</code> String - If the context menu was invoked on an input
field, the type of that field. Possible values are <code>none</code>, <code>plainText</code>,
<code>password</code>, <code>other</code>.</li>
<li><code>menuSourceType</code> String - Input source that invoked the context menu.
Can be <code>none</code>, <code>mouse</code>, <code>keyboard</code>, <code>touch</code>, <code>touchMenu</code>.</li>
<li>
<p><code>mediaFlags</code> Object - The flags for the media element the context menu was
invoked on.</p>
<ul>
<li><code>inError</code> Boolean - Whether the media element has crashed.</li>
<li><code>isPaused</code> Boolean - Whether the media element is paused.</li>
<li><code>isMuted</code> Boolean - Whether the media element is muted.</li>
<li><code>hasAudio</code> Boolean - Whether the media element has audio.</li>
<li><code>isLooping</code> Boolean - Whether the media element is looping.</li>
<li><code>isControlsVisible</code> Boolean - Whether the media element's controls are
visible.</li>
<li><code>canToggleControls</code> Boolean - Whether the media element's controls are
toggleable.</li>
<li><code>canRotate</code> Boolean - Whether the media element can be rotated.</li>
</ul>
</li>
<li>
<p><code>editFlags</code> Object - These flags indicate whether the renderer believes it
is able to perform the corresponding action.</p>
<ul>
<li><code>canUndo</code> Boolean - Whether the renderer believes it can undo.</li>
<li><code>canRedo</code> Boolean - Whether the renderer believes it can redo.</li>
<li><code>canCut</code> Boolean - Whether the renderer believes it can cut.</li>
<li><code>canCopy</code> Boolean - Whether the renderer believes it can copy</li>
<li><code>canPaste</code> Boolean - Whether the renderer believes it can paste.</li>
<li><code>canDelete</code> Boolean - Whether the renderer believes it can delete.</li>
<li><code>canSelectAll</code> Boolean - Whether the renderer believes it can select all.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Emitted when there is a new context menu that needs to be handled.</p>
<h4 id="event-select-bluetooth-device"><a href="#event-select-bluetooth-device">Event: 'select-bluetooth-device'</a><a class="header-link" href="#event-select-bluetooth-device" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>devices</code> <a href="https://electronjs.org/docs/api/structures/bluetooth-device">BluetoothDevice[]</a></li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>deviceId</code> String</li>
</ul>
</li>
</ul>
<p>Emitted when bluetooth device needs to be selected on call to
<code>navigator.bluetooth.requestDevice</code>. To use <code>navigator.bluetooth</code> api
<code>webBluetooth</code> should be enabled.  If <code>event.preventDefault</code> is not called,
first available device will be selected. <code>callback</code> should be called with
<code>deviceId</code> to be selected, passing empty string to <code>callback</code> will
cancel the request.</p>
<pre><code class="hljs language-javascript" id="_mdh3qk1"><span class="hljs-keyword">const</span> {app, webContents} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
app.commandLine.appendSwitch(<span class="hljs-string">'enable-web-bluetooth'</span>)

app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  webContents.on(<span class="hljs-string">'select-bluetooth-device'</span>, (event, deviceList, callback) =&gt; {
    event.preventDefault()
    <span class="hljs-keyword">let</span> result = deviceList.find(<span class="hljs-function">(<span class="hljs-params">device</span>) =&gt;</span> {
      <span class="hljs-keyword">return</span> device.deviceName === <span class="hljs-string">'test'</span>
    })
    <span class="hljs-keyword">if</span> (!result) {
      callback(<span class="hljs-string">''</span>)
    } <span class="hljs-keyword">else</span> {
      callback(result.deviceId)
    }
  })
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_mdh3qk1">Copy</button></pre>
<h4 id="event-paint"><a href="#event-paint">Event: 'paint'</a><a class="header-link" href="#event-paint" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>dirtyRect</code> <a href="https://electronjs.org/docs/api/structures/rectangle">Rectangle</a></li>
<li><code>image</code> <a href="https://electronjs.org/docs/api/native-image">NativeImage</a> - The image data of the whole frame.</li>
</ul>
<p>Emitted when a new frame is generated. Only the dirty area is passed in the
buffer.</p>
<pre><code class="hljs language-javascript" id="_sars84yd"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">webPreferences</span>: {<span class="hljs-attr">offscreen</span>: <span class="hljs-literal">true</span>}})
win.webContents.on(<span class="hljs-string">'paint'</span>, (event, dirty, image) =&gt; {
  <span class="hljs-comment">// updateBitmap(dirty, image.getBitmap())</span>
})
win.loadURL(<span class="hljs-string">'http://github.com'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_sars84yd">Copy</button></pre>
<h4 id="event-devtools-reload-page"><a href="#event-devtools-reload-page">Event: 'devtools-reload-page'</a><a class="header-link" href="#event-devtools-reload-page" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Emitted when the devtools window instructs the webContents to reload</p>
<h4 id="event-will-attach-webview"><a href="#event-will-attach-webview">Event: 'will-attach-webview'</a><a class="header-link" href="#event-will-attach-webview" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>webPreferences</code> Object - The web preferences that will be used by the guest
page. This object can be modified to adjust the preferences for the guest
page.</li>
<li><code>params</code> Object - The other <code>&lt;webview&gt;</code> parameters such as the <code>src</code> URL.
This object can be modified to adjust the parameters of the guest page.</li>
</ul>
<p>Emitted when a <code>&lt;webview&gt;</code>'s web contents is being attached to this web
contents. Calling <code>event.preventDefault()</code> will destroy the guest page.</p>
<p>This event can be used to configure <code>webPreferences</code> for the <code>webContents</code>
of a <code>&lt;webview&gt;</code> before it's loaded, and provides the ability to set settings
that can't be set via <code>&lt;webview&gt;</code> attributes.</p>
<p><strong>Note:</strong> The specified <code>preload</code> script option will be appear as <code>preloadURL</code>
(not <code>preload</code>) in the <code>webPreferences</code> object emitted with this event.</p>
<h4 id="event-did-attach-webview"><a href="#event-did-attach-webview">Event: 'did-attach-webview'</a><a class="header-link" href="#event-did-attach-webview" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>event</code> Event</li>
<li><code>webContents</code> WebContents - The guest web contents that is used by the
<code>&lt;webview&gt;</code>.</li>
</ul>
<p>Emitted when a <code>&lt;webview&gt;</code> has been attached to this web contents.</p>
<h4 id="event-console-message"><a href="#event-console-message">Event: 'console-message'</a><a class="header-link" href="#event-console-message" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns:</p>
<ul>
<li><code>level</code> Integer</li>
<li><code>message</code> String</li>
<li><code>line</code> Integer</li>
<li><code>sourceId</code> String</li>
</ul>
<p>Emitted when the associated window logs a console message. Will not be emitted
for windows with <em>offscreen rendering</em> enabled.</p>
<h3 id="instance-methods"><a href="#instance-methods">Instance Methods</a><a class="header-link" href="#instance-methods" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<h4 id="contentsloadurlurl-options"><a href="#contentsloadurlurl-options"><code>contents.loadURL(url[, options])</code></a><a class="header-link" href="#contentsloadurlurl-options" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>url</code> String</li>
<li>
<p><code>options</code> Object (optional)</p>
<ul>
<li><code>httpReferrer</code> String (optional) - A HTTP Referrer url.</li>
<li><code>userAgent</code> String (optional) - A user agent originating the request.</li>
<li><code>extraHeaders</code> String (optional) - Extra headers separated by "\n"</li>
<li><code>postData</code> (<a href="https://electronjs.org/docs/api/structures/upload-raw-data">UploadRawData[]</a> | <a href="https://electronjs.org/docs/api/structures/upload-file">UploadFile[]</a> | <a href="https://electronjs.org/docs/api/structures/upload-file-system">UploadFileSystem[]</a> | <a href="https://electronjs.org/docs/api/structures/upload-blob">UploadBlob[]</a>) - (optional)</li>
<li><code>baseURLForDataURL</code> String (optional) - Base url (with 
trailing path separator) for files to be loaded by the data url. This is
 needed only if the specified <code>url</code> is a data url and needs to load other files.</li>
</ul>
</li>
</ul>
<p>Loads the <code>url</code> in the window. The <code>url</code> must contain the protocol prefix,
e.g. the <code>http://</code> or <code>file://</code>. If the load should bypass http cache then
use the <code>pragma</code> header to achieve it.</p>
<pre><code class="hljs language-javascript" id="_l8i8w7jq"><span class="hljs-keyword">const</span> {webContents} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">const</span> options = {<span class="hljs-attr">extraHeaders</span>: <span class="hljs-string">'pragma: no-cache\n'</span>}
webContents.loadURL(<span class="hljs-string">'https://github.com'</span>, options)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_l8i8w7jq">Copy</button></pre>
<h4 id="contentsdownloadurlurl"><a href="#contentsdownloadurlurl"><code>contents.downloadURL(url)</code></a><a class="header-link" href="#contentsdownloadurlurl" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>url</code> String</li>
</ul>
<p>Initiates a download of the resource at <code>url</code> without navigating. The
<code>will-download</code> event of <code>session</code> will be triggered.</p>
<h4 id="contentsgeturl"><a href="#contentsgeturl"><code>contents.getURL()</code></a><a class="header-link" href="#contentsgeturl" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>String</code> - The URL of the current web page.</p>
<pre><code class="hljs language-javascript" id="_i3cfuclq"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">width</span>: <span class="hljs-number">800</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">600</span>})
win.loadURL(<span class="hljs-string">'http://github.com'</span>)

<span class="hljs-keyword">let</span> currentURL = win.webContents.getURL()
<span class="hljs-built_in">console</span>.log(currentURL)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_i3cfuclq">Copy</button></pre>
<h4 id="contentsgettitle"><a href="#contentsgettitle"><code>contents.getTitle()</code></a><a class="header-link" href="#contentsgettitle" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>String</code> - The title of the current web page.</p>
<h4 id="contentsisdestroyed"><a href="#contentsisdestroyed"><code>contents.isDestroyed()</code></a><a class="header-link" href="#contentsisdestroyed" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the web page is destroyed.</p>
<h4 id="contentsfocus"><a href="#contentsfocus"><code>contents.focus()</code></a><a class="header-link" href="#contentsfocus" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Focuses the web page.</p>
<h4 id="contentsisfocused"><a href="#contentsisfocused"><code>contents.isFocused()</code></a><a class="header-link" href="#contentsisfocused" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the web page is focused.</p>
<h4 id="contentsisloading"><a href="#contentsisloading"><code>contents.isLoading()</code></a><a class="header-link" href="#contentsisloading" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether web page is still loading resources.</p>
<h4 id="contentsisloadingmainframe"><a href="#contentsisloadingmainframe"><code>contents.isLoadingMainFrame()</code></a><a class="header-link" href="#contentsisloadingmainframe" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the main frame (and not just iframes or frames within it) is
still loading.</p>
<h4 id="contentsiswaitingforresponse"><a href="#contentsiswaitingforresponse"><code>contents.isWaitingForResponse()</code></a><a class="header-link" href="#contentsiswaitingforresponse" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the web page is waiting for a first-response from the main
resource of the page.</p>
<h4 id="contentsstop"><a href="#contentsstop"><code>contents.stop()</code></a><a class="header-link" href="#contentsstop" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Stops any pending navigation.</p>
<h4 id="contentsreload"><a href="#contentsreload"><code>contents.reload()</code></a><a class="header-link" href="#contentsreload" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Reloads the current web page.</p>
<h4 id="contentsreloadignoringcache"><a href="#contentsreloadignoringcache"><code>contents.reloadIgnoringCache()</code></a><a class="header-link" href="#contentsreloadignoringcache" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Reloads current page and ignores cache.</p>
<h4 id="contentscangoback"><a href="#contentscangoback"><code>contents.canGoBack()</code></a><a class="header-link" href="#contentscangoback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the browser can go back to previous web page.</p>
<h4 id="contentscangoforward"><a href="#contentscangoforward"><code>contents.canGoForward()</code></a><a class="header-link" href="#contentscangoforward" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the browser can go forward to next web page.</p>
<h4 id="contentscangotooffsetoffset"><a href="#contentscangotooffsetoffset"><code>contents.canGoToOffset(offset)</code></a><a class="header-link" href="#contentscangotooffsetoffset" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>offset</code> Integer</li>
</ul>
<p>Returns <code>Boolean</code> - Whether the web page can go to <code>offset</code>.</p>
<h4 id="contentsclearhistory"><a href="#contentsclearhistory"><code>contents.clearHistory()</code></a><a class="header-link" href="#contentsclearhistory" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Clears the navigation history.</p>
<h4 id="contentsgoback"><a href="#contentsgoback"><code>contents.goBack()</code></a><a class="header-link" href="#contentsgoback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Makes the browser go back a web page.</p>
<h4 id="contentsgoforward"><a href="#contentsgoforward"><code>contents.goForward()</code></a><a class="header-link" href="#contentsgoforward" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Makes the browser go forward a web page.</p>
<h4 id="contentsgotoindexindex"><a href="#contentsgotoindexindex"><code>contents.goToIndex(index)</code></a><a class="header-link" href="#contentsgotoindexindex" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>index</code> Integer</li>
</ul>
<p>Navigates browser to the specified absolute web page index.</p>
<h4 id="contentsgotooffsetoffset"><a href="#contentsgotooffsetoffset"><code>contents.goToOffset(offset)</code></a><a class="header-link" href="#contentsgotooffsetoffset" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>offset</code> Integer</li>
</ul>
<p>Navigates to the specified offset from the "current entry".</p>
<h4 id="contentsiscrashed"><a href="#contentsiscrashed"><code>contents.isCrashed()</code></a><a class="header-link" href="#contentsiscrashed" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the renderer process has crashed.</p>
<h4 id="contentssetuseragentuseragent"><a href="#contentssetuseragentuseragent"><code>contents.setUserAgent(userAgent)</code></a><a class="header-link" href="#contentssetuseragentuseragent" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>userAgent</code> String</li>
</ul>
<p>Overrides the user agent for this web page.</p>
<h4 id="contentsgetuseragent"><a href="#contentsgetuseragent"><code>contents.getUserAgent()</code></a><a class="header-link" href="#contentsgetuseragent" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>String</code> - The user agent for this web page.</p>
<h4 id="contentsinsertcsscss"><a href="#contentsinsertcsscss"><code>contents.insertCSS(css)</code></a><a class="header-link" href="#contentsinsertcsscss" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>css</code> String</li>
</ul>
<p>Injects CSS into the current web page.</p>
<h4 id="contentsexecutejavascriptcode-usergesture-callback"><a href="#contentsexecutejavascriptcode-usergesture-callback"><code>contents.executeJavaScript(code[, userGesture, callback])</code></a><a class="header-link" href="#contentsexecutejavascriptcode-usergesture-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>code</code> String</li>
<li><code>userGesture</code> Boolean (optional) - Default is <code>false</code>.</li>
<li>
<p><code>callback</code> Function (optional) - Called after script has been executed.</p>
<ul>
<li><code>result</code> Any</li>
</ul>
</li>
</ul>
<p>Returns <code>Promise</code> - A promise that resolves with the result of the executed code
or is rejected if the result of the code is a rejected promise.</p>
<p>Evaluates <code>code</code> in page.</p>
<p>In the browser window some HTML APIs like <code>requestFullScreen</code> can only be
invoked by a gesture from the user. Setting <code>userGesture</code> to <code>true</code> will remove
this limitation.</p>
<p>If the result of the executed code is a promise the callback result will be the
resolved value of the promise.  We recommend that you use the returned Promise
to handle code that results in a Promise.</p>
<pre><code class="hljs language-js" id="_nhaksfjf">contents.executeJavaScript(<span class="hljs-string">'fetch("https://jsonplaceholder.typicode.com/users/1").then(resp =&gt; resp.json())'</span>, <span class="hljs-literal">true</span>)
  .then(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> {
    <span class="hljs-built_in">console</span>.log(result) <span class="hljs-comment">// Will be the JSON object from the fetch call</span>
  })</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_nhaksfjf">Copy</button></pre>
<h4 id="contentssetignoremenushortcutsignore-experimental"><a href="#contentssetignoremenushortcutsignore-experimental"><code>contents.setIgnoreMenuShortcuts(ignore)</code> <em>Experimental</em></a><a class="header-link" href="#contentssetignoremenushortcutsignore-experimental" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>ignore</code> Boolean</li>
</ul>
<p>Ignore application menu shortcuts while this web contents is focused.</p>
<h4 id="contentssetaudiomutedmuted"><a href="#contentssetaudiomutedmuted"><code>contents.setAudioMuted(muted)</code></a><a class="header-link" href="#contentssetaudiomutedmuted" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>muted</code> Boolean</li>
</ul>
<p>Mute the audio on the current web page.</p>
<h4 id="contentsisaudiomuted"><a href="#contentsisaudiomuted"><code>contents.isAudioMuted()</code></a><a class="header-link" href="#contentsisaudiomuted" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether this page has been muted.</p>
<h4 id="contentssetzoomfactorfactor"><a href="#contentssetzoomfactorfactor"><code>contents.setZoomFactor(factor)</code></a><a class="header-link" href="#contentssetzoomfactorfactor" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>factor</code> Number - Zoom factor.</li>
</ul>
<p>Changes the zoom factor to the specified factor. Zoom factor is
zoom percent divided by 100, so 300% = 3.0.</p>
<h4 id="contentsgetzoomfactorcallback"><a href="#contentsgetzoomfactorcallback"><code>contents.getZoomFactor(callback)</code></a><a class="header-link" href="#contentsgetzoomfactorcallback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>zoomFactor</code> Number</li>
</ul>
</li>
</ul>
<p>Sends a request to get current zoom factor, the <code>callback</code> will be called with
<code>callback(zoomFactor)</code>.</p>
<h4 id="contentssetzoomlevellevel"><a href="#contentssetzoomlevellevel"><code>contents.setZoomLevel(level)</code></a><a class="header-link" href="#contentssetzoomlevellevel" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>level</code> Number - Zoom level</li>
</ul>
<p>Changes the zoom level to the specified level. The original size is 0 and each
increment above or below represents zooming 20% larger or smaller to default
limits of 300% and 50% of original size, respectively.</p>
<h4 id="contentsgetzoomlevelcallback"><a href="#contentsgetzoomlevelcallback"><code>contents.getZoomLevel(callback)</code></a><a class="header-link" href="#contentsgetzoomlevelcallback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>zoomLevel</code> Number</li>
</ul>
</li>
</ul>
<p>Sends a request to get current zoom level, the <code>callback</code> will be called with
<code>callback(zoomLevel)</code>.</p>
<h4 id="contentssetzoomlevellimitsminimumlevel-maximumlevel"><a href="#contentssetzoomlevellimitsminimumlevel-maximumlevel"><code>contents.setZoomLevelLimits(minimumLevel, maximumLevel)</code></a><a class="header-link" href="#contentssetzoomlevellimitsminimumlevel-maximumlevel" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>minimumLevel</code> Number</li>
<li><code>maximumLevel</code> Number</li>
</ul>
<p><strong>Deprecated:</strong> Call <code>setVisualZoomLevelLimits</code> instead to set the visual zoom
level limits. This method will be removed in Electron 2.0.</p>
<h4 id="contentssetvisualzoomlevellimitsminimumlevel-maximumlevel"><a href="#contentssetvisualzoomlevellimitsminimumlevel-maximumlevel"><code>contents.setVisualZoomLevelLimits(minimumLevel, maximumLevel)</code></a><a class="header-link" href="#contentssetvisualzoomlevellimitsminimumlevel-maximumlevel" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>minimumLevel</code> Number</li>
<li><code>maximumLevel</code> Number</li>
</ul>
<p>Sets the maximum and minimum pinch-to-zoom level.</p>
<h4 id="contentssetlayoutzoomlevellimitsminimumlevel-maximumlevel"><a href="#contentssetlayoutzoomlevellimitsminimumlevel-maximumlevel"><code>contents.setLayoutZoomLevelLimits(minimumLevel, maximumLevel)</code></a><a class="header-link" href="#contentssetlayoutzoomlevellimitsminimumlevel-maximumlevel" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>minimumLevel</code> Number</li>
<li><code>maximumLevel</code> Number</li>
</ul>
<p>Sets the maximum and minimum layout-based (i.e. non-visual) zoom level.</p>
<h4 id="contentsundo"><a href="#contentsundo"><code>contents.undo()</code></a><a class="header-link" href="#contentsundo" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Executes the editing command <code>undo</code> in web page.</p>
<h4 id="contentsredo"><a href="#contentsredo"><code>contents.redo()</code></a><a class="header-link" href="#contentsredo" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Executes the editing command <code>redo</code> in web page.</p>
<h4 id="contentscut"><a href="#contentscut"><code>contents.cut()</code></a><a class="header-link" href="#contentscut" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Executes the editing command <code>cut</code> in web page.</p>
<h4 id="contentscopy"><a href="#contentscopy"><code>contents.copy()</code></a><a class="header-link" href="#contentscopy" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Executes the editing command <code>copy</code> in web page.</p>
<h4 id="contentscopyimageatx-y"><a href="#contentscopyimageatx-y"><code>contents.copyImageAt(x, y)</code></a><a class="header-link" href="#contentscopyimageatx-y" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>x</code> Integer</li>
<li><code>y</code> Integer</li>
</ul>
<p>Copy the image at the given position to the clipboard.</p>
<h4 id="contentspaste"><a href="#contentspaste"><code>contents.paste()</code></a><a class="header-link" href="#contentspaste" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Executes the editing command <code>paste</code> in web page.</p>
<h4 id="contentspasteandmatchstyle"><a href="#contentspasteandmatchstyle"><code>contents.pasteAndMatchStyle()</code></a><a class="header-link" href="#contentspasteandmatchstyle" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Executes the editing command <code>pasteAndMatchStyle</code> in web page.</p>
<h4 id="contentsdelete"><a href="#contentsdelete"><code>contents.delete()</code></a><a class="header-link" href="#contentsdelete" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Executes the editing command <code>delete</code> in web page.</p>
<h4 id="contentsselectall"><a href="#contentsselectall"><code>contents.selectAll()</code></a><a class="header-link" href="#contentsselectall" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Executes the editing command <code>selectAll</code> in web page.</p>
<h4 id="contentsunselect"><a href="#contentsunselect"><code>contents.unselect()</code></a><a class="header-link" href="#contentsunselect" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Executes the editing command <code>unselect</code> in web page.</p>
<h4 id="contentsreplacetext"><a href="#contentsreplacetext"><code>contents.replace(text)</code></a><a class="header-link" href="#contentsreplacetext" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>text</code> String</li>
</ul>
<p>Executes the editing command <code>replace</code> in web page.</p>
<h4 id="contentsreplacemisspellingtext"><a href="#contentsreplacemisspellingtext"><code>contents.replaceMisspelling(text)</code></a><a class="header-link" href="#contentsreplacemisspellingtext" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>text</code> String</li>
</ul>
<p>Executes the editing command <code>replaceMisspelling</code> in web page.</p>
<h4 id="contentsinserttexttext"><a href="#contentsinserttexttext"><code>contents.insertText(text)</code></a><a class="header-link" href="#contentsinserttexttext" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>text</code> String</li>
</ul>
<p>Inserts <code>text</code> to the focused element.</p>
<h4 id="contentsfindinpagetext-options"><a href="#contentsfindinpagetext-options"><code>contents.findInPage(text[, options])</code></a><a class="header-link" href="#contentsfindinpagetext-options" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>text</code> String - Content to be searched, must not be empty.</li>
<li>
<p><code>options</code> Object (optional)</p>
<ul>
<li><code>forward</code> Boolean - (optional) Whether to search forward or backward, defaults to <code>true</code>.</li>
<li><code>findNext</code> Boolean - (optional) Whether the operation is first request or a follow up,
defaults to <code>false</code>.</li>
<li><code>matchCase</code> Boolean - (optional) Whether search should be case-sensitive,
defaults to <code>false</code>.</li>
<li><code>wordStart</code> Boolean - (optional) Whether to look only at the start of words.
defaults to <code>false</code>.</li>
<li><code>medialCapitalAsWordStart</code> Boolean - (optional) When combined with <code>wordStart</code>,
accepts a match in the middle of a word if the match begins with an
uppercase letter followed by a lowercase or non-letter.
Accepts several other intra-word matches, defaults to <code>false</code>.</li>
</ul>
</li>
</ul>
<p>Returns <code>Integer</code> - The request id used for the request.</p>
<p>Starts a request to find all matches for the <code>text</code> in the web page. The result of the request
can be obtained by subscribing to <a href="https://electronjs.org/docs/api/web-contents#event-found-in-page"><code>found-in-page</code></a> event.</p>
<h4 id="contentsstopfindinpageaction"><a href="#contentsstopfindinpageaction"><code>contents.stopFindInPage(action)</code></a><a class="header-link" href="#contentsstopfindinpageaction" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>action</code> String - Specifies the action to take place when ending
[<code>webContents.findInPage</code>] request.</p>
<ul>
<li><code>clearSelection</code> - Clear the selection.</li>
<li><code>keepSelection</code> - Translate the selection into a normal selection.</li>
<li><code>activateSelection</code> - Focus and click the selection node.</li>
</ul>
</li>
</ul>
<p>Stops any <code>findInPage</code> request for the <code>webContents</code> with the provided <code>action</code>.</p>
<pre><code class="hljs language-javascript" id="_lyhuttm"><span class="hljs-keyword">const</span> {webContents} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
webContents.on(<span class="hljs-string">'found-in-page'</span>, (event, result) =&gt; {
  <span class="hljs-keyword">if</span> (result.finalUpdate) webContents.stopFindInPage(<span class="hljs-string">'clearSelection'</span>)
})

<span class="hljs-keyword">const</span> requestId = webContents.findInPage(<span class="hljs-string">'api'</span>)
<span class="hljs-built_in">console</span>.log(requestId)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_lyhuttm">Copy</button></pre>
<h4 id="contentscapturepagerect-callback"><a href="#contentscapturepagerect-callback"><code>contents.capturePage([rect, ]callback)</code></a><a class="header-link" href="#contentscapturepagerect-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>rect</code> <a href="https://electronjs.org/docs/api/structures/rectangle">Rectangle</a> (optional) - The area of the page to be captured</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>image</code> <a href="https://electronjs.org/docs/api/native-image">NativeImage</a></li>
</ul>
</li>
</ul>
<p>Captures a snapshot of the page within <code>rect</code>. Upon completion <code>callback</code> will
be called with <code>callback(image)</code>. The <code>image</code> is an instance of
<a href="https://electronjs.org/docs/api/native-image">NativeImage</a> that stores data of the snapshot. Omitting
<code>rect</code> will capture the whole visible page.</p>
<h4 id="contentshasserviceworkercallback"><a href="#contentshasserviceworkercallback"><code>contents.hasServiceWorker(callback)</code></a><a class="header-link" href="#contentshasserviceworkercallback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>hasWorker</code> Boolean</li>
</ul>
</li>
</ul>
<p>Checks if any ServiceWorker is registered and returns a boolean as
response to <code>callback</code>.</p>
<h4 id="contentsunregisterserviceworkercallback"><a href="#contentsunregisterserviceworkercallback"><code>contents.unregisterServiceWorker(callback)</code></a><a class="header-link" href="#contentsunregisterserviceworkercallback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>success</code> Boolean</li>
</ul>
</li>
</ul>
<p>Unregisters any ServiceWorker if present and returns a boolean as
response to <code>callback</code> when the JS promise is fulfilled or false
when the JS promise is rejected.</p>
<h4 id="contentsgetprinters"><a href="#contentsgetprinters"><code>contents.getPrinters()</code></a><a class="header-link" href="#contentsgetprinters" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Get the system printer list.</p>
<p>Returns <a href="https://electronjs.org/docs/api/structures/printer-info"><code>PrinterInfo[]</code></a></p>
<h4 id="contentsprintoptions-callback"><a href="#contentsprintoptions-callback"><code>contents.print([options], [callback])</code></a><a class="header-link" href="#contentsprintoptions-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>options</code> Object (optional)</p>
<ul>
<li><code>silent</code> Boolean (optional) - Don't ask user for print settings. Default is <code>false</code>.</li>
<li><code>printBackground</code> Boolean (optional) - Also prints the background color and image of
the web page. Default is <code>false</code>.</li>
<li><code>deviceName</code> String (optional) - Set the printer device name to use. Default is <code>''</code>.</li>
</ul>
</li>
<li>
<p><code>callback</code> Function (optional)</p>
<ul>
<li>success` Boolean - Indicates success of the print call.</li>
</ul>
</li>
</ul>
<p>Prints window's web page. When <code>silent</code> is set to <code>true</code>, Electron will pick
the system's default printer if <code>deviceName</code> is empty and the default settings
for printing.</p>
<p>Calling <code>window.print()</code> in web page is equivalent to calling
<code>webContents.print({silent: false, printBackground: false, deviceName: ''})</code>.</p>
<p>Use <code>page-break-before: always;</code> CSS style to force to print to a new page.</p>
<h4 id="contentsprinttopdfoptions-callback"><a href="#contentsprinttopdfoptions-callback"><code>contents.printToPDF(options, callback)</code></a><a class="header-link" href="#contentsprinttopdfoptions-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>marginsType</code> Integer - (optional) Specifies the type of margins to use. Uses 0 for
default margin, 1 for no margin, and 2 for minimum margin.</li>
<li><code>pageSize</code> String - (optional) Specify page size of the generated PDF. Can be <code>A3</code>,
<code>A4</code>, <code>A5</code>, <code>Legal</code>, <code>Letter</code>, <code>Tabloid</code> or an Object containing <code>height</code>
and <code>width</code> in microns.</li>
<li><code>printBackground</code> Boolean - (optional) Whether to print CSS backgrounds.</li>
<li><code>printSelectionOnly</code> Boolean - (optional) Whether to print selection only.</li>
<li><code>landscape</code> Boolean - (optional) <code>true</code> for landscape, <code>false</code> for portrait.</li>
</ul>
</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>error</code> Error</li>
<li><code>data</code> Buffer</li>
</ul>
</li>
</ul>
<p>Prints window's web page as PDF with Chromium's preview printing custom
settings.</p>
<p>The <code>callback</code> will be called with <code>callback(error, data)</code> on completion. The
<code>data</code> is a <code>Buffer</code> that contains the generated PDF data.</p>
<p>The <code>landscape</code> will be ignored if <code>@page</code> CSS at-rule is used in the web page.</p>
<p>By default, an empty <code>options</code> will be regarded as:</p>
<pre><code class="hljs language-javascript" id="_75t2v93l">{
  <span class="hljs-attr">marginsType</span>: <span class="hljs-number">0</span>,
  <span class="hljs-attr">printBackground</span>: <span class="hljs-literal">false</span>,
  <span class="hljs-attr">printSelectionOnly</span>: <span class="hljs-literal">false</span>,
  <span class="hljs-attr">landscape</span>: <span class="hljs-literal">false</span>
}</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_75t2v93l">Copy</button></pre>
<p>Use <code>page-break-before: always;</code> CSS style to force to print to a new page.</p>
<p>An example of <code>webContents.printToPDF</code>:</p>
<pre><code class="hljs language-javascript" id="_b8rhaiip"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>)

<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">width</span>: <span class="hljs-number">800</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">600</span>})
win.loadURL(<span class="hljs-string">'http://github.com'</span>)

win.webContents.on(<span class="hljs-string">'did-finish-load'</span>, () =&gt; {
  <span class="hljs-comment">// Use default printing options</span>
  win.webContents.printToPDF({}, (error, data) =&gt; {
    <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error
    fs.writeFile(<span class="hljs-string">'/tmp/print.pdf'</span>, data, (error) =&gt; {
      <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error
      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Write PDF successfully.'</span>)
    })
  })
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_b8rhaiip">Copy</button></pre>
<h4 id="contentsaddworkspacepath"><a href="#contentsaddworkspacepath"><code>contents.addWorkSpace(path)</code></a><a class="header-link" href="#contentsaddworkspacepath" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>path</code> String</li>
</ul>
<p>Adds the specified path to DevTools workspace. Must be used after DevTools
creation:</p>
<pre><code class="hljs language-javascript" id="_avcvh8ab"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow()
win.webContents.on(<span class="hljs-string">'devtools-opened'</span>, () =&gt; {
  win.webContents.addWorkSpace(__dirname)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_avcvh8ab">Copy</button></pre>
<h4 id="contentsremoveworkspacepath"><a href="#contentsremoveworkspacepath"><code>contents.removeWorkSpace(path)</code></a><a class="header-link" href="#contentsremoveworkspacepath" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>path</code> String</li>
</ul>
<p>Removes the specified path from DevTools workspace.</p>
<h4 id="contentsopendevtoolsoptions"><a href="#contentsopendevtoolsoptions"><code>contents.openDevTools([options])</code></a><a class="header-link" href="#contentsopendevtoolsoptions" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>options</code> Object (optional)</p>
<ul>
<li><code>mode</code> String - Opens the devtools with specified dock state, can be
<code>right</code>, <code>bottom</code>, <code>undocked</code>, <code>detach</code>. Defaults to last used dock state.
In <code>undocked</code> mode it's possible to dock back. In <code>detach</code> mode it's not.</li>
</ul>
</li>
</ul>
<p>Opens the devtools.</p>
<h4 id="contentsclosedevtools"><a href="#contentsclosedevtools"><code>contents.closeDevTools()</code></a><a class="header-link" href="#contentsclosedevtools" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Closes the devtools.</p>
<h4 id="contentsisdevtoolsopened"><a href="#contentsisdevtoolsopened"><code>contents.isDevToolsOpened()</code></a><a class="header-link" href="#contentsisdevtoolsopened" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the devtools is opened.</p>
<h4 id="contentsisdevtoolsfocused"><a href="#contentsisdevtoolsfocused"><code>contents.isDevToolsFocused()</code></a><a class="header-link" href="#contentsisdevtoolsfocused" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Whether the devtools view is focused .</p>
<h4 id="contentstoggledevtools"><a href="#contentstoggledevtools"><code>contents.toggleDevTools()</code></a><a class="header-link" href="#contentstoggledevtools" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Toggles the developer tools.</p>
<h4 id="contentsinspectelementx-y"><a href="#contentsinspectelementx-y"><code>contents.inspectElement(x, y)</code></a><a class="header-link" href="#contentsinspectelementx-y" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>x</code> Integer</li>
<li><code>y</code> Integer</li>
</ul>
<p>Starts inspecting element at position (<code>x</code>, <code>y</code>).</p>
<h4 id="contentsinspectserviceworker"><a href="#contentsinspectserviceworker"><code>contents.inspectServiceWorker()</code></a><a class="header-link" href="#contentsinspectserviceworker" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Opens the developer tools for the service worker context.</p>
<h4 id="contentssendchannel-arg1-arg2-"><a href="#contentssendchannel-arg1-arg2-"><code>contents.send(channel[, arg1][, arg2][, ...])</code></a><a class="header-link" href="#contentssendchannel-arg1-arg2-" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>channel</code> String</li>
<li><code>...args</code> any[]</li>
</ul>
<p>Send an asynchronous message to renderer process via <code>channel</code>, you can also
send arbitrary arguments. Arguments will be serialized in JSON internally and
hence no functions or prototype chain will be included.</p>
<p>The renderer process can handle the message by listening to <code>channel</code> with the
<code>ipcRenderer</code> module.</p>
<p>An example of sending messages from the main process to the renderer process:</p>
<pre><code class="hljs language-javascript" id="_uyjmu09"><span class="hljs-comment">// In the main process.</span>
<span class="hljs-keyword">const</span> {app, BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-literal">null</span>

app.on(<span class="hljs-string">'ready'</span>, () =&gt; {
  win = <span class="hljs-keyword">new</span> BrowserWindow({<span class="hljs-attr">width</span>: <span class="hljs-number">800</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">600</span>})
  win.loadURL(<span class="hljs-string">`file://<span class="hljs-subst">${__dirname}</span>/index.html`</span>)
  win.webContents.on(<span class="hljs-string">'did-finish-load'</span>, () =&gt; {
    win.webContents.send(<span class="hljs-string">'ping'</span>, <span class="hljs-string">'whoooooooh!'</span>)
  })
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_uyjmu09">Copy</button></pre>
<pre><code class="hljs language-html" id="_tjgxh6vn"><span class="hljs-comment">&lt;!-- index.html --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
    <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>).ipcRenderer.on(<span class="hljs-string">'ping'</span>, (event, message) =&gt; {
      <span class="hljs-built_in">console</span>.log(message)  <span class="hljs-comment">// Prints 'whoooooooh!'</span>
    })
  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_tjgxh6vn">Copy</button></pre>
<h4 id="contentsenabledeviceemulationparameters"><a href="#contentsenabledeviceemulationparameters"><code>contents.enableDeviceEmulation(parameters)</code></a><a class="header-link" href="#contentsenabledeviceemulationparameters" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>parameters</code> Object</p>
<ul>
<li>
<p><code>screenPosition</code> String - Specify the screen type to emulate
(default: <code>desktop</code>)</p>
<ul>
<li><code>desktop</code> - Desktop screen type</li>
<li><code>mobile</code> - Mobile screen type</li>
</ul>
</li>
<li><code>screenSize</code> <a href="https://electronjs.org/docs/api/structures/size">Size</a> - Set the emulated screen size (screenPosition == mobile)</li>
<li><code>viewPosition</code> <a href="https://electronjs.org/docs/api/structures/point">Point</a> - Position the view on the screen
(screenPosition == mobile) (default: <code>{x: 0, y: 0}</code>)</li>
<li><code>deviceScaleFactor</code> Integer - Set the device scale factor (if zero defaults to
original device scale factor) (default: <code>0</code>)</li>
<li><code>viewSize</code> <a href="https://electronjs.org/docs/api/structures/size">Size</a> - Set the emulated view size (empty means no override)</li>
<li><code>fitToView</code> Boolean - Whether emulated view should be scaled down if
necessary to fit into available space (default: <code>false</code>)</li>
<li><code>offset</code> <a href="https://electronjs.org/docs/api/structures/point">Point</a> - Offset of the emulated view inside available space
(not in fit to view mode) (default: <code>{x: 0, y: 0}</code>)</li>
<li><code>scale</code> Float - Scale of emulated view inside available space (not in fit to
view mode) (default: <code>1</code>)</li>
</ul>
</li>
</ul>
<p>Enable device emulation with the given parameters.</p>
<h4 id="contentsdisabledeviceemulation"><a href="#contentsdisabledeviceemulation"><code>contents.disableDeviceEmulation()</code></a><a class="header-link" href="#contentsdisabledeviceemulation" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Disable device emulation enabled by <code>webContents.enableDeviceEmulation</code>.</p>
<h4 id="contentssendinputeventevent"><a href="#contentssendinputeventevent"><code>contents.sendInputEvent(event)</code></a><a class="header-link" href="#contentssendinputeventevent" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>event</code> Object</p>
<ul>
<li><code>type</code> String (<strong>required</strong>) - The type of the event, can be <code>mouseDown</code>,
<code>mouseUp</code>, <code>mouseEnter</code>, <code>mouseLeave</code>, <code>contextMenu</code>, <code>mouseWheel</code>,
<code>mouseMove</code>, <code>keyDown</code>, <code>keyUp</code>, <code>char</code>.</li>
<li><code>modifiers</code> String[] - An array of modifiers of the event, can
include <code>shift</code>, <code>control</code>, <code>alt</code>, <code>meta</code>, <code>isKeypad</code>, <code>isAutoRepeat</code>,
<code>leftButtonDown</code>, <code>middleButtonDown</code>, <code>rightButtonDown</code>, <code>capsLock</code>,
<code>numLock</code>, <code>left</code>, <code>right</code>.</li>
</ul>
</li>
</ul>
<p>Sends an input <code>event</code> to the page.
<strong>Note:</strong> The <code>BrowserWindow</code> containing the contents needs to be focused for
<code>sendInputEvent()</code> to work.</p>
<p>For keyboard events, the <code>event</code> object also have following properties:</p>
<ul>
<li><code>keyCode</code> String (<strong>required</strong>) - The character that will be sent
as the keyboard event. Should only use the valid key codes in
<a href="https://electronjs.org/docs/api/accelerator">Accelerator</a>.</li>
</ul>
<p>For mouse events, the <code>event</code> object also have following properties:</p>
<ul>
<li><code>x</code> Integer (<strong>required</strong>)</li>
<li><code>y</code> Integer (<strong>required</strong>)</li>
<li><code>button</code> String - The button pressed, can be <code>left</code>, <code>middle</code>, <code>right</code></li>
<li><code>globalX</code> Integer</li>
<li><code>globalY</code> Integer</li>
<li><code>movementX</code> Integer</li>
<li><code>movementY</code> Integer</li>
<li><code>clickCount</code> Integer</li>
</ul>
<p>For the <code>mouseWheel</code> event, the <code>event</code> object also have following properties:</p>
<ul>
<li><code>deltaX</code> Integer</li>
<li><code>deltaY</code> Integer</li>
<li><code>wheelTicksX</code> Integer</li>
<li><code>wheelTicksY</code> Integer</li>
<li><code>accelerationRatioX</code> Integer</li>
<li><code>accelerationRatioY</code> Integer</li>
<li><code>hasPreciseScrollingDeltas</code> Boolean</li>
<li><code>canScroll</code> Boolean</li>
</ul>
<h4 id="contentsbeginframesubscriptiononlydirty-callback"><a href="#contentsbeginframesubscriptiononlydirty-callback"><code>contents.beginFrameSubscription([onlyDirty ,]callback)</code></a><a class="header-link" href="#contentsbeginframesubscriptiononlydirty-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>onlyDirty</code> Boolean (optional) - Defaults to <code>false</code></li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>frameBuffer</code> Buffer</li>
<li><code>dirtyRect</code> <a href="https://electronjs.org/docs/api/structures/rectangle">Rectangle</a></li>
</ul>
</li>
</ul>
<p>Begin subscribing for presentation events and captured frames, the <code>callback</code>
will be called with <code>callback(frameBuffer, dirtyRect)</code> when there is a
presentation event.</p>
<p>The <code>frameBuffer</code> is a <code>Buffer</code> that contains raw pixel data. On most machines,
the pixel data is effectively stored in 32bit BGRA format, but the actual
representation depends on the endianness of the processor (most modern
processors are little-endian, on machines with big-endian processors the data
is in 32bit ARGB format).</p>
<p>The <code>dirtyRect</code> is an object with <code>x, y, width, height</code> properties that
describes which part of the page was repainted. If <code>onlyDirty</code> is set to
<code>true</code>, <code>frameBuffer</code> will only contain the repainted area. <code>onlyDirty</code>
defaults to <code>false</code>.</p>
<h4 id="contentsendframesubscription"><a href="#contentsendframesubscription"><code>contents.endFrameSubscription()</code></a><a class="header-link" href="#contentsendframesubscription" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>End subscribing for frame presentation events.</p>
<h4 id="contentsstartdragitem"><a href="#contentsstartdragitem"><code>contents.startDrag(item)</code></a><a class="header-link" href="#contentsstartdragitem" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>item</code> Object</p>
<ul>
<li><code>file</code> String or <code>files</code> Array - The path(s) to the file(s) being dragged.</li>
<li><code>icon</code> <a href="https://electronjs.org/docs/api/native-image">NativeImage</a> - The image must be non-empty on
macOS.</li>
</ul>
</li>
</ul>
<p>Sets the <code>item</code> as dragging item for current drag-drop operation, <code>file</code> is the
absolute path of the file to be dragged, and <code>icon</code> is the image showing under
the cursor when dragging.</p>
<h4 id="contentssavepagefullpath-savetype-callback"><a href="#contentssavepagefullpath-savetype-callback"><code>contents.savePage(fullPath, saveType, callback)</code></a><a class="header-link" href="#contentssavepagefullpath-savetype-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>fullPath</code> String - The full file path.</li>
<li>
<p><code>saveType</code> String - Specify the save type.</p>
<ul>
<li><code>HTMLOnly</code> - Save only the HTML of the page.</li>
<li><code>HTMLComplete</code> - Save complete-html page.</li>
<li><code>MHTML</code> - Save complete-html page as MHTML.</li>
</ul>
</li>
<li>
<p><code>callback</code> Function - <code>(error) =&gt; {}</code>.</p>
<ul>
<li><code>error</code> Error</li>
</ul>
</li>
</ul>
<p>Returns <code>Boolean</code> - true if the process of saving page has been initiated successfully.</p>
<pre><code class="hljs language-javascript" id="_8m3ndk5"><span class="hljs-keyword">const</span> {BrowserWindow} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow()

win.loadURL(<span class="hljs-string">'https://github.com'</span>)

win.webContents.on(<span class="hljs-string">'did-finish-load'</span>, () =&gt; {
  win.webContents.savePage(<span class="hljs-string">'/tmp/test.html'</span>, <span class="hljs-string">'HTMLComplete'</span>, (error) =&gt; {
    <span class="hljs-keyword">if</span> (!error) <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Save page successfully'</span>)
  })
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_8m3ndk5">Copy</button></pre>
<h4 id="contentsshowdefinitionforselection-macos"><a href="#contentsshowdefinitionforselection-macos"><code>contents.showDefinitionForSelection()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#contentsshowdefinitionforselection-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Shows pop-up dictionary that searches the selected word on the page.</p>
<h4 id="contentssetsizeoptions"><a href="#contentssetsizeoptions"><code>contents.setSize(options)</code></a><a class="header-link" href="#contentssetsizeoptions" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Set the size of the page. This is only supported for <code>&lt;webview&gt;</code> guest contents.</p>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li>
<p><code>normal</code> Object (optional) - Normal size of the page. This can be used in
combination with the <a href="https://electronjs.org/docs/api/web-view-tag#disableguestresize"><code>disableguestresize</code></a>
attribute to manually resize the webview guest contents.</p>
<ul>
<li><code>width</code> Integer</li>
<li><code>height</code> Integer</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="contentsisoffscreen"><a href="#contentsisoffscreen"><code>contents.isOffscreen()</code></a><a class="header-link" href="#contentsisoffscreen" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - Indicates whether <em>offscreen rendering</em> is enabled.</p>
<h4 id="contentsstartpainting"><a href="#contentsstartpainting"><code>contents.startPainting()</code></a><a class="header-link" href="#contentsstartpainting" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>If <em>offscreen rendering</em> is enabled and not painting, start painting.</p>
<h4 id="contentsstoppainting"><a href="#contentsstoppainting"><code>contents.stopPainting()</code></a><a class="header-link" href="#contentsstoppainting" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>If <em>offscreen rendering</em> is enabled and painting, stop painting.</p>
<h4 id="contentsispainting"><a href="#contentsispainting"><code>contents.isPainting()</code></a><a class="header-link" href="#contentsispainting" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Boolean</code> - If <em>offscreen rendering</em> is enabled returns whether it is currently painting.</p>
<h4 id="contentssetframeratefps"><a href="#contentssetframeratefps"><code>contents.setFrameRate(fps)</code></a><a class="header-link" href="#contentssetframeratefps" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li><code>fps</code> Integer</li>
</ul>
<p>If <em>offscreen rendering</em> is enabled sets the frame rate to the specified number.
Only values between 1 and 60 are accepted.</p>
<h4 id="contentsgetframerate"><a href="#contentsgetframerate"><code>contents.getFrameRate()</code></a><a class="header-link" href="#contentsgetframerate" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Integer</code> - If <em>offscreen rendering</em> is enabled returns the current frame rate.</p>
<h4 id="contentsinvalidate"><a href="#contentsinvalidate"><code>contents.invalidate()</code></a><a class="header-link" href="#contentsinvalidate" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Schedules a full repaint of the window this web contents is in.</p>
<p>If <em>offscreen rendering</em> is enabled invalidates the frame and generates a new
one through the <code>'paint'</code> event.</p>
<h4 id="contentsgetwebrtciphandlingpolicy"><a href="#contentsgetwebrtciphandlingpolicy"><code>contents.getWebRTCIPHandlingPolicy()</code></a><a class="header-link" href="#contentsgetwebrtciphandlingpolicy" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>String</code> - Returns the WebRTC IP Handling Policy.</p>
<h4 id="contentssetwebrtciphandlingpolicypolicy"><a href="#contentssetwebrtciphandlingpolicypolicy"><code>contents.setWebRTCIPHandlingPolicy(policy)</code></a><a class="header-link" href="#contentssetwebrtciphandlingpolicypolicy" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>policy</code> String - Specify the WebRTC IP Handling Policy.</p>
<ul>
<li><code>default</code> - Exposes user's public and local IPs.  This is the default
behavior.  When this policy is used, WebRTC has the right to enumerate all
interfaces and bind them to discover public interfaces.</li>
<li><code>default_public_interface_only</code> - Exposes user's public IP, but does not
expose user's local IP.  When this policy is used, WebRTC should only use the
default route used by http. This doesn't expose any local addresses.</li>
<li><code>default_public_and_private_interfaces</code> - Exposes user's public and local
IPs.  When this policy is used, WebRTC should only use the default route used
by http. This also exposes the associated default private address. Default
route is the route chosen by the OS on a multi-homed endpoint.</li>
<li><code>disable_non_proxied_udp</code> - Does not expose public or local IPs.  When this
policy is used, WebRTC should only use TCP to contact peers or servers unless
the proxy server supports UDP.</li>
</ul>
</li>
</ul>
<p>Setting the WebRTC IP handling policy allows you to control which IPs are
exposed via WebRTC.  See <a href="https://browserleaks.com/webrtc">BrowserLeaks</a> for
more details.</p>
<h4 id="contentsgetosprocessid"><a href="#contentsgetosprocessid"><code>contents.getOSProcessId()</code></a><a class="header-link" href="#contentsgetosprocessid" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>Returns <code>Integer</code> - The <code>pid</code> of the associated renderer process.</p>
<h3 id="instance-properties"><a href="#instance-properties">Instance Properties</a><a class="header-link" href="#instance-properties" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<h4 id="contentsid"><a href="#contentsid"><code>contents.id</code></a><a class="header-link" href="#contentsid" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>Integer</code> representing the unique ID of this WebContents.</p>
<h4 id="contentssession"><a href="#contentssession"><code>contents.session</code></a><a class="header-link" href="#contentssession" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <a href="https://electronjs.org/docs/api/session"><code>Session</code></a> used by this webContents.</p>
<h4 id="contentshostwebcontents"><a href="#contentshostwebcontents"><code>contents.hostWebContents</code></a><a class="header-link" href="#contentshostwebcontents" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <a href="https://electronjs.org/docs/api/web-contents"><code>WebContents</code></a> instance that might own this <code>WebContents</code>.</p>
<h4 id="contentsdevtoolswebcontents"><a href="#contentsdevtoolswebcontents"><code>contents.devToolsWebContents</code></a><a class="header-link" href="#contentsdevtoolswebcontents" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <code>WebContents</code> of DevTools for this <code>WebContents</code>.</p>
<p><strong>Note:</strong> Users should never store this object because it may become <code>null</code>
when the DevTools has been closed.</p>
<h4 id="contentsdebugger"><a href="#contentsdebugger"><code>contents.debugger</code></a><a class="header-link" href="#contentsdebugger" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<p>A <a href="https://electronjs.org/docs/api/debugger">Debugger</a> instance for this webContents.</p>

  <hr>
  <h1 id="webframe"><a href="#webframe">webFrame</a><a class="header-link" href="#webframe" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Customize the rendering of the current web page.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#renderer-process">Renderer</a></p>
<p>An example of zooming current page to 200%.</p>
<pre><code class="hljs language-javascript" id="_x5bc1e8"><span class="hljs-keyword">const</span> {webFrame} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

webFrame.setZoomFactor(<span class="hljs-number">2</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_x5bc1e8">Copy</button></pre>
<h2 id="methods"><a href="#methods">Methods</a><a class="header-link" href="#methods" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>webFrame</code> module has the following methods:</p>
<h3 id="webframesetzoomfactorfactor"><a href="#webframesetzoomfactorfactor"><code>webFrame.setZoomFactor(factor)</code></a><a class="header-link" href="#webframesetzoomfactorfactor" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>factor</code> Number - Zoom factor.</li>
</ul>
<p>Changes the zoom factor to the specified factor. Zoom factor is
zoom percent divided by 100, so 300% = 3.0.</p>
<h3 id="webframegetzoomfactor"><a href="#webframegetzoomfactor"><code>webFrame.getZoomFactor()</code></a><a class="header-link" href="#webframegetzoomfactor" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Number</code> - The current zoom factor.</p>
<h3 id="webframesetzoomlevellevel"><a href="#webframesetzoomlevellevel"><code>webFrame.setZoomLevel(level)</code></a><a class="header-link" href="#webframesetzoomlevellevel" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>level</code> Number - Zoom level</li>
</ul>
<p>Changes the zoom level to the specified level. The original size is 0 and each
increment above or below represents zooming 20% larger or smaller to default
limits of 300% and 50% of original size, respectively.</p>
<h3 id="webframegetzoomlevel"><a href="#webframegetzoomlevel"><code>webFrame.getZoomLevel()</code></a><a class="header-link" href="#webframegetzoomlevel" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Number</code> - The current zoom level.</p>
<h3 id="webframesetzoomlevellimitsminimumlevel-maximumlevel"><a href="#webframesetzoomlevellimitsminimumlevel-maximumlevel"><code>webFrame.setZoomLevelLimits(minimumLevel, maximumLevel)</code></a><a class="header-link" href="#webframesetzoomlevellimitsminimumlevel-maximumlevel" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>minimumLevel</code> Number</li>
<li><code>maximumLevel</code> Number</li>
</ul>
<p><strong>Deprecated:</strong> Call <code>setVisualZoomLevelLimits</code> instead to set the visual zoom
level limits. This method will be removed in Electron 2.0.</p>
<h3 id="webframesetvisualzoomlevellimitsminimumlevel-maximumlevel"><a href="#webframesetvisualzoomlevellimitsminimumlevel-maximumlevel"><code>webFrame.setVisualZoomLevelLimits(minimumLevel, maximumLevel)</code></a><a class="header-link" href="#webframesetvisualzoomlevellimitsminimumlevel-maximumlevel" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>minimumLevel</code> Number</li>
<li><code>maximumLevel</code> Number</li>
</ul>
<p>Sets the maximum and minimum pinch-to-zoom level.</p>
<h3 id="webframesetlayoutzoomlevellimitsminimumlevel-maximumlevel"><a href="#webframesetlayoutzoomlevellimitsminimumlevel-maximumlevel"><code>webFrame.setLayoutZoomLevelLimits(minimumLevel, maximumLevel)</code></a><a class="header-link" href="#webframesetlayoutzoomlevellimitsminimumlevel-maximumlevel" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>minimumLevel</code> Number</li>
<li><code>maximumLevel</code> Number</li>
</ul>
<p>Sets the maximum and minimum layout-based (i.e. non-visual) zoom level.</p>
<h3 id="webframesetspellcheckproviderlanguage-autocorrectword-provider"><a href="#webframesetspellcheckproviderlanguage-autocorrectword-provider"><code>webFrame.setSpellCheckProvider(language, autoCorrectWord, provider)</code></a><a class="header-link" href="#webframesetspellcheckproviderlanguage-autocorrectword-provider" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>language</code> String</li>
<li><code>autoCorrectWord</code> Boolean</li>
<li>
<p><code>provider</code> Object</p>
<ul>
<li>
<p><code>spellCheck</code> Function - Returns <code>Boolean</code></p>
<ul>
<li><code>text</code> String</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Sets a provider for spell checking in input fields and text areas.</p>
<p>The <code>provider</code> must be an object that has a <code>spellCheck</code> method that returns
whether the word passed is correctly spelled.</p>
<p>An example of using <a href="https://github.com/atom/node-spellchecker">node-spellchecker</a> as provider:</p>
<pre><code class="hljs language-javascript" id="_h6om3isj"><span class="hljs-keyword">const</span> {webFrame} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
webFrame.setSpellCheckProvider(<span class="hljs-string">'en-US'</span>, <span class="hljs-literal">true</span>, {
  spellCheck (text) {
    <span class="hljs-keyword">return</span> !(<span class="hljs-built_in">require</span>(<span class="hljs-string">'spellchecker'</span>).isMisspelled(text))
  }
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_h6om3isj">Copy</button></pre>
<h3 id="webframeregisterurlschemeassecurescheme"><a href="#webframeregisterurlschemeassecurescheme"><code>webFrame.registerURLSchemeAsSecure(scheme)</code></a><a class="header-link" href="#webframeregisterurlschemeassecurescheme" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>scheme</code> String</li>
</ul>
<p>Registers the <code>scheme</code> as secure scheme.</p>
<p>Secure schemes do not trigger mixed content warnings. For example, <code>https</code> and
<code>data</code> are secure schemes because they cannot be corrupted by active network
attackers.</p>
<h3 id="webframeregisterurlschemeasbypassingcspscheme"><a href="#webframeregisterurlschemeasbypassingcspscheme"><code>webFrame.registerURLSchemeAsBypassingCSP(scheme)</code></a><a class="header-link" href="#webframeregisterurlschemeasbypassingcspscheme" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>scheme</code> String</li>
</ul>
<p>Resources will be loaded from this <code>scheme</code> regardless of the current page's
Content Security Policy.</p>
<h3 id="webframeregisterurlschemeasprivilegedscheme-options"><a href="#webframeregisterurlschemeasprivilegedscheme-options"><code>webFrame.registerURLSchemeAsPrivileged(scheme[, options])</code></a><a class="header-link" href="#webframeregisterurlschemeasprivilegedscheme-options" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>scheme</code> String</li>
<li>
<p><code>options</code> Object (optional)</p>
<ul>
<li><code>secure</code> Boolean - (optional) Default true.</li>
<li><code>bypassCSP</code> Boolean - (optional) Default true.</li>
<li><code>allowServiceWorkers</code> Boolean - (optional) Default true.</li>
<li><code>supportFetchAPI</code> Boolean - (optional) Default true.</li>
<li><code>corsEnabled</code> Boolean - (optional) Default true.</li>
</ul>
</li>
</ul>
<p>Registers the <code>scheme</code> as secure, bypasses content security policy for resources,
allows registering ServiceWorker and supports fetch API.</p>
<p>Specify an option with the value of <code>false</code> to omit it from the registration.
An example of registering a privileged scheme, without bypassing Content Security Policy:</p>
<pre><code class="hljs language-javascript" id="_wk8omk9m"><span class="hljs-keyword">const</span> {webFrame} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
webFrame.registerURLSchemeAsPrivileged(<span class="hljs-string">'foo'</span>, { <span class="hljs-attr">bypassCSP</span>: <span class="hljs-literal">false</span> })</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_wk8omk9m">Copy</button></pre>
<h3 id="webframeinserttexttext"><a href="#webframeinserttexttext"><code>webFrame.insertText(text)</code></a><a class="header-link" href="#webframeinserttexttext" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>text</code> String</li>
</ul>
<p>Inserts <code>text</code> to the focused element.</p>
<h3 id="webframeexecutejavascriptcode-usergesture-callback"><a href="#webframeexecutejavascriptcode-usergesture-callback"><code>webFrame.executeJavaScript(code[, userGesture, callback])</code></a><a class="header-link" href="#webframeexecutejavascriptcode-usergesture-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>code</code> String</li>
<li><code>userGesture</code> Boolean (optional) - Default is <code>false</code>.</li>
<li>
<p><code>callback</code> Function (optional) - Called after script has been executed.</p>
<ul>
<li><code>result</code> Any</li>
</ul>
</li>
</ul>
<p>Returns <code>Promise</code> - A promise that resolves with the result of the executed code
or is rejected if the result of the code is a rejected promise.</p>
<p>Evaluates <code>code</code> in page.</p>
<p>In the browser window some HTML APIs like <code>requestFullScreen</code> can only be
invoked by a gesture from the user. Setting <code>userGesture</code> to <code>true</code> will remove
this limitation.</p>
<h3 id="webframegetresourceusage"><a href="#webframegetresourceusage"><code>webFrame.getResourceUsage()</code></a><a class="header-link" href="#webframegetresourceusage" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Object</code>:</p>
<ul>
<li><code>images</code> <a href="https://electronjs.org/docs/api/structures/memory-usage-details">MemoryUsageDetails</a></li>
<li><code>cssStyleSheets</code> <a href="https://electronjs.org/docs/api/structures/memory-usage-details">MemoryUsageDetails</a></li>
<li><code>xslStyleSheets</code> <a href="https://electronjs.org/docs/api/structures/memory-usage-details">MemoryUsageDetails</a></li>
<li><code>fonts</code> <a href="https://electronjs.org/docs/api/structures/memory-usage-details">MemoryUsageDetails</a></li>
<li><code>other</code> <a href="https://electronjs.org/docs/api/structures/memory-usage-details">MemoryUsageDetails</a></li>
</ul>
<p>Returns an object describing usage information of Blink's internal memory
caches.</p>
<pre><code class="hljs language-javascript" id="_i0kqdmmp"><span class="hljs-keyword">const</span> {webFrame} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-built_in">console</span>.log(webFrame.getResourceUsage())</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_i0kqdmmp">Copy</button></pre>
<p>This will generate:</p>
<pre><code class="hljs language-javascript" id="_ljkkib1a">{
  <span class="hljs-attr">images</span>: {
    <span class="hljs-attr">count</span>: <span class="hljs-number">22</span>,
    <span class="hljs-attr">size</span>: <span class="hljs-number">2549</span>,
    <span class="hljs-attr">liveSize</span>: <span class="hljs-number">2542</span>
  },
  <span class="hljs-attr">cssStyleSheets</span>: { <span class="hljs-comment">/* same with "images" */</span> },
  <span class="hljs-attr">xslStyleSheets</span>: { <span class="hljs-comment">/* same with "images" */</span> },
  <span class="hljs-attr">fonts</span>: { <span class="hljs-comment">/* same with "images" */</span> },
  <span class="hljs-attr">other</span>: { <span class="hljs-comment">/* same with "images" */</span> }
}</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_ljkkib1a">Copy</button></pre>
<h3 id="webframeclearcache"><a href="#webframeclearcache"><code>webFrame.clearCache()</code></a><a class="header-link" href="#webframeclearcache" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Attempts to free memory that is no longer being used (like images from a
previous navigation).</p>
<p>Note that blindly calling this method probably makes Electron slower since it
will have to refill these emptied caches, you should only call it if an event
in your app has occurred that makes you think your page is actually using less
memory (i.e. you have navigated from a super heavy page to a mostly empty one,
and intend to stay there).</p>

  <hr>
  <h2 id="class-webrequest"><a href="#class-webrequest">Class: WebRequest</a><a class="header-link" href="#class-webrequest" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<blockquote>
<p>Intercept and modify the contents of a request at various stages of its lifetime.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/glossary#main-process">Main</a></p>
<p>Instances of the <code>WebRequest</code> class are accessed by using the <code>webRequest</code>
property of a <code>Session</code>.</p>
<p>The methods of <code>WebRequest</code> accept an optional <code>filter</code> and a <code>listener</code>. The
<code>listener</code> will be called with <code>listener(details)</code> when the API's event has
happened. The <code>details</code> object describes the request. Passing <code>null</code>
as <code>listener</code> will unsubscribe from the event.</p>
<p>The <code>filter</code> object has a <code>urls</code> property which is an Array of URL
patterns that will be used to filter out the requests that do not match the URL
patterns. If the <code>filter</code> is omitted then all requests will be matched.</p>
<p>For certain events the <code>listener</code> is passed with a <code>callback</code>, which should be
called with a <code>response</code> object when <code>listener</code> has done its work.</p>
<p>An example of adding <code>User-Agent</code> header for requests:</p>
<pre><code class="hljs language-javascript" id="_4lxdoduq"><span class="hljs-keyword">const</span> {session} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-comment">// Modify the user agent for all requests to the following urls.</span>
<span class="hljs-keyword">const</span> filter = {
  <span class="hljs-attr">urls</span>: [<span class="hljs-string">'https://*.github.com/*'</span>, <span class="hljs-string">'*://electron.github.io'</span>]
}

session.defaultSession.webRequest.onBeforeSendHeaders(filter, (details, callback) =&gt; {
  details.requestHeaders[<span class="hljs-string">'User-Agent'</span>] = <span class="hljs-string">'MyAgent'</span>
  callback({<span class="hljs-attr">cancel</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">requestHeaders</span>: details.requestHeaders})
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_4lxdoduq">Copy</button></pre>
<h3 id="instance-methods"><a href="#instance-methods">Instance Methods</a><a class="header-link" href="#instance-methods" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>The following methods are available on instances of <code>WebRequest</code>:</p>
<h4 id="webrequestonbeforerequestfilter-listener"><a href="#webrequestonbeforerequestfilter-listener"><code>webRequest.onBeforeRequest([filter, ]listener)</code></a><a class="header-link" href="#webrequestonbeforerequestfilter-listener" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>filter</code> Object - (optional)</p>
<ul>
<li><code>urls</code> String[] - Array of URL patterns that will be used to filter out the
requests that do not match the URL patterns.</li>
</ul>
</li>
<li>
<p><code>listener</code> Function</p>
<ul>
<li>
<p><code>details</code> Object</p>
<ul>
<li><code>id</code> Integer</li>
<li><code>url</code> String</li>
<li><code>method</code> String</li>
<li><code>webContentsId</code> Integer (optional)</li>
<li><code>resourceType</code> String</li>
<li><code>timestamp</code> Double</li>
<li><code>uploadData</code> <a href="https://electronjs.org/docs/api/structures/upload-data">UploadData[]</a></li>
</ul>
</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li>
<p><code>response</code> Object</p>
<ul>
<li><code>cancel</code> Boolean (optional)</li>
<li><code>redirectURL</code> String (optional) - The original request is prevented from
being sent or completed and is instead redirected to the given URL.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>The <code>listener</code> will be called with <code>listener(details, callback)</code> when a request
is about to occur.</p>
<p>The <code>uploadData</code> is an array of <code>UploadData</code> objects.</p>
<p>The <code>callback</code> has to be called with an <code>response</code> object.</p>
<h4 id="webrequestonbeforesendheadersfilter-listener"><a href="#webrequestonbeforesendheadersfilter-listener"><code>webRequest.onBeforeSendHeaders([filter, ]listener)</code></a><a class="header-link" href="#webrequestonbeforesendheadersfilter-listener" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>filter</code> Object - (optional)</p>
<ul>
<li><code>urls</code> String[] - Array of URL patterns that will be used to filter out the
requests that do not match the URL patterns.</li>
</ul>
</li>
<li><code>listener</code> Function</li>
</ul>
<p>The <code>listener</code> will be called with <code>listener(details, callback)</code> before sending
an HTTP request, once the request headers are available. This may occur after a
TCP connection is made to the server, but before any http data is sent.</p>
<ul>
<li>
<p><code>details</code> Object</p>
<ul>
<li><code>id</code> Integer</li>
<li><code>url</code> String</li>
<li><code>method</code> String</li>
<li><code>webContentsId</code> Integer (optional)</li>
<li><code>resourceType</code> String</li>
<li><code>timestamp</code> Double</li>
<li><code>requestHeaders</code> Object</li>
</ul>
</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li>
<p><code>response</code> Object</p>
<ul>
<li><code>cancel</code> Boolean (optional)</li>
<li><code>requestHeaders</code> Object (optional) - When provided, request will be made
with these headers.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>The <code>callback</code> has to be called with an <code>response</code> object.</p>
<h4 id="webrequestonsendheadersfilter-listener"><a href="#webrequestonsendheadersfilter-listener"><code>webRequest.onSendHeaders([filter, ]listener)</code></a><a class="header-link" href="#webrequestonsendheadersfilter-listener" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>filter</code> Object - (optional)</p>
<ul>
<li><code>urls</code> String[] - Array of URL patterns that will be used to filter out the
requests that do not match the URL patterns.</li>
</ul>
</li>
<li>
<p><code>listener</code> Function</p>
<ul>
<li>
<p><code>details</code> Object</p>
<ul>
<li><code>id</code> Integer</li>
<li><code>url</code> String</li>
<li><code>method</code> String</li>
<li><code>webContentsId</code> Integer (optional)</li>
<li><code>resourceType</code> String</li>
<li><code>timestamp</code> Double</li>
<li><code>requestHeaders</code> Object</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>The <code>listener</code> will be called with <code>listener(details)</code> just before a request is
going to be sent to the server, modifications of previous <code>onBeforeSendHeaders</code>
response are visible by the time this listener is fired.</p>
<h4 id="webrequestonheadersreceivedfilter-listener"><a href="#webrequestonheadersreceivedfilter-listener"><code>webRequest.onHeadersReceived([filter, ]listener)</code></a><a class="header-link" href="#webrequestonheadersreceivedfilter-listener" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>filter</code> Object - (optional)</p>
<ul>
<li><code>urls</code> String[] - Array of URL patterns that will be used to filter out the
requests that do not match the URL patterns.</li>
</ul>
</li>
<li><code>listener</code> Function</li>
</ul>
<p>The <code>listener</code> will be called with <code>listener(details, callback)</code> when HTTP
response headers of a request have been received.</p>
<ul>
<li>
<p><code>details</code> Object</p>
<ul>
<li><code>id</code> Integer</li>
<li><code>url</code> String</li>
<li><code>method</code> String</li>
<li><code>webContentsId</code> Integer (optional)</li>
<li><code>resourceType</code> String</li>
<li><code>timestamp</code> Double</li>
<li><code>statusLine</code> String</li>
<li><code>statusCode</code> Integer</li>
<li><code>responseHeaders</code> Object</li>
</ul>
</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li>
<p><code>response</code> Object</p>
<ul>
<li><code>cancel</code> Boolean</li>
<li><code>responseHeaders</code> Object (optional) - When provided, the server is assumed
to have responded with these headers.</li>
<li><code>statusLine</code> String (optional) - Should be provided when overriding
<code>responseHeaders</code> to change header status otherwise original response
header's status will be used.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>The <code>callback</code> has to be called with an <code>response</code> object.</p>
<h4 id="webrequestonresponsestartedfilter-listener"><a href="#webrequestonresponsestartedfilter-listener"><code>webRequest.onResponseStarted([filter, ]listener)</code></a><a class="header-link" href="#webrequestonresponsestartedfilter-listener" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>filter</code> Object - (optional)</p>
<ul>
<li><code>urls</code> String[] - Array of URL patterns that will be used to filter out the
requests that do not match the URL patterns.</li>
</ul>
</li>
<li>
<p><code>listener</code> Function</p>
<ul>
<li>
<p><code>details</code> Object</p>
<ul>
<li><code>id</code> Integer</li>
<li><code>url</code> String</li>
<li><code>method</code> String</li>
<li><code>webContentsId</code> Integer (optional)</li>
<li><code>resourceType</code> String</li>
<li><code>timestamp</code> Double</li>
<li><code>responseHeaders</code> Object</li>
<li><code>fromCache</code> Boolean - Indicates whether the response was fetched from disk
cache.</li>
<li><code>statusCode</code> Integer</li>
<li><code>statusLine</code> String</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>The <code>listener</code> will be called with <code>listener(details)</code> when first byte of the
response body is received. For HTTP requests, this means that the status line
and response headers are available.</p>
<h4 id="webrequestonbeforeredirectfilter-listener"><a href="#webrequestonbeforeredirectfilter-listener"><code>webRequest.onBeforeRedirect([filter, ]listener)</code></a><a class="header-link" href="#webrequestonbeforeredirectfilter-listener" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>filter</code> Object - (optional)</p>
<ul>
<li><code>urls</code> String[] - Array of URL patterns that will be used to filter out the
requests that do not match the URL patterns.</li>
</ul>
</li>
<li>
<p><code>listener</code> Function</p>
<ul>
<li>
<p><code>details</code> Object</p>
<ul>
<li><code>id</code> Integer</li>
<li><code>url</code> String</li>
<li><code>method</code> String</li>
<li><code>webContentsId</code> Integer (optional)</li>
<li><code>resourceType</code> String</li>
<li><code>timestamp</code> Double</li>
<li><code>redirectURL</code> String</li>
<li><code>statusCode</code> Integer</li>
<li><code>ip</code> String (optional) - The server IP address that the request was
actually sent to.</li>
<li><code>fromCache</code> Boolean</li>
<li><code>responseHeaders</code> Object</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>The <code>listener</code> will be called with <code>listener(details)</code> when a server initiated
redirect is about to occur.</p>
<h4 id="webrequestoncompletedfilter-listener"><a href="#webrequestoncompletedfilter-listener"><code>webRequest.onCompleted([filter, ]listener)</code></a><a class="header-link" href="#webrequestoncompletedfilter-listener" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>filter</code> Object - (optional)</p>
<ul>
<li><code>urls</code> String[] - Array of URL patterns that will be used to filter out the
requests that do not match the URL patterns.</li>
</ul>
</li>
<li>
<p><code>listener</code> Function</p>
<ul>
<li>
<p><code>details</code> Object</p>
<ul>
<li><code>id</code> Integer</li>
<li><code>url</code> String</li>
<li><code>method</code> String</li>
<li><code>webContentsId</code> Integer (optional)</li>
<li><code>resourceType</code> String</li>
<li><code>timestamp</code> Double</li>
<li><code>responseHeaders</code> Object</li>
<li><code>fromCache</code> Boolean</li>
<li><code>statusCode</code> Integer</li>
<li><code>statusLine</code> String</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>The <code>listener</code> will be called with <code>listener(details)</code> when a request is
completed.</p>
<h4 id="webrequestonerroroccurredfilter-listener"><a href="#webrequestonerroroccurredfilter-listener"><code>webRequest.onErrorOccurred([filter, ]listener)</code></a><a class="header-link" href="#webrequestonerroroccurredfilter-listener" title="Permalink"><span class="octicon octicon-link"></span></a></h4>
<ul>
<li>
<p><code>filter</code> Object - (optional)</p>
<ul>
<li><code>urls</code> String[] - Array of URL patterns that will be used to filter out the
requests that do not match the URL patterns.</li>
</ul>
</li>
<li>
<p><code>listener</code> Function</p>
<ul>
<li>
<p><code>details</code> Object</p>
<ul>
<li><code>id</code> Integer</li>
<li><code>url</code> String</li>
<li><code>method</code> String</li>
<li><code>webContentsId</code> Integer (optional)</li>
<li><code>resourceType</code> String</li>
<li><code>timestamp</code> Double</li>
<li><code>fromCache</code> Boolean</li>
<li><code>error</code> String - The error description.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>The <code>listener</code> will be called with <code>listener(details)</code> when an error occurs.</p>

  <hr>
  <h1 id="webview-tag"><a href="#webview-tag"><code>&lt;webview&gt;</code> Tag</a><a class="header-link" href="#webview-tag" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Display external web content in an isolated frame and process.</p>
</blockquote>
<p>Process: <a href="https://electronjs.org/docs/tutorial/quick-start#renderer-process">Renderer</a></p>
<p>Use the <code>webview</code> tag to embed 'guest' content (such as web pages) in your
Electron app. The guest content is contained within the <code>webview</code> container.
An embedded page within your app controls how the guest content is laid out and
rendered.</p>
<p>Unlike an <code>iframe</code>, the <code>webview</code> runs in a separate process than your
app. It doesn't have the same permissions as your web page and all interactions
between your app and embedded content will be asynchronous. This keeps your app
safe from the embedded content. <strong>Note:</strong> Most methods called on the
webview from the host page require a synchronous call to the main process.</p>
<h2 id="example"><a href="#example">Example</a><a class="header-link" href="#example" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>To embed a web page in your app, add the <code>webview</code> tag to your app's embedder
page (this is the app page that will display the guest content). In its simplest
form, the <code>webview</code> tag includes the <code>src</code> of the web page and css styles that
control the appearance of the <code>webview</code> container:</p>
<pre><code class="hljs language-html" id="_gbdmc1av"><span class="hljs-tag">&lt;<span class="hljs-name">webview</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"foo"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://www.github.com/"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"display:inline-flex; width:640px; height:480px"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">webview</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_gbdmc1av">Copy</button></pre>
<p>If you want to control the guest content in any way, you can write JavaScript
that listens for <code>webview</code> events and responds to those events using the
<code>webview</code> methods. Here's sample code with two event listeners: one that listens
for the web page to start loading, the other for the web page to stop loading,
and displays a "loading..." message during the load time:</p>
<pre><code class="hljs language-html" id="_e2fgqnld"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
  onload = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
    <span class="hljs-keyword">const</span> webview = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'webview'</span>)
    <span class="hljs-keyword">const</span> indicator = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'.indicator'</span>)

    <span class="hljs-keyword">const</span> loadstart = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
      indicator.innerText = <span class="hljs-string">'loading...'</span>
    }

    <span class="hljs-keyword">const</span> loadstop = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
      indicator.innerText = <span class="hljs-string">''</span>
    }

    webview.addEventListener(<span class="hljs-string">'did-start-loading'</span>, loadstart)
    webview.addEventListener(<span class="hljs-string">'did-stop-loading'</span>, loadstop)
  }
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_e2fgqnld">Copy</button></pre>
<h2 id="css-styling-notes"><a href="#css-styling-notes">CSS Styling Notes</a><a class="header-link" href="#css-styling-notes" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Please note that the <code>webview</code> tag's style uses <code>display:flex;</code> internally to
ensure the child <code>object</code> element fills the full height and width of its <code>webview</code>
container when used with traditional and flexbox layouts (since v0.36.11). Please
do not overwrite the default <code>display:flex;</code> CSS property, unless specifying
<code>display:inline-flex;</code> for inline layout.</p>
<p><code>webview</code> has issues being hidden using the <code>hidden</code> attribute or using
<code>display: none;</code>. It can cause unusual rendering behaviour within its child
<code>browserplugin</code> object and the web page is reloaded when the <code>webview</code> is
un-hidden. The recommended approach is to hide the <code>webview</code> using
<code>visibility: hidden</code>.</p>
<pre><code class="hljs language-html" id="_73utp00r"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">
  <span class="hljs-selector-tag">webview</span> {
    <span class="hljs-attribute">display</span>:inline-flex;
    <span class="hljs-attribute">width</span>:<span class="hljs-number">640px</span>;
    <span class="hljs-attribute">height</span>:<span class="hljs-number">480px</span>;
  }
  <span class="hljs-selector-tag">webview</span><span class="hljs-selector-class">.hide</span> {
    <span class="hljs-attribute">visibility</span>: hidden;
  }
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_73utp00r">Copy</button></pre>
<h2 id="tag-attributes"><a href="#tag-attributes">Tag Attributes</a><a class="header-link" href="#tag-attributes" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>webview</code> tag has the following attributes:</p>
<h3 id="src"><a href="#src"><code>src</code></a><a class="header-link" href="#src" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-html" id="_di2z8qtp"><span class="hljs-tag">&lt;<span class="hljs-name">webview</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://www.github.com/"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">webview</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_di2z8qtp">Copy</button></pre>
<p>Returns the visible URL. Writing to this attribute initiates top-level
navigation.</p>
<p>Assigning <code>src</code> its own value will reload the current page.</p>
<p>The <code>src</code> attribute can also accept data URLs, such as
<code>data:text/plain,Hello, world!</code>.</p>
<h3 id="autosize"><a href="#autosize"><code>autosize</code></a><a class="header-link" href="#autosize" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-html" id="_wmccgd9m"><span class="hljs-tag">&lt;<span class="hljs-name">webview</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://www.github.com/"</span> <span class="hljs-attr">autosize</span> <span class="hljs-attr">minwidth</span>=<span class="hljs-string">"576"</span> <span class="hljs-attr">minheight</span>=<span class="hljs-string">"432"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">webview</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_wmccgd9m">Copy</button></pre>
<p>When this attribute is present the <code>webview</code> container will automatically resize
within the bounds specified by the attributes <code>minwidth</code>, <code>minheight</code>,
<code>maxwidth</code>, and <code>maxheight</code>. These constraints do not impact the <code>webview</code>
unless <code>autosize</code> is enabled. When <code>autosize</code> is enabled, the <code>webview</code>
container size cannot be less than the minimum values or greater than the
maximum.</p>
<h3 id="nodeintegration"><a href="#nodeintegration"><code>nodeintegration</code></a><a class="header-link" href="#nodeintegration" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-html" id="_phujlqof"><span class="hljs-tag">&lt;<span class="hljs-name">webview</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://www.google.com/"</span> <span class="hljs-attr">nodeintegration</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">webview</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_phujlqof">Copy</button></pre>
<p>When this attribute is present the guest page in <code>webview</code> will have node
integration and can use node APIs like <code>require</code> and <code>process</code> to access low
level system resources. Node integration is disabled by default in the guest
page.</p>
<h3 id="plugins"><a href="#plugins"><code>plugins</code></a><a class="header-link" href="#plugins" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-html" id="_8tr1gmcb"><span class="hljs-tag">&lt;<span class="hljs-name">webview</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://www.github.com/"</span> <span class="hljs-attr">plugins</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">webview</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_8tr1gmcb">Copy</button></pre>
<p>When this attribute is present the guest page in <code>webview</code> will be able to use
browser plugins. Plugins are disabled by default.</p>
<h3 id="preload"><a href="#preload"><code>preload</code></a><a class="header-link" href="#preload" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-html" id="_k0bh6le"><span class="hljs-tag">&lt;<span class="hljs-name">webview</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://www.github.com/"</span> <span class="hljs-attr">preload</span>=<span class="hljs-string">"./test.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">webview</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_k0bh6le">Copy</button></pre>
<p>Specifies a script that will be loaded before other scripts run in the guest
page. The protocol of script's URL must be either <code>file:</code> or <code>asar:</code>, because it
will be loaded by <code>require</code> in guest page under the hood.</p>
<p>When the guest page doesn't have node integration this script will still have
access to all Node APIs, but global objects injected by Node will be deleted
after this script has finished executing.</p>
<p><strong>Note:</strong> This option will be appear as <code>preloadURL</code> (not <code>preload</code>) in
the <code>webPreferences</code> specified to the <code>will-attach-webview</code> event.</p>
<h3 id="httpreferrer"><a href="#httpreferrer"><code>httpreferrer</code></a><a class="header-link" href="#httpreferrer" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-html" id="_0vcrcby8"><span class="hljs-tag">&lt;<span class="hljs-name">webview</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://www.github.com/"</span> <span class="hljs-attr">httpreferrer</span>=<span class="hljs-string">"http://cheng.guru"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">webview</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_0vcrcby8">Copy</button></pre>
<p>Sets the referrer URL for the guest page.</p>
<h3 id="useragent"><a href="#useragent"><code>useragent</code></a><a class="header-link" href="#useragent" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-html" id="_zlrm6v4"><span class="hljs-tag">&lt;<span class="hljs-name">webview</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://www.github.com/"</span> <span class="hljs-attr">useragent</span>=<span class="hljs-string">"Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; AS; rv:11.0) like Gecko"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">webview</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_zlrm6v4">Copy</button></pre>
<p>Sets the user agent for the guest page before the page is navigated to. Once the
page is loaded, use the <code>setUserAgent</code> method to change the user agent.</p>
<h3 id="disablewebsecurity"><a href="#disablewebsecurity"><code>disablewebsecurity</code></a><a class="header-link" href="#disablewebsecurity" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-html" id="_c46e3crd"><span class="hljs-tag">&lt;<span class="hljs-name">webview</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://www.github.com/"</span> <span class="hljs-attr">disablewebsecurity</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">webview</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_c46e3crd">Copy</button></pre>
<p>When this attribute is present the guest page will have web security disabled.
Web security is enabled by default.</p>
<h3 id="partition"><a href="#partition"><code>partition</code></a><a class="header-link" href="#partition" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-html" id="_1enp2oel"><span class="hljs-tag">&lt;<span class="hljs-name">webview</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://github.com"</span> <span class="hljs-attr">partition</span>=<span class="hljs-string">"persist:github"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">webview</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">webview</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://electronjs.org"</span> <span class="hljs-attr">partition</span>=<span class="hljs-string">"electron"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">webview</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_1enp2oel">Copy</button></pre>
<p>Sets the session used by the page. If <code>partition</code> starts with <code>persist:</code>, the
page will use a persistent session available to all pages in the app with the
same <code>partition</code>. if there is no <code>persist:</code> prefix, the page will use an
in-memory session. By assigning the same <code>partition</code>, multiple pages can share
the same session. If the <code>partition</code> is unset then default session of the app
will be used.</p>
<p>This value can only be modified before the first navigation, since the session
of an active renderer process cannot change. Subsequent attempts to modify the
value will fail with a DOM exception.</p>
<h3 id="allowpopups"><a href="#allowpopups"><code>allowpopups</code></a><a class="header-link" href="#allowpopups" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-html" id="_cyljarqe"><span class="hljs-tag">&lt;<span class="hljs-name">webview</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://www.github.com/"</span> <span class="hljs-attr">allowpopups</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">webview</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_cyljarqe">Copy</button></pre>
<p>When this attribute is present the guest page will be allowed to open new
windows. Popups are disabled by default.</p>
<h3 id="webpreferences"><a href="#webpreferences"><code>webpreferences</code></a><a class="header-link" href="#webpreferences" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-html" id="_il8gw4mp"><span class="hljs-tag">&lt;<span class="hljs-name">webview</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://github.com"</span> <span class="hljs-attr">webpreferences</span>=<span class="hljs-string">"allowRunningInsecureContent, javascript=no"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">webview</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_il8gw4mp">Copy</button></pre>
<p>A list of strings which specifies the web preferences to be set on the webview, separated by <code>,</code>.
The full list of supported preference strings can be found in <a href="https://electronjs.org/docs/api/browser-window#new-browserwindowoptions">BrowserWindow</a>.</p>
<p>The string follows the same format as the features string in <code>window.open</code>.
A name by itself is given a <code>true</code> boolean value.
A preference can be set to another value by including an <code>=</code>, followed by the value.
Special values <code>yes</code> and <code>1</code> are interpreted as <code>true</code>, while <code>no</code> and <code>0</code> are interpreted as <code>false</code>.</p>
<h3 id="blinkfeatures"><a href="#blinkfeatures"><code>blinkfeatures</code></a><a class="header-link" href="#blinkfeatures" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-html" id="_o8fecey"><span class="hljs-tag">&lt;<span class="hljs-name">webview</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://www.github.com/"</span> <span class="hljs-attr">blinkfeatures</span>=<span class="hljs-string">"PreciseMemoryInfo, CSSVariables"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">webview</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_o8fecey">Copy</button></pre>
<p>A list of strings which specifies the blink features to be enabled separated by <code>,</code>.
The full list of supported feature strings can be found in the
<a href="https://cs.chromium.org/chromium/src/third_party/WebKit/Source/platform/RuntimeEnabledFeatures.json5?l=62">RuntimeEnabledFeatures.json5</a> file.</p>
<h3 id="disableblinkfeatures"><a href="#disableblinkfeatures"><code>disableblinkfeatures</code></a><a class="header-link" href="#disableblinkfeatures" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-html" id="_0hs2zo0p"><span class="hljs-tag">&lt;<span class="hljs-name">webview</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://www.github.com/"</span> <span class="hljs-attr">disableblinkfeatures</span>=<span class="hljs-string">"PreciseMemoryInfo, CSSVariables"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">webview</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_0hs2zo0p">Copy</button></pre>
<p>A list of strings which specifies the blink features to be disabled separated by <code>,</code>.
The full list of supported feature strings can be found in the
<a href="https://cs.chromium.org/chromium/src/third_party/WebKit/Source/platform/RuntimeEnabledFeatures.json5?l=62">RuntimeEnabledFeatures.json5</a> file.</p>
<h3 id="guestinstance"><a href="#guestinstance"><code>guestinstance</code></a><a class="header-link" href="#guestinstance" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-html" id="_w5quki2"><span class="hljs-tag">&lt;<span class="hljs-name">webview</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://www.github.com/"</span> <span class="hljs-attr">guestinstance</span>=<span class="hljs-string">"3"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">webview</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_w5quki2">Copy</button></pre>
<p>A value that links the webview to a specific webContents. When a webview
first loads a new webContents is created and this attribute is set to its
instance identifier. Setting this attribute on a new or existing webview
connects it to the existing webContents that currently renders in a different
webview.</p>
<p>The existing webview will see the <code>destroy</code> event and will then create a new
webContents when a new url is loaded.</p>
<h3 id="disableguestresize"><a href="#disableguestresize"><code>disableguestresize</code></a><a class="header-link" href="#disableguestresize" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<pre><code class="hljs language-html" id="_sjzm21w"><span class="hljs-tag">&lt;<span class="hljs-name">webview</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://www.github.com/"</span> <span class="hljs-attr">disableguestresize</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">webview</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_sjzm21w">Copy</button></pre>
<p>When this attribute is present the <code>webview</code> contents will be prevented from
resizing when the <code>webview</code> element itself is resized.</p>
<p>This can be used in combination with
<a href="https://electronjs.org/docs/api/web-contents#contentssetsizeoptions"><code>webContents.setSize</code></a> to manually
resize the webview contents in reaction to a window size change. This can
make resizing faster compared to relying on the webview element bounds to
automatically resize the contents.</p>
<pre><code class="hljs language-javascript" id="_tptyv9ml"><span class="hljs-keyword">const</span> {webContents} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)

<span class="hljs-comment">// We assume that `win` points to a `BrowserWindow` instance containing a</span>
<span class="hljs-comment">// `&lt;webview&gt;` with `disableguestresize`.</span>

win.on(<span class="hljs-string">'resize'</span>, () =&gt; {
  <span class="hljs-keyword">const</span> [width, height] = win.getContentSize()
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> wc <span class="hljs-keyword">of</span> webContents.getAllWebContents()) {
    <span class="hljs-comment">// Check if `wc` belongs to a webview in the `win` window.</span>
    <span class="hljs-keyword">if</span> (wc.hostWebContents &amp;&amp;
        wc.hostWebContents.id === win.webContents.id) {
      wc.setSize({
        <span class="hljs-attr">normal</span>: {
          <span class="hljs-attr">width</span>: width,
          <span class="hljs-attr">height</span>: height
        }
      })
    }
  }
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_tptyv9ml">Copy</button></pre>
<h2 id="methods"><a href="#methods">Methods</a><a class="header-link" href="#methods" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The <code>webview</code> tag has the following methods:</p>
<p><strong>Note:</strong> The webview element must be loaded before using the methods.</p>
<p><strong>Example</strong></p>
<pre><code class="hljs language-javascript" id="_okye41zd"><span class="hljs-keyword">const</span> webview = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'webview'</span>)
webview.addEventListener(<span class="hljs-string">'dom-ready'</span>, () =&gt; {
  webview.openDevTools()
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_okye41zd">Copy</button></pre>
<h3 id="webviewloadurlurl-options"><a href="#webviewloadurlurl-options"><code>&lt;webview&gt;.loadURL(url[, options])</code></a><a class="header-link" href="#webviewloadurlurl-options" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>url</code> URL</li>
<li>
<p><code>options</code> Object (optional)</p>
<ul>
<li><code>httpReferrer</code> String (optional) - A HTTP Referrer url.</li>
<li><code>userAgent</code> String (optional) - A user agent originating the request.</li>
<li><code>extraHeaders</code> String (optional) - Extra headers separated by "\n"</li>
<li><code>postData</code> (<a href="https://electronjs.org/docs/api/structures/upload-raw-data">UploadRawData[]</a> | <a href="https://electronjs.org/docs/api/structures/upload-file">UploadFile[]</a> | <a href="https://electronjs.org/docs/api/structures/upload-file-system">UploadFileSystem[]</a> | <a href="https://electronjs.org/docs/api/structures/upload-blob">UploadBlob[]</a>) - (optional)</li>
<li><code>baseURLForDataURL</code> String (optional) - Base url (with 
trailing path separator) for files to be loaded by the data url. This is
 needed only if the specified <code>url</code> is a data url and needs to load other files.</li>
</ul>
</li>
</ul>
<p>Loads the <code>url</code> in the webview, the <code>url</code> must contain the protocol prefix,
e.g. the <code>http://</code> or <code>file://</code>.</p>
<h3 id="webviewgeturl"><a href="#webviewgeturl"><code>&lt;webview&gt;.getURL()</code></a><a class="header-link" href="#webviewgeturl" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>String</code> - The URL of guest page.</p>
<h3 id="webviewgettitle"><a href="#webviewgettitle"><code>&lt;webview&gt;.getTitle()</code></a><a class="header-link" href="#webviewgettitle" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>String</code> - The title of guest page.</p>
<h3 id="webviewisloading"><a href="#webviewisloading"><code>&lt;webview&gt;.isLoading()</code></a><a class="header-link" href="#webviewisloading" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Boolean</code> - Whether guest page is still loading resources.</p>
<h3 id="webviewiswaitingforresponse"><a href="#webviewiswaitingforresponse"><code>&lt;webview&gt;.isWaitingForResponse()</code></a><a class="header-link" href="#webviewiswaitingforresponse" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Boolean</code> - Whether the guest page is waiting for a first-response for the
main resource of the page.</p>
<h3 id="webviewstop"><a href="#webviewstop"><code>&lt;webview&gt;.stop()</code></a><a class="header-link" href="#webviewstop" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Stops any pending navigation.</p>
<h3 id="webviewreload"><a href="#webviewreload"><code>&lt;webview&gt;.reload()</code></a><a class="header-link" href="#webviewreload" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Reloads the guest page.</p>
<h3 id="webviewreloadignoringcache"><a href="#webviewreloadignoringcache"><code>&lt;webview&gt;.reloadIgnoringCache()</code></a><a class="header-link" href="#webviewreloadignoringcache" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Reloads the guest page and ignores cache.</p>
<h3 id="webviewcangoback"><a href="#webviewcangoback"><code>&lt;webview&gt;.canGoBack()</code></a><a class="header-link" href="#webviewcangoback" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Boolean</code> - Whether the guest page can go back.</p>
<h3 id="webviewcangoforward"><a href="#webviewcangoforward"><code>&lt;webview&gt;.canGoForward()</code></a><a class="header-link" href="#webviewcangoforward" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Boolean</code> - Whether the guest page can go forward.</p>
<h3 id="webviewcangotooffsetoffset"><a href="#webviewcangotooffsetoffset"><code>&lt;webview&gt;.canGoToOffset(offset)</code></a><a class="header-link" href="#webviewcangotooffsetoffset" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>offset</code> Integer</li>
</ul>
<p>Returns <code>Boolean</code> - Whether the guest page can go to <code>offset</code>.</p>
<h3 id="webviewclearhistory"><a href="#webviewclearhistory"><code>&lt;webview&gt;.clearHistory()</code></a><a class="header-link" href="#webviewclearhistory" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Clears the navigation history.</p>
<h3 id="webviewgoback"><a href="#webviewgoback"><code>&lt;webview&gt;.goBack()</code></a><a class="header-link" href="#webviewgoback" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Makes the guest page go back.</p>
<h3 id="webviewgoforward"><a href="#webviewgoforward"><code>&lt;webview&gt;.goForward()</code></a><a class="header-link" href="#webviewgoforward" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Makes the guest page go forward.</p>
<h3 id="webviewgotoindexindex"><a href="#webviewgotoindexindex"><code>&lt;webview&gt;.goToIndex(index)</code></a><a class="header-link" href="#webviewgotoindexindex" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>index</code> Integer</li>
</ul>
<p>Navigates to the specified absolute index.</p>
<h3 id="webviewgotooffsetoffset"><a href="#webviewgotooffsetoffset"><code>&lt;webview&gt;.goToOffset(offset)</code></a><a class="header-link" href="#webviewgotooffsetoffset" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>offset</code> Integer</li>
</ul>
<p>Navigates to the specified offset from the "current entry".</p>
<h3 id="webviewiscrashed"><a href="#webviewiscrashed"><code>&lt;webview&gt;.isCrashed()</code></a><a class="header-link" href="#webviewiscrashed" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Boolean</code> - Whether the renderer process has crashed.</p>
<h3 id="webviewsetuseragentuseragent"><a href="#webviewsetuseragentuseragent"><code>&lt;webview&gt;.setUserAgent(userAgent)</code></a><a class="header-link" href="#webviewsetuseragentuseragent" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>userAgent</code> String</li>
</ul>
<p>Overrides the user agent for the guest page.</p>
<h3 id="webviewgetuseragent"><a href="#webviewgetuseragent"><code>&lt;webview&gt;.getUserAgent()</code></a><a class="header-link" href="#webviewgetuseragent" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>String</code> - The user agent for guest page.</p>
<h3 id="webviewinsertcsscss"><a href="#webviewinsertcsscss"><code>&lt;webview&gt;.insertCSS(css)</code></a><a class="header-link" href="#webviewinsertcsscss" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>css</code> String</li>
</ul>
<p>Injects CSS into the guest page.</p>
<h3 id="webviewexecutejavascriptcode-usergesture-callback"><a href="#webviewexecutejavascriptcode-usergesture-callback"><code>&lt;webview&gt;.executeJavaScript(code[, userGesture, callback])</code></a><a class="header-link" href="#webviewexecutejavascriptcode-usergesture-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>code</code> String</li>
<li><code>userGesture</code> Boolean (optional) - Default <code>false</code>.</li>
<li>
<p><code>callback</code> Function (optional) - Called after script has been executed.</p>
<ul>
<li><code>result</code> Any</li>
</ul>
</li>
</ul>
<p>Evaluates <code>code</code> in page. If <code>userGesture</code> is set, it will create the user
gesture context in the page. HTML APIs like <code>requestFullScreen</code>, which require
user action, can take advantage of this option for automation.</p>
<h3 id="webviewopendevtools"><a href="#webviewopendevtools"><code>&lt;webview&gt;.openDevTools()</code></a><a class="header-link" href="#webviewopendevtools" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Opens a DevTools window for guest page.</p>
<h3 id="webviewclosedevtools"><a href="#webviewclosedevtools"><code>&lt;webview&gt;.closeDevTools()</code></a><a class="header-link" href="#webviewclosedevtools" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Closes the DevTools window of guest page.</p>
<h3 id="webviewisdevtoolsopened"><a href="#webviewisdevtoolsopened"><code>&lt;webview&gt;.isDevToolsOpened()</code></a><a class="header-link" href="#webviewisdevtoolsopened" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Boolean</code> - Whether guest page has a DevTools window attached.</p>
<h3 id="webviewisdevtoolsfocused"><a href="#webviewisdevtoolsfocused"><code>&lt;webview&gt;.isDevToolsFocused()</code></a><a class="header-link" href="#webviewisdevtoolsfocused" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Boolean</code> - Whether DevTools window of guest page is focused.</p>
<h3 id="webviewinspectelementx-y"><a href="#webviewinspectelementx-y"><code>&lt;webview&gt;.inspectElement(x, y)</code></a><a class="header-link" href="#webviewinspectelementx-y" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>x</code> Integer</li>
<li><code>y</code> Integer</li>
</ul>
<p>Starts inspecting element at position (<code>x</code>, <code>y</code>) of guest page.</p>
<h3 id="webviewinspectserviceworker"><a href="#webviewinspectserviceworker"><code>&lt;webview&gt;.inspectServiceWorker()</code></a><a class="header-link" href="#webviewinspectserviceworker" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Opens the DevTools for the service worker context present in the guest page.</p>
<h3 id="webviewsetaudiomutedmuted"><a href="#webviewsetaudiomutedmuted"><code>&lt;webview&gt;.setAudioMuted(muted)</code></a><a class="header-link" href="#webviewsetaudiomutedmuted" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>muted</code> Boolean</li>
</ul>
<p>Set guest page muted.</p>
<h3 id="webviewisaudiomuted"><a href="#webviewisaudiomuted"><code>&lt;webview&gt;.isAudioMuted()</code></a><a class="header-link" href="#webviewisaudiomuted" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <code>Boolean</code> - Whether guest page has been muted.</p>
<h3 id="webviewundo"><a href="#webviewundo"><code>&lt;webview&gt;.undo()</code></a><a class="header-link" href="#webviewundo" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Executes editing command <code>undo</code> in page.</p>
<h3 id="webviewredo"><a href="#webviewredo"><code>&lt;webview&gt;.redo()</code></a><a class="header-link" href="#webviewredo" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Executes editing command <code>redo</code> in page.</p>
<h3 id="webviewcut"><a href="#webviewcut"><code>&lt;webview&gt;.cut()</code></a><a class="header-link" href="#webviewcut" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Executes editing command <code>cut</code> in page.</p>
<h3 id="webviewcopy"><a href="#webviewcopy"><code>&lt;webview&gt;.copy()</code></a><a class="header-link" href="#webviewcopy" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Executes editing command <code>copy</code> in page.</p>
<h3 id="webviewpaste"><a href="#webviewpaste"><code>&lt;webview&gt;.paste()</code></a><a class="header-link" href="#webviewpaste" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Executes editing command <code>paste</code> in page.</p>
<h3 id="webviewpasteandmatchstyle"><a href="#webviewpasteandmatchstyle"><code>&lt;webview&gt;.pasteAndMatchStyle()</code></a><a class="header-link" href="#webviewpasteandmatchstyle" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Executes editing command <code>pasteAndMatchStyle</code> in page.</p>
<h3 id="webviewdelete"><a href="#webviewdelete"><code>&lt;webview&gt;.delete()</code></a><a class="header-link" href="#webviewdelete" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Executes editing command <code>delete</code> in page.</p>
<h3 id="webviewselectall"><a href="#webviewselectall"><code>&lt;webview&gt;.selectAll()</code></a><a class="header-link" href="#webviewselectall" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Executes editing command <code>selectAll</code> in page.</p>
<h3 id="webviewunselect"><a href="#webviewunselect"><code>&lt;webview&gt;.unselect()</code></a><a class="header-link" href="#webviewunselect" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Executes editing command <code>unselect</code> in page.</p>
<h3 id="webviewreplacetext"><a href="#webviewreplacetext"><code>&lt;webview&gt;.replace(text)</code></a><a class="header-link" href="#webviewreplacetext" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>text</code> String</li>
</ul>
<p>Executes editing command <code>replace</code> in page.</p>
<h3 id="webviewreplacemisspellingtext"><a href="#webviewreplacemisspellingtext"><code>&lt;webview&gt;.replaceMisspelling(text)</code></a><a class="header-link" href="#webviewreplacemisspellingtext" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>text</code> String</li>
</ul>
<p>Executes editing command <code>replaceMisspelling</code> in page.</p>
<h3 id="webviewinserttexttext"><a href="#webviewinserttexttext"><code>&lt;webview&gt;.insertText(text)</code></a><a class="header-link" href="#webviewinserttexttext" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>text</code> String</li>
</ul>
<p>Inserts <code>text</code> to the focused element.</p>
<h3 id="webviewfindinpagetext-options"><a href="#webviewfindinpagetext-options"><code>&lt;webview&gt;.findInPage(text[, options])</code></a><a class="header-link" href="#webviewfindinpagetext-options" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>text</code> String - Content to be searched, must not be empty.</li>
<li>
<p><code>options</code> Object (optional)</p>
<ul>
<li><code>forward</code> Boolean - (optional) Whether to search forward or backward, defaults to <code>true</code>.</li>
<li><code>findNext</code> Boolean - (optional) Whether the operation is first request or a follow up,
defaults to <code>false</code>.</li>
<li><code>matchCase</code> Boolean - (optional) Whether search should be case-sensitive,
defaults to <code>false</code>.</li>
<li><code>wordStart</code> Boolean - (optional) Whether to look only at the start of words.
defaults to <code>false</code>.</li>
<li><code>medialCapitalAsWordStart</code> Boolean - (optional) When combined with <code>wordStart</code>,
accepts a match in the middle of a word if the match begins with an
uppercase letter followed by a lowercase or non-letter.
Accepts several other intra-word matches, defaults to <code>false</code>.</li>
</ul>
</li>
</ul>
<p>Returns <code>Integer</code> - The request id used for the request.</p>
<p>Starts a request to find all matches for the <code>text</code> in the web page. The result of the request
can be obtained by subscribing to <a href="https://electronjs.org/docs/api/webview-tag#event-found-in-page"><code>found-in-page</code></a> event.</p>
<h3 id="webviewstopfindinpageaction"><a href="#webviewstopfindinpageaction"><code>&lt;webview&gt;.stopFindInPage(action)</code></a><a class="header-link" href="#webviewstopfindinpageaction" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>action</code> String - Specifies the action to take place when ending
<a href="https://electronjs.org/docs/api/webview-tag#webviewtagfindinpage"><code>&lt;webview&gt;.findInPage</code></a> request.</p>
<ul>
<li><code>clearSelection</code> - Clear the selection.</li>
<li><code>keepSelection</code> - Translate the selection into a normal selection.</li>
<li><code>activateSelection</code> - Focus and click the selection node.</li>
</ul>
</li>
</ul>
<p>Stops any <code>findInPage</code> request for the <code>webview</code> with the provided <code>action</code>.</p>
<h3 id="webviewprintoptions"><a href="#webviewprintoptions"><code>&lt;webview&gt;.print([options])</code></a><a class="header-link" href="#webviewprintoptions" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>options</code> Object (optional)</p>
<ul>
<li><code>silent</code> Boolean (optional) - Don't ask user for print settings. Default is <code>false</code>.</li>
<li><code>printBackground</code> Boolean (optional) - Also prints the background color and image of
the web page. Default is <code>false</code>.</li>
<li><code>deviceName</code> String (optional) - Set the printer device name to use. Default is <code>''</code>.</li>
</ul>
</li>
</ul>
<p>Prints <code>webview</code>'s web page. Same as <code>webContents.print([options])</code>.</p>
<h3 id="webviewprinttopdfoptions-callback"><a href="#webviewprinttopdfoptions-callback"><code>&lt;webview&gt;.printToPDF(options, callback)</code></a><a class="header-link" href="#webviewprinttopdfoptions-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li>
<p><code>options</code> Object</p>
<ul>
<li><code>marginsType</code> Integer - (optional) Specifies the type of margins to use. Uses 0 for
default margin, 1 for no margin, and 2 for minimum margin.</li>
<li><code>pageSize</code> String - (optional) Specify page size of the generated PDF. Can be <code>A3</code>,
<code>A4</code>, <code>A5</code>, <code>Legal</code>, <code>Letter</code>, <code>Tabloid</code> or an Object containing <code>height</code>
and <code>width</code> in microns.</li>
<li><code>printBackground</code> Boolean - (optional) Whether to print CSS backgrounds.</li>
<li><code>printSelectionOnly</code> Boolean - (optional) Whether to print selection only.</li>
<li><code>landscape</code> Boolean - (optional) <code>true</code> for landscape, <code>false</code> for portrait.</li>
</ul>
</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>error</code> Error</li>
<li><code>data</code> Buffer</li>
</ul>
</li>
</ul>
<p>Prints <code>webview</code>'s web page as PDF, Same as <code>webContents.printToPDF(options, callback)</code>.</p>
<h3 id="webviewcapturepagerect-callback"><a href="#webviewcapturepagerect-callback"><code>&lt;webview&gt;.capturePage([rect, ]callback)</code></a><a class="header-link" href="#webviewcapturepagerect-callback" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>rect</code> <a href="https://electronjs.org/docs/api/structures/rectangle">Rectangle</a> (optional) - The area of the page to be captured</li>
<li>
<p><code>callback</code> Function</p>
<ul>
<li><code>image</code> <a href="https://electronjs.org/docs/api/native-image">NativeImage</a></li>
</ul>
</li>
</ul>
<p>Captures a snapshot of the <code>webview</code>'s page. Same as <code>webContents.capturePage([rect, ]callback)</code>.</p>
<h3 id="webviewsendchannel-arg1-arg2-"><a href="#webviewsendchannel-arg1-arg2-"><code>&lt;webview&gt;.send(channel[, arg1][, arg2][, ...])</code></a><a class="header-link" href="#webviewsendchannel-arg1-arg2-" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>channel</code> String</li>
<li><code>...args</code> any[]</li>
</ul>
<p>Send an asynchronous message to renderer process via <code>channel</code>, you can also
send arbitrary arguments. The renderer process can handle the message by
listening to the <code>channel</code> event with the <code>ipcRenderer</code> module.</p>
<p>See <a href="https://electronjs.org/docs/api/web-contents#webcontentssendchannel-args">webContents.send</a> for
examples.</p>
<h3 id="webviewsendinputeventevent"><a href="#webviewsendinputeventevent"><code>&lt;webview&gt;.sendInputEvent(event)</code></a><a class="header-link" href="#webviewsendinputeventevent" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>event</code> Object</li>
</ul>
<p>Sends an input <code>event</code> to the page.</p>
<p>See <a href="https://electronjs.org/docs/api/web-contents#webcontentssendinputeventevent">webContents.sendInputEvent</a>
for detailed description of <code>event</code> object.</p>
<h3 id="webviewsetzoomfactorfactor"><a href="#webviewsetzoomfactorfactor"><code>&lt;webview&gt;.setZoomFactor(factor)</code></a><a class="header-link" href="#webviewsetzoomfactorfactor" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>factor</code> Number - Zoom factor.</li>
</ul>
<p>Changes the zoom factor to the specified factor. Zoom factor is
zoom percent divided by 100, so 300% = 3.0.</p>
<h3 id="webviewsetzoomlevellevel"><a href="#webviewsetzoomlevellevel"><code>&lt;webview&gt;.setZoomLevel(level)</code></a><a class="header-link" href="#webviewsetzoomlevellevel" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>level</code> Number - Zoom level</li>
</ul>
<p>Changes the zoom level to the specified level. The original size is 0 and each
increment above or below represents zooming 20% larger or smaller to default
limits of 300% and 50% of original size, respectively.</p>
<h3 id="webviewshowdefinitionforselection-macos"><a href="#webviewshowdefinitionforselection-macos"><code>&lt;webview&gt;.showDefinitionForSelection()</code> <em class="platform-label">macOS</em></a><a class="header-link" href="#webviewshowdefinitionforselection-macos" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Shows pop-up dictionary that searches the selected word on the page.</p>
<h3 id="webviewgetwebcontents"><a href="#webviewgetwebcontents"><code>&lt;webview&gt;.getWebContents()</code></a><a class="header-link" href="#webviewgetwebcontents" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns <a href="https://electronjs.org/docs/api/web-contents"><code>WebContents</code></a> - The web contents associated with
this <code>webview</code>.</p>
<h2 id="dom-events"><a href="#dom-events">DOM events</a><a class="header-link" href="#dom-events" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>The following DOM events are available to the <code>webview</code> tag:</p>
<h3 id="event-load-commit"><a href="#event-load-commit">Event: 'load-commit'</a><a class="header-link" href="#event-load-commit" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>url</code> String</li>
<li><code>isMainFrame</code> Boolean</li>
</ul>
<p>Fired when a load has committed. This includes navigation within the current
document as well as subframe document-level loads, but does not include
asynchronous resource loads.</p>
<h3 id="event-did-finish-load"><a href="#event-did-finish-load">Event: 'did-finish-load'</a><a class="header-link" href="#event-did-finish-load" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Fired when the navigation is done, i.e. the spinner of the tab will stop
spinning, and the <code>onload</code> event is dispatched.</p>
<h3 id="event-did-fail-load"><a href="#event-did-fail-load">Event: 'did-fail-load'</a><a class="header-link" href="#event-did-fail-load" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>errorCode</code> Integer</li>
<li><code>errorDescription</code> String</li>
<li><code>validatedURL</code> String</li>
<li><code>isMainFrame</code> Boolean</li>
</ul>
<p>This event is like <code>did-finish-load</code>, but fired when the load failed or was
cancelled, e.g. <code>window.stop()</code> is invoked.</p>
<h3 id="event-did-frame-finish-load"><a href="#event-did-frame-finish-load">Event: 'did-frame-finish-load'</a><a class="header-link" href="#event-did-frame-finish-load" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>isMainFrame</code> Boolean</li>
</ul>
<p>Fired when a frame has done navigation.</p>
<h3 id="event-did-start-loading"><a href="#event-did-start-loading">Event: 'did-start-loading'</a><a class="header-link" href="#event-did-start-loading" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Corresponds to the points in time when the spinner of the tab starts spinning.</p>
<h3 id="event-did-stop-loading"><a href="#event-did-stop-loading">Event: 'did-stop-loading'</a><a class="header-link" href="#event-did-stop-loading" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Corresponds to the points in time when the spinner of the tab stops spinning.</p>
<h3 id="event-did-get-response-details"><a href="#event-did-get-response-details">Event: 'did-get-response-details'</a><a class="header-link" href="#event-did-get-response-details" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>status</code> Boolean</li>
<li><code>newURL</code> String</li>
<li><code>originalURL</code> String</li>
<li><code>httpResponseCode</code> Integer</li>
<li><code>requestMethod</code> String</li>
<li><code>referrer</code> String</li>
<li><code>headers</code> Object</li>
<li><code>resourceType</code> String</li>
</ul>
<p>Fired when details regarding a requested resource is available.
<code>status</code> indicates socket connection to download the resource.</p>
<h3 id="event-did-get-redirect-request"><a href="#event-did-get-redirect-request">Event: 'did-get-redirect-request'</a><a class="header-link" href="#event-did-get-redirect-request" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>oldURL</code> String</li>
<li><code>newURL</code> String</li>
<li><code>isMainFrame</code> Boolean</li>
</ul>
<p>Fired when a redirect was received while requesting a resource.</p>
<h3 id="event-dom-ready"><a href="#event-dom-ready">Event: 'dom-ready'</a><a class="header-link" href="#event-dom-ready" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Fired when document in the given frame is loaded.</p>
<h3 id="event-page-title-updated"><a href="#event-page-title-updated">Event: 'page-title-updated'</a><a class="header-link" href="#event-page-title-updated" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>title</code> String</li>
<li><code>explicitSet</code> Boolean</li>
</ul>
<p>Fired when page title is set during navigation. <code>explicitSet</code> is false when
title is synthesized from file url.</p>
<h3 id="event-page-favicon-updated"><a href="#event-page-favicon-updated">Event: 'page-favicon-updated'</a><a class="header-link" href="#event-page-favicon-updated" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>favicons</code> String[] - Array of URLs.</li>
</ul>
<p>Fired when page receives favicon urls.</p>
<h3 id="event-enter-html-full-screen"><a href="#event-enter-html-full-screen">Event: 'enter-html-full-screen'</a><a class="header-link" href="#event-enter-html-full-screen" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Fired when page enters fullscreen triggered by HTML API.</p>
<h3 id="event-leave-html-full-screen"><a href="#event-leave-html-full-screen">Event: 'leave-html-full-screen'</a><a class="header-link" href="#event-leave-html-full-screen" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Fired when page leaves fullscreen triggered by HTML API.</p>
<h3 id="event-console-message"><a href="#event-console-message">Event: 'console-message'</a><a class="header-link" href="#event-console-message" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>level</code> Integer</li>
<li><code>message</code> String</li>
<li><code>line</code> Integer</li>
<li><code>sourceId</code> String</li>
</ul>
<p>Fired when the guest window logs a console message.</p>
<p>The following example code forwards all log messages to the embedder's console
without regard for log level or other properties.</p>
<pre><code class="hljs language-javascript" id="_es33iegj"><span class="hljs-keyword">const</span> webview = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'webview'</span>)
webview.addEventListener(<span class="hljs-string">'console-message'</span>, (e) =&gt; {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Guest page logged a message:'</span>, e.message)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_es33iegj">Copy</button></pre>
<h3 id="event-found-in-page"><a href="#event-found-in-page">Event: 'found-in-page'</a><a class="header-link" href="#event-found-in-page" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li>
<p><code>result</code> Object</p>
<ul>
<li><code>requestId</code> Integer</li>
<li><code>activeMatchOrdinal</code> Integer - Position of the active match.</li>
<li><code>matches</code> Integer - Number of Matches.</li>
<li><code>selectionArea</code> Object - Coordinates of first match region.</li>
<li><code>finalUpdate</code> Boolean</li>
</ul>
</li>
</ul>
<p>Fired when a result is available for
<a href="https://electronjs.org/docs/api/webview-tag#webviewtagfindinpage"><code>webview.findInPage</code></a> request.</p>
<pre><code class="hljs language-javascript" id="_yb0t441n"><span class="hljs-keyword">const</span> webview = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'webview'</span>)
webview.addEventListener(<span class="hljs-string">'found-in-page'</span>, (e) =&gt; {
  webview.stopFindInPage(<span class="hljs-string">'keepSelection'</span>)
})

<span class="hljs-keyword">const</span> requestId = webview.findInPage(<span class="hljs-string">'test'</span>)
<span class="hljs-built_in">console</span>.log(requestId)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_yb0t441n">Copy</button></pre>
<h3 id="event-new-window"><a href="#event-new-window">Event: 'new-window'</a><a class="header-link" href="#event-new-window" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>url</code> String</li>
<li><code>frameName</code> String</li>
<li><code>disposition</code> String - Can be <code>default</code>, <code>foreground-tab</code>, <code>background-tab</code>,
<code>new-window</code>, <code>save-to-disk</code> and <code>other</code>.</li>
<li><code>options</code> Object - The options which should be used for creating the new
<code>BrowserWindow</code>.</li>
</ul>
<p>Fired when the guest page attempts to open a new browser window.</p>
<p>The following example code opens the new url in system's default browser.</p>
<pre><code class="hljs language-javascript" id="_60ilp59"><span class="hljs-keyword">const</span> {shell} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
<span class="hljs-keyword">const</span> webview = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'webview'</span>)

webview.addEventListener(<span class="hljs-string">'new-window'</span>, (e) =&gt; {
  <span class="hljs-keyword">const</span> protocol = <span class="hljs-built_in">require</span>(<span class="hljs-string">'url'</span>).parse(e.url).protocol
  <span class="hljs-keyword">if</span> (protocol === <span class="hljs-string">'http:'</span> || protocol === <span class="hljs-string">'https:'</span>) {
    shell.openExternal(e.url)
  }
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_60ilp59">Copy</button></pre>
<h3 id="event-will-navigate"><a href="#event-will-navigate">Event: 'will-navigate'</a><a class="header-link" href="#event-will-navigate" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>url</code> String</li>
</ul>
<p>Emitted when a user or the page wants to start navigation. It can happen when
the <code>window.location</code> object is changed or a user clicks a link in the page.</p>
<p>This event will not emit when the navigation is started programmatically with
APIs like <code>&lt;webview&gt;.loadURL</code> and <code>&lt;webview&gt;.back</code>.</p>
<p>It is also not emitted during in-page navigation, such as clicking anchor links
or updating the <code>window.location.hash</code>. Use <code>did-navigate-in-page</code> event for
this purpose.</p>
<p>Calling <code>event.preventDefault()</code> does <strong>NOT</strong> have any effect.</p>
<h3 id="event-did-navigate"><a href="#event-did-navigate">Event: 'did-navigate'</a><a class="header-link" href="#event-did-navigate" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>url</code> String</li>
</ul>
<p>Emitted when a navigation is done.</p>
<p>This event is not emitted for in-page navigations, such as clicking anchor links
or updating the <code>window.location.hash</code>. Use <code>did-navigate-in-page</code> event for
this purpose.</p>
<h3 id="event-did-navigate-in-page"><a href="#event-did-navigate-in-page">Event: 'did-navigate-in-page'</a><a class="header-link" href="#event-did-navigate-in-page" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>isMainFrame</code> Boolean</li>
<li><code>url</code> String</li>
</ul>
<p>Emitted when an in-page navigation happened.</p>
<p>When in-page navigation happens, the page URL changes but does not cause
navigation outside of the page. Examples of this occurring are when anchor links
are clicked or when the DOM <code>hashchange</code> event is triggered.</p>
<h3 id="event-close"><a href="#event-close">Event: 'close'</a><a class="header-link" href="#event-close" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Fired when the guest page attempts to close itself.</p>
<p>The following example code navigates the <code>webview</code> to <code>about:blank</code> when the
guest attempts to close itself.</p>
<pre><code class="hljs language-javascript" id="_ab23wgwo"><span class="hljs-keyword">const</span> webview = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'webview'</span>)
webview.addEventListener(<span class="hljs-string">'close'</span>, () =&gt; {
  webview.src = <span class="hljs-string">'about:blank'</span>
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_ab23wgwo">Copy</button></pre>
<h3 id="event-ipc-message"><a href="#event-ipc-message">Event: 'ipc-message'</a><a class="header-link" href="#event-ipc-message" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>channel</code> String</li>
<li><code>args</code> Array</li>
</ul>
<p>Fired when the guest page has sent an asynchronous message to embedder page.</p>
<p>With <code>sendToHost</code> method and <code>ipc-message</code> event you can easily communicate
between guest page and embedder page:</p>
<pre><code class="hljs language-javascript" id="_t3ggug6j"><span class="hljs-comment">// In embedder page.</span>
<span class="hljs-keyword">const</span> webview = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'webview'</span>)
webview.addEventListener(<span class="hljs-string">'ipc-message'</span>, (event) =&gt; {
  <span class="hljs-built_in">console</span>.log(event.channel)
  <span class="hljs-comment">// Prints "pong"</span>
})
webview.send(<span class="hljs-string">'ping'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_t3ggug6j">Copy</button></pre>
<pre><code class="hljs language-javascript" id="_qe1x1n7n"><span class="hljs-comment">// In guest page.</span>
<span class="hljs-keyword">const</span> {ipcRenderer} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'electron'</span>)
ipcRenderer.on(<span class="hljs-string">'ping'</span>, () =&gt; {
  ipcRenderer.sendToHost(<span class="hljs-string">'pong'</span>)
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_qe1x1n7n">Copy</button></pre>
<h3 id="event-crashed"><a href="#event-crashed">Event: 'crashed'</a><a class="header-link" href="#event-crashed" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Fired when the renderer process is crashed.</p>
<h3 id="event-gpu-crashed"><a href="#event-gpu-crashed">Event: 'gpu-crashed'</a><a class="header-link" href="#event-gpu-crashed" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Fired when the gpu process is crashed.</p>
<h3 id="event-plugin-crashed"><a href="#event-plugin-crashed">Event: 'plugin-crashed'</a><a class="header-link" href="#event-plugin-crashed" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>name</code> String</li>
<li><code>version</code> String</li>
</ul>
<p>Fired when a plugin process is crashed.</p>
<h3 id="event-destroyed"><a href="#event-destroyed">Event: 'destroyed'</a><a class="header-link" href="#event-destroyed" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Fired when the WebContents is destroyed.</p>
<h3 id="event-media-started-playing"><a href="#event-media-started-playing">Event: 'media-started-playing'</a><a class="header-link" href="#event-media-started-playing" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Emitted when media starts playing.</p>
<h3 id="event-media-paused"><a href="#event-media-paused">Event: 'media-paused'</a><a class="header-link" href="#event-media-paused" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Emitted when media is paused or done playing.</p>
<h3 id="event-did-change-theme-color"><a href="#event-did-change-theme-color">Event: 'did-change-theme-color'</a><a class="header-link" href="#event-did-change-theme-color" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>themeColor</code> String</li>
</ul>
<p>Emitted when a page's theme color changes. This is usually due to encountering a meta tag:</p>
<pre><code class="hljs language-html" id="_of6ay2qg"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">'theme-color'</span> <span class="hljs-attr">content</span>=<span class="hljs-string">'#ff0000'</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_of6ay2qg">Copy</button></pre>
<h3 id="event-update-target-url"><a href="#event-update-target-url">Event: 'update-target-url'</a><a class="header-link" href="#event-update-target-url" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Returns:</p>
<ul>
<li><code>url</code> String</li>
</ul>
<p>Emitted when mouse moves over a link or the keyboard moves the focus to a link.</p>
<h3 id="event-devtools-opened"><a href="#event-devtools-opened">Event: 'devtools-opened'</a><a class="header-link" href="#event-devtools-opened" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Emitted when DevTools is opened.</p>
<h3 id="event-devtools-closed"><a href="#event-devtools-closed">Event: 'devtools-closed'</a><a class="header-link" href="#event-devtools-closed" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Emitted when DevTools is closed.</p>
<h3 id="event-devtools-focused"><a href="#event-devtools-focused">Event: 'devtools-focused'</a><a class="header-link" href="#event-devtools-focused" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>Emitted when DevTools is focused / opened.</p>

  <hr>
  <h1 id="windowopen-function"><a href="#windowopen-function"><code>window.open</code> Function</a><a class="header-link" href="#windowopen-function" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<blockquote>
<p>Open a new window and load a URL.</p>
</blockquote>
<p>When <code>window.open</code> is called to create a new window in a web page, a new instance
of <code>BrowserWindow</code> will be created for the <code>url</code> and a proxy will be returned
to <code>window.open</code> to let the page have limited control over it.</p>
<p>The proxy has limited standard functionality implemented to be
compatible with traditional web pages. For full control of the new window
you should create a <code>BrowserWindow</code> directly.</p>
<p>The newly created <code>BrowserWindow</code> will inherit the parent window's options by
default. To override inherited options you can set them in the <code>features</code>
string.</p>
<h3 id="windowopenurl-framename-features"><a href="#windowopenurl-framename-features"><code>window.open(url[, frameName][, features])</code></a><a class="header-link" href="#windowopenurl-framename-features" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>url</code> String</li>
<li><code>frameName</code> String (optional)</li>
<li><code>features</code> String (optional)</li>
</ul>
<p>Returns <a href="https://electronjs.org/docs/api/browser-window-proxy"><code>BrowserWindowProxy</code></a> - Creates a new window
and returns an instance of <code>BrowserWindowProxy</code> class.</p>
<p>The <code>features</code> string follows the format of standard browser, but each feature
has to be a field of <code>BrowserWindow</code>'s options.</p>
<p><strong>Notes:</strong></p>
<ul>
<li>Node integration will always be disabled in the opened <code>window</code> if it is
disabled on the parent window.</li>
<li>Context isolation will always be enabled in the opened <code>window</code> if it is
enabled on the parent window.</li>
<li>JavaScript will always be disabled in the opened <code>window</code> if it is disabled on
the parent window.</li>
<li>Non-standard features (that are not handled by Chromium or Electron) given in
<code>features</code> will be passed to any registered <code>webContent</code>'s <code>new-window</code> event
handler in the <code>additionalFeatures</code> argument.</li>
</ul>
<h3 id="windowopenerpostmessagemessage-targetorigin"><a href="#windowopenerpostmessagemessage-targetorigin"><code>window.opener.postMessage(message, targetOrigin)</code></a><a class="header-link" href="#windowopenerpostmessagemessage-targetorigin" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<ul>
<li><code>message</code> String</li>
<li><code>targetOrigin</code> String</li>
</ul>
<p>Sends a message to the parent window with the specified origin or <code>*</code> for no
origin preference.</p>
<h3 id="using-chromes-windowopen-implementation"><a href="#using-chromes-windowopen-implementation">Using Chrome's <code>window.open()</code> implementation</a><a class="header-link" href="#using-chromes-windowopen-implementation" title="Permalink"><span class="octicon octicon-link"></span></a></h3>
<p>If you want to use Chrome's built-in <code>window.open()</code> implementation, set
<code>nativeWindowOpen</code> to <code>true</code> in the <code>webPreferences</code> options object.</p>
<p>Native <code>window.open()</code> allows synchronous access to opened windows so it is
convenient choice if you need to open a dialog or a preferences window.</p>
<p>This option can also be set on <code>&lt;webview&gt;</code> tags as well:</p>
<pre><code class="hljs language-html" id="_urmfuqh9"><span class="hljs-tag">&lt;<span class="hljs-name">webview</span> <span class="hljs-attr">webpreferences</span>=<span class="hljs-string">"nativeWindowOpen=yes"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">webview</span>&gt;</span></code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_urmfuqh9">Copy</button></pre>
<p>The creation of the <code>BrowserWindow</code> is customizable via <code>WebContents</code>'s
<code>new-window</code> event.</p>
<pre><code class="hljs language-javascript" id="_eik4egd"><span class="hljs-comment">// main process</span>
<span class="hljs-keyword">const</span> mainWindow = <span class="hljs-keyword">new</span> BrowserWindow({
  <span class="hljs-attr">width</span>: <span class="hljs-number">800</span>,
  <span class="hljs-attr">height</span>: <span class="hljs-number">600</span>,
  <span class="hljs-attr">webPreferences</span>: {
    <span class="hljs-attr">nativeWindowOpen</span>: <span class="hljs-literal">true</span>
  }
})
mainWindow.webContents.on(<span class="hljs-string">'new-window'</span>, (event, url, frameName, disposition, options, additionalFeatures) =&gt; {
  <span class="hljs-keyword">if</span> (frameName === <span class="hljs-string">'modal'</span>) {
    <span class="hljs-comment">// open window as modal</span>
    event.preventDefault()
    <span class="hljs-built_in">Object</span>.assign(options, {
      <span class="hljs-attr">modal</span>: <span class="hljs-literal">true</span>,
      <span class="hljs-attr">parent</span>: mainWindow,
      <span class="hljs-attr">width</span>: <span class="hljs-number">100</span>,
      <span class="hljs-attr">height</span>: <span class="hljs-number">100</span>
    })
    event.newGuest = <span class="hljs-keyword">new</span> BrowserWindow(options)
  }
})</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_eik4egd">Copy</button></pre>
<pre><code class="hljs language-javascript" id="_o25nlsa5"><span class="hljs-comment">// renderer process (mainWindow)</span>
<span class="hljs-keyword">let</span> modal = <span class="hljs-built_in">window</span>.open(<span class="hljs-string">''</span>, <span class="hljs-string">'modal'</span>)
modal.document.write(<span class="hljs-string">'&lt;h1&gt;Hello&lt;/h1&gt;'</span>)</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_o25nlsa5">Copy</button></pre>

  <hr>
  <h1 id="windows-store-guide"><a href="#windows-store-guide">Windows Store Guide</a><a class="header-link" href="#windows-store-guide" title="Permalink"><span class="octicon octicon-link"></span></a></h1>
<p>With Windows 10, the good old win32 executable got a new sibling: The Universal
Windows Platform. The new <code>.appx</code> format does not only enable a number of new
powerful APIs like Cortana or Push Notifications, but through the Windows Store,
also simplifies installation and updating.</p>
<p>Microsoft <a href="https://github.com/catalystcode/electron-windows-store">developed a tool that compiles Electron apps as <code>.appx</code> packages</a>,
enabling developers to use some of the goodies found in the new application
model. This guide explains how to use it - and what the capabilities and
limitations of an Electron AppX package are.</p>
<h2 id="background-and-requirements"><a href="#background-and-requirements">Background and Requirements</a><a class="header-link" href="#background-and-requirements" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Windows 10 "Anniversary Update" is able to run win32 <code>.exe</code> binaries by
launching them together with a virtualized filesystem and registry. Both are
created during compilation by running app and installer inside a Windows
Container, allowing Windows to identify exactly which modifications to the
operating system are done during installation. Pairing the executable with a
virtual filesystem and a virtual registry allows Windows to enable one-click
installation and uninstallation.</p>
<p>In addition, the exe is launched inside the appx model - meaning that it can use
many of the APIs available to the Universal Windows Platform. To gain even more
capabilities, an Electron app can pair up with an invisible UWP background task
launched together with the <code>exe</code> - sort of launched as a sidekick to run tasks
in the background, receive push notifications, or to communicate with other UWP
applications.</p>
<p>To compile any existing Electron app, ensure that you have the following
requirements:</p>
<ul>
<li>Windows 10 with Anniversary Update (released August 2nd, 2016)</li>
<li>The Windows 10 SDK, <a href="https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk">downloadable here</a></li>
<li>At least Node 4 (to check, run <code>node -v</code>)</li>
</ul>
<p>Then, go and install the <code>electron-windows-store</code> CLI:</p>
<pre><code class="hljs language-sh" id="_qhdx957i">npm install -g electron-windows-store</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_qhdx957i">Copy</button></pre>
<h2 id="step-1-package-your-electron-application"><a href="#step-1-package-your-electron-application">Step 1: Package Your Electron Application</a><a class="header-link" href="#step-1-package-your-electron-application" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>Package the application using <a href="https://github.com/electron-userland/electron-packager">electron-packager</a> (or a similar tool).
Make sure to remove <code>node_modules</code> that you don't need in your final application, since
any module you don't actually need will just increase your application's size.</p>
<p>The output should look roughly like this:</p>
<pre><code class="hljs language-text" id="_5ub9u7g">├── Ghost<span class="hljs-selector-class">.exe</span>
├── LICENSE
├── content_resources_200_percent<span class="hljs-selector-class">.pak</span>
├── content_shell<span class="hljs-selector-class">.pak</span>
├── d3dcompiler_47<span class="hljs-selector-class">.dll</span>
├── ffmpeg<span class="hljs-selector-class">.dll</span>
├── icudtl<span class="hljs-selector-class">.dat</span>
├── libEGL<span class="hljs-selector-class">.dll</span>
├── libGLESv2<span class="hljs-selector-class">.dll</span>
├── locales
│&nbsp;&nbsp; ├── am<span class="hljs-selector-class">.pak</span>
│&nbsp;&nbsp; ├── ar<span class="hljs-selector-class">.pak</span>
│&nbsp;&nbsp; ├── [...]
├── natives_blob<span class="hljs-selector-class">.bin</span>
├── node<span class="hljs-selector-class">.dll</span>
├── resources
│&nbsp;&nbsp; ├── app
│&nbsp;&nbsp; └── atom<span class="hljs-selector-class">.asar</span>
├── snapshot_blob<span class="hljs-selector-class">.bin</span>
├── squirrel<span class="hljs-selector-class">.exe</span>
└── ui_resources_200_percent.pak</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_5ub9u7g">Copy</button></pre>
<h2 id="step-2-running-electron-windows-store"><a href="#step-2-running-electron-windows-store">Step 2: Running electron-windows-store</a><a class="header-link" href="#step-2-running-electron-windows-store" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>From an elevated PowerShell (run it "as Administrator"), run
<code>electron-windows-store</code> with the required parameters, passing both the input
and output directories, the app's name and version, and confirmation that
<code>node_modules</code> should be flattened.</p>
<pre><code class="hljs language-powershell" id="_h7bb28s">electron-windows-store `
    --input-directory C:\myelectronapp `
    --output-directory C:\output\myelectronapp `
    --flatten true `
    --package-version <span class="hljs-number">1.0</span>.<span class="hljs-number">0.0</span> `
    --package-name myelectronapp</code><button class="btn-clipboard simptip-position-top" data-tooltip="Copy to Clipboard" data-clipboard-target="#_h7bb28s">Copy</button></pre>
<p>Once executed, the tool goes to work: It accepts your Electron app as an input,
flattening the <code>node_modules</code>. Then, it archives your application as <code>app.zip</code>.
Using an installer and a Windows Container, the tool creates an "expanded" AppX
package - including the Windows Application Manifest (<code>AppXManifest.xml</code>) as
well as the virtual file system and the virtual registry inside your output
folder.</p>
<p>Once the expanded AppX files are created, the tool uses the Windows App Packager
(<code>MakeAppx.exe</code>) to create a single-file AppX package from those files on disk.
Finally, the tool can be used to create a trusted certificate on your computer
to sign the new AppX package. With the signed AppX package, the CLI can also
automatically install the package on your machine.</p>
<h2 id="step-3-using-the-appx-package"><a href="#step-3-using-the-appx-package">Step 3: Using the AppX Package</a><a class="header-link" href="#step-3-using-the-appx-package" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>In order to run your package, your users will need Windows 10 with the so-called
"Anniversary Update" - details on how to update Windows can be found <a href="https://blogs.windows.com/windowsexperience/2016/08/02/how-to-get-the-windows-10-anniversary-update">here</a>.</p>
<p>In opposition to traditional UWP apps, packaged apps currently need to undergo a
manual verification process, for which you can apply <a href="https://developer.microsoft.com/en-us/windows/projects/campaigns/desktop-bridge">here</a>.
In the meantime, all users will be able to just install your package by double-clicking it,
so a submission to the store might not be necessary if you're simply looking for an
easier installation method. In managed environments (usually enterprises), the
<code>Add-AppxPackage</code> <a href="https://technet.microsoft.com/en-us/library/hh856048.aspx">PowerShell Cmdlet can be used to install it in an automated fashion</a>.</p>
<p>Another important limitation is that the compiled AppX package still contains a
win32 executable - and will therefore not run on Xbox, HoloLens, or Phones.</p>
<h2 id="optional-add-uwp-features-using-a-backgroundtask"><a href="#optional-add-uwp-features-using-a-backgroundtask">Optional: Add UWP Features using a BackgroundTask</a><a class="header-link" href="#optional-add-uwp-features-using-a-backgroundtask" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>You can pair your Electron app up with an invisible UWP background task that
gets to make full use of Windows 10 features - like push notifications,
Cortana integration, or live tiles.</p>
<p>To check out how an Electron app that uses a background task to send toast
notifications and live tiles, <a href="https://github.com/felixrieseberg/electron-uwp-background">check out the Microsoft-provided sample</a>.</p>
<h2 id="optional-convert-using-container-virtualization"><a href="#optional-convert-using-container-virtualization">Optional: Convert using Container Virtualization</a><a class="header-link" href="#optional-convert-using-container-virtualization" title="Permalink"><span class="octicon octicon-link"></span></a></h2>
<p>To generate the AppX package, the <code>electron-windows-store</code> CLI uses a template
that should work for most Electron apps. However, if you are using a custom
installer, or should you experience any trouble with the generated package, you
can attempt to create a package using compilation with a Windows Container - in
that mode, the CLI will install and run your application in blank Windows Container
to determine what modifications your application is exactly doing to the operating
system.</p>
<p>Before running the CLI for the first time, you will have to setup the "Windows Desktop App
Converter". This will take a few minutes, but don't worry - you only have to do
this once. Download and Desktop App Converter from <a href="https://www.microsoft.com/en-us/download/details.aspx?id=51691">here</a>.
You will receive two files: <code>DesktopAppConverter.zip</code> and <code>BaseImage-14316.wim</code>.</p>
<ol>
<li>Unzip <code>DesktopAppConverter.zip</code>. From an elevated PowerShell (opened with
"run as Administrator", ensure that your systems execution policy allows us to
run everything we intend to run by calling <code>Set-ExecutionPolicy bypass</code>.</li>
<li>Then, run the installation of the Desktop App Converter, passing in the
location of the Windows base Image (downloaded as <code>BaseImage-14316.wim</code>), by
calling <code>.\DesktopAppConverter.ps1 -Setup -BaseImage .\BaseImage-14316.wim</code>.</li>
<li>If running the above command prompts you for a reboot, please restart your
machine and run the above command again after a successful restart.</li>
</ol>
<p>Once installation succeeded, you can move on to compiling your Electron app.</p>

  <hr>

    <hr>

    <div class="doc-actions text-center">
      <a class="mr-4 propose-change" href="">
        <span class="octicon octicon-mark-github"></span>
        Improve this doc
      </a>
      
      <a class="mr-4" href="https://crowdin.com/project/electron">
        <span class="octicon octicon-globe"></span>
        Translate this doc
      </a>
      
      <a class="mr-4" href="https://electronjs.org/history">
        <span class="octicon octicon-history"></span>
        Version history
      </a>
    </div>

  </div>
</section>

    <footer class="footer">
      <div class="container">
        <nav class="footer-nav">
          <a class="footer-nav-item active" href="https://electronjs.org/">Electron</a>
          <a class="footer-nav-item active" href="https://electronjs.org/docs">Docs</a>
          <a class="footer-nav-item" href="https://electronjs.org/blog">Blog</a>
          <a class="footer-nav-item" href="https://electronjs.org/community">Community</a>
          <a class="footer-nav-item" href="https://electronjs.org/apps">Apps</a>
          <a class="footer-nav-item" href="https://electronjs.org/releases">Releases</a>
          <a class="footer-nav-item" href="https://electronjs.org/contact">Contact</a>
          <a class="footer-nav-item" href="https://github.com/electron/electron/tree/master/CODE_OF_CONDUCT.md">Code of Conduct</a>
          <a class="footer-nav-item" href="https://electronjs.org/languages">Languages</a>
        </nav>
    
        <span class="footer-social">
          <a class="footer-nav-item icon" href="https://github.com/electron" title="Github Organization"><i class="devicon-github-plain vertical-middle"></i></a>
          <a class="footer-nav-item icon" href="https://twitter.com/electronjs" title="@electronjs on Twitter"><i class="devicon-twitter-plain vertical-middle"></i></a>
        </span>
      </div>
    </footer>
    <script>
      var anchorForId = function (id) {
        var anchor = document.createElement("a");
        anchor.className = "header-link";
        anchor.href      = "#" + id;
        anchor.innerHTML = "<span class='octicon octicon-link'></span>";
        anchor.title = "Permalink";
        return anchor;
      };
    
      var linkifyAnchors = function (level, containingElement) {
        var headers = containingElement.getElementsByTagName("h" + level);
        for (var h = 0; h < headers.length; h++) {
          var header = headers[h];
    
          if (typeof header.id !== "undefined" && header.id !== "") {
            header.appendChild(anchorForId(header.id));
          }
        }
      };
    
      document.onreadystatechange = function () {
        if (this.readyState === "complete") {
          var contentBlock = document.getElementsByClassName("docs")[0] || document.getElementsByClassName("news")[0];
          if (!contentBlock) {
            return;
          }
          for (var level = 1; level <= 6; level++) {
            linkifyAnchors(level, contentBlock);
          }
        }
      };
    </script>
    <script src="All%20the%20Electron%20Docs!%20%20%20Electron_files/index.js"></script>
  

</body></html>